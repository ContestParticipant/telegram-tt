{"version":3,"file":"8570.c92e71a7d0937609dbfa.js","mappings":"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","sources":["webpack://telegram-t/webpack/runtime/chunk loaded","webpack://telegram-t/webpack/runtime/startup chunk dependencies","webpack://telegram-t/./src/config.ts","webpack://telegram-t/./src/util/debugConsole.ts","webpack://telegram-t/./src/util/schedulers.ts","webpack://telegram-t/./src/lib/gramjs/errors/RPCBaseErrors.ts","webpack://telegram-t/./src/lib/gramjs/errors/RPCErrorList.ts","webpack://telegram-t/./src/lib/gramjs/errors/Common.ts","webpack://telegram-t/./src/lib/gramjs/extensions/AsyncQueue.ts","webpack://telegram-t/./src/lib/gramjs/tl/core/MessageContainer.ts","webpack://telegram-t/./src/lib/gramjs/tl/core/index.ts","webpack://telegram-t/./src/lib/gramjs/tl/AllTLObjects.ts","webpack://telegram-t/./src/lib/gramjs/extensions/BinaryReader.ts","webpack://telegram-t/./src/lib/gramjs/extensions/BinaryWriter.ts","webpack://telegram-t/./src/lib/gramjs/extensions/HttpStream.ts","webpack://telegram-t/./src/lib/gramjs/extensions/Logger.ts","webpack://telegram-t/./src/lib/gramjs/extensions/MessagePacker.ts","webpack://telegram-t/./src/lib/gramjs/extensions/PromisedWebSockets.ts","webpack://telegram-t/./src/lib/gramjs/network/connection/Connection.ts","webpack://telegram-t/./src/lib/gramjs/network/connection/TCPAbridged.ts","webpack://telegram-t/./src/lib/gramjs/crypto/CTR.ts","webpack://telegram-t/./src/lib/gramjs/network/connection/TCPObfuscated.ts","webpack://telegram-t/./src/lib/gramjs/network/updates.ts","webpack://telegram-t/./src/lib/gramjs/crypto/IGE.ts","webpack://telegram-t/./src/lib/gramjs/network/MTProtoState.ts","webpack://telegram-t/./src/lib/gramjs/network/MTProtoPlainSender.ts","webpack://telegram-t/./src/lib/gramjs/crypto/AuthKey.ts","webpack://telegram-t/./src/lib/gramjs/extensions/PendingState.ts","webpack://telegram-t/./src/lib/gramjs/crypto/RSA.ts","webpack://telegram-t/./src/lib/gramjs/crypto/Factorizator.ts","webpack://telegram-t/./src/util/Deferred.ts","webpack://telegram-t/./src/lib/gramjs/network/RequestState.ts","webpack://telegram-t/./src/lib/gramjs/network/MTProtoSender.ts","webpack://telegram-t/./src/lib/gramjs/network/Authenticator.ts","webpack://telegram-t/./src/lib/gramjs/errors/index.ts","webpack://telegram-t/./src/lib/gramjs/Utils.ts","webpack://telegram-t/./src/lib/gramjs/sessions/Abstract.ts","webpack://telegram-t/./src/lib/gramjs/sessions/Memory.ts","webpack://telegram-t/./src/lib/gramjs/sessions/CallbackSession.ts","webpack://telegram-t/./src/lib/gramjs/Password.ts","webpack://telegram-t/./src/util/serverTime.ts","webpack://telegram-t/./src/lib/gramjs/client/auth.ts","webpack://telegram-t/./src/util/foreman.ts","webpack://telegram-t/./src/api/gramjs/updates/UpdatePremiumFloodWait.ts","webpack://telegram-t/./src/lib/gramjs/client/downloadFile.ts","webpack://telegram-t/./src/lib/gramjs/client/uploadFile.ts","webpack://telegram-t/./src/lib/gramjs/client/TelegramClient.ts","webpack://telegram-t/./src/lib/gramjs/client/2fa.ts","webpack://telegram-t/./src/util/dates/units.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/peers.ts","webpack://telegram-t/./src/api/gramjs/helpers/misc.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/helpers.ts","webpack://telegram-t/./src/api/gramjs/localDb.ts","webpack://telegram-t/./src/api/gramjs/updates/apiUpdateEmitter.ts","webpack://telegram-t/./src/api/types/messages.ts","webpack://telegram-t/./src/api/types/media.ts","webpack://telegram-t/./src/lib/twemojiRegex.js","webpack://telegram-t/./src/util/emoji/fixNonStandardEmoji.ts","webpack://telegram-t/./src/util/emoji/parseEmojiOnlyString.ts","webpack://telegram-t/./src/global/helpers/getEmojiOnlyCountForMessage.ts","webpack://telegram-t/./src/util/iteratees.ts","webpack://telegram-t/./src/util/waveform.ts","webpack://telegram-t/./src/api/gramjs/gramjsBuilders/index.ts","webpack://telegram-t/./src/api/gramjs/helpers/localDb.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/calls.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/pathBytesToSvg.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/common.ts","webpack://telegram-t/./src/util/files.ts","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/symbols.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/gifts.ts","webpack://telegram-t/./src/components/common/helpers/waveform.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/messageContent.ts","webpack://telegram-t/./src/util/generateWaveform.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/reactions.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/messages.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/stories.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/bots.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/business.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/users.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/chats.ts","webpack://telegram-t/./src/api/gramjs/updates/entityProcessor.ts","webpack://telegram-t/./src/util/SortedQueue.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/misc.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/statistics.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/payments.ts","webpack://telegram-t/./src/api/gramjs/scheduleUnmute.ts","webpack://telegram-t/./src/api/gramjs/updates/UpdatePts.ts","webpack://telegram-t/./src/api/gramjs/updates/mtpUpdateHandler.ts","webpack://telegram-t/./src/api/gramjs/updates/updateManager.ts","webpack://telegram-t/./src/api/gramjs/methods/auth.ts","webpack://telegram-t/./src/util/cacheApi.ts","webpack://telegram-t/./src/api/gramjs/methods/media.ts","webpack://telegram-t/./src/api/gramjs/ChatAbortController.ts","webpack://telegram-t/./src/api/gramjs/methods/client.ts","webpack://telegram-t/./src/api/gramjs/methods/account.ts","webpack://telegram-t/./src/api/gramjs/methods/chats.ts","webpack://telegram-t/./src/api/gramjs/methods/messages.ts","webpack://telegram-t/./src/util/keys/messageKey.ts","webpack://telegram-t/./src/api/gramjs/methods/users.ts","webpack://telegram-t/./src/api/gramjs/methods/symbols.ts","webpack://telegram-t/./src/api/gramjs/methods/management.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/appConfig.ts","webpack://telegram-t/./src/api/gramjs/methods/settings.ts","webpack://telegram-t/./src/api/gramjs/methods/twoFaSettings.ts","webpack://telegram-t/./src/api/gramjs/methods/bots.ts","webpack://telegram-t/./src/api/gramjs/methods/calls.ts","webpack://telegram-t/./src/api/gramjs/methods/reactions.ts","webpack://telegram-t/./src/api/gramjs/methods/statistics.ts","webpack://telegram-t/./src/api/gramjs/methods/phoneCallState.ts","webpack://telegram-t/./src/api/gramjs/methods/stories.ts","webpack://telegram-t/./src/api/gramjs/methods/payments.ts","webpack://telegram-t/./src/api/gramjs/methods/fragment.ts","webpack://telegram-t/./src/api/gramjs/methods/init.ts","webpack://telegram-t/./src/api/gramjs/worker/worker.ts","webpack://telegram-t/./src/lib/gramjs/Helpers.ts","webpack://telegram-t/./src/lib/gramjs/crypto/converters.ts","webpack://telegram-t/./src/lib/gramjs/crypto/crypto.ts","webpack://telegram-t/./src/lib/gramjs/crypto/words.ts","webpack://telegram-t/./src/lib/gramjs/tl/generationHelpers.ts","webpack://telegram-t/webpack/bootstrap","webpack://telegram-t/webpack/runtime/compat get default export","webpack://telegram-t/webpack/runtime/define property getters","webpack://telegram-t/webpack/runtime/ensure chunk","webpack://telegram-t/webpack/runtime/get javascript chunk filename","webpack://telegram-t/webpack/runtime/get mini-css chunk filename","webpack://telegram-t/webpack/runtime/global","webpack://telegram-t/webpack/runtime/hasOwnProperty shorthand","webpack://telegram-t/webpack/runtime/make namespace object","webpack://telegram-t/webpack/runtime/node module decorator","webpack://telegram-t/webpack/runtime/publicPath","webpack://telegram-t/webpack/runtime/importScripts chunk loading","webpack://telegram-t/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([7784,8287,2786,580].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","import type {\n  ApiLimitType, ApiLimitTypeForPromo, ApiPremiumSection, ApiReactionEmoji,\n} from './api/types';\n\nexport const APP_CODE_NAME = 'A';\nexport const APP_NAME = process.env.APP_NAME || `Telegram Web ${APP_CODE_NAME}`;\nexport const RELEASE_DATETIME = process.env.RELEASE_DATETIME;\n\nexport const PRODUCTION_HOSTNAME = 'web.telegram.org';\nexport const PRODUCTION_URL = 'https://web.telegram.org/a';\nexport const WEB_VERSION_BASE = 'https://web.telegram.org/'; // Used to redirect to other versions\nexport const BASE_URL = process.env.BASE_URL;\n\nexport const IS_MOCKED_CLIENT = process.env.APP_MOCKED_CLIENT === '1';\nexport const IS_TEST = process.env.APP_ENV === 'test';\nexport const IS_PERF = process.env.APP_ENV === 'perf';\nexport const IS_BETA = process.env.APP_ENV === 'staging';\nexport const IS_PACKAGED_ELECTRON = process.env.IS_PACKAGED_ELECTRON;\n\nexport const DEBUG = process.env.APP_ENV !== 'production';\nexport const DEBUG_MORE = false;\nexport const DEBUG_LOG_FILENAME = 'tt-log.json';\nexport const STRICTERDOM_ENABLED = DEBUG;\nexport const BOT_VERIFICATION_PEERS_LIMIT = 20;\n\nexport const BETA_CHANGELOG_URL = 'https://telegra.ph/WebA-Beta-03-20';\nexport const ELECTRON_HOST_URL = process.env.ELECTRON_HOST_URL!;\n\nexport const DEBUG_ALERT_MSG = 'Shoot!\\nSomething went wrong, please see the error details in Dev Tools Console.';\nexport const DEBUG_GRAMJS = false;\n\nexport const PAGE_TITLE = process.env.APP_TITLE!;\nexport const INACTIVE_MARKER = '[Inactive]';\n\nexport const DEBUG_PAYMENT_SMART_GLOCAL = false;\n\nexport const SESSION_USER_KEY = 'user_auth';\nexport const LEGACY_PASSCODE_CACHE_NAME = 'tt-passcode';\n\nexport const GLOBAL_STATE_CACHE_DISABLED = false;\nexport const GLOBAL_STATE_CACHE_KEY = 'tt-global-state';\nexport const GLOBAL_STATE_CACHE_USER_LIST_LIMIT = 500;\nexport const GLOBAL_STATE_CACHE_CHAT_LIST_LIMIT = 200;\nexport const GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT = 10;\nexport const GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT = 150;\n\nexport const IS_SCREEN_LOCKED_CACHE_KEY = 'tt-is-screen-locked';\n\nexport const MEDIA_CACHE_DISABLED = false;\nexport const MEDIA_CACHE_NAME = 'tt-media';\nexport const MEDIA_CACHE_NAME_AVATARS = 'tt-media-avatars';\nexport const MEDIA_PROGRESSIVE_CACHE_DISABLED = false;\nexport const MEDIA_PROGRESSIVE_CACHE_NAME = 'tt-media-progressive';\nexport const MEDIA_CACHE_MAX_BYTES = 512 * 1024; // 512 KB\nexport const CUSTOM_BG_CACHE_NAME = 'tt-custom-bg';\nexport const LANG_CACHE_NAME = 'tt-lang-packs-v49';\nexport const ASSET_CACHE_NAME = 'tt-assets';\nexport const AUTODOWNLOAD_FILESIZE_MB_LIMITS = [1, 5, 10, 50, 100, 500];\nexport const DATA_BROADCAST_CHANNEL_NAME = 'tt-global';\nexport const ESTABLISH_BROADCAST_CHANNEL_NAME = 'tt-establish';\nexport const MULTITAB_LOCALSTORAGE_KEY = 'tt-multitab';\n\nexport const DOWNLOAD_WORKERS = 16;\nexport const UPLOAD_WORKERS = 16;\n\nconst isBigScreen = typeof window !== 'undefined' && window.innerHeight >= 900;\n\nexport const MIN_PASSWORD_LENGTH = 1;\n\nexport const MESSAGE_LIST_SLICE = isBigScreen ? 60 : 40;\nexport const MESSAGE_LIST_VIEWPORT_LIMIT = MESSAGE_LIST_SLICE * 2;\n\nexport const ARCHIVE_MINIMIZED_HEIGHT = 36;\nexport const CHAT_HEIGHT_PX = 72;\nexport const TOPIC_HEIGHT_PX = 65;\nexport const PEER_PICKER_ITEM_HEIGHT_PX = 56;\nexport const CHAT_LIST_SLICE = isBigScreen ? 30 : 25;\nexport const CHAT_LIST_LOAD_SLICE = 100;\nexport const SHARED_MEDIA_SLICE = 42;\nexport const CHAT_MEDIA_SLICE = 42;\nexport const MESSAGE_SEARCH_SLICE = 42;\nexport const GLOBAL_SEARCH_SLICE = 20;\nexport const GLOBAL_TOPIC_SEARCH_SLICE = 5;\nexport const GLOBAL_SEARCH_CONTACTS_LIMIT = 20;\nexport const MEMBERS_SLICE = 30;\nexport const MEMBERS_LOAD_SLICE = 200;\nexport const PINNED_MESSAGES_LIMIT = 50;\nexport const BLOCKED_LIST_LIMIT = 100;\nexport const PROFILE_SENSITIVE_AREA = 500;\nexport const TOPIC_LIST_SENSITIVE_AREA = 600;\nexport const GROUP_CALL_PARTICIPANTS_LIMIT = 100;\nexport const STORY_LIST_LIMIT = 100;\nexport const API_GENERAL_ID_LIMIT = 100;\nexport const STATISTICS_PUBLIC_FORWARDS_LIMIT = 50;\n\nexport const STORY_VIEWS_MIN_SEARCH = 15;\nexport const STORY_MIN_REACTIONS_SORT = 10;\nexport const STORY_VIEWS_MIN_CONTACTS_FILTER = 20;\n\nexport const GLOBAL_SUGGESTED_CHANNELS_ID = 'global';\n\n// As in Telegram for Android\n// https://github.com/DrKLO/Telegram/blob/51e9947527/TMessagesProj/src/main/java/org/telegram/messenger/MediaDataController.java#L7799\nexport const TOP_REACTIONS_LIMIT = 100;\n\n// As in Telegram for Android\n// https://github.com/DrKLO/Telegram/blob/51e9947527/TMessagesProj/src/main/java/org/telegram/messenger/MediaDataController.java#L7781\nexport const RECENT_REACTIONS_LIMIT = 50;\nexport const REACTION_LIST_LIMIT = 100;\nexport const REACTION_UNREAD_SLICE = 100;\nexport const MENTION_UNREAD_SLICE = 100;\nexport const TOPICS_SLICE = 20;\nexport const TOPICS_SLICE_SECOND_LOAD = 500;\n\nexport const TOP_CHAT_MESSAGES_PRELOAD_LIMIT = 20;\n\nexport const SPONSORED_MESSAGE_CACHE_MS = 300000; // 5 min\n\nexport const DEFAULT_VOLUME = 1;\nexport const DEFAULT_PLAYBACK_RATE = 1;\nexport const PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION = 20 * 60; // 20 min\n\nexport const ANIMATION_LEVEL_CUSTOM = -1;\nexport const ANIMATION_LEVEL_MIN = 0;\nexport const ANIMATION_LEVEL_MED = 1;\nexport const ANIMATION_LEVEL_MAX = 2;\nexport const ANIMATION_LEVEL_DEFAULT = ANIMATION_LEVEL_MAX;\n\nexport const DEFAULT_MESSAGE_TEXT_SIZE_PX = 16;\nexport const IOS_DEFAULT_MESSAGE_TEXT_SIZE_PX = 17;\nexport const MACOS_DEFAULT_MESSAGE_TEXT_SIZE_PX = 15;\n\nexport const PREVIEW_AVATAR_COUNT = 3;\n\nexport const DRAFT_DEBOUNCE = 10000; // 10s\nexport const SEND_MESSAGE_ACTION_INTERVAL = 3000; // 3s\n// 10000s from https://corefork.telegram.org/api/url-authorization#automatic-authorization\nexport const APP_CONFIG_REFETCH_INTERVAL = 10000 * 1000;\nexport const GENERAL_REFETCH_INTERVAL = 60 * 60 * 1000; // 1h\n\nexport const EDITABLE_INPUT_ID = 'editable-message-text';\nexport const EDITABLE_INPUT_MODAL_ID = 'editable-message-text-modal';\nexport const EDITABLE_STORY_INPUT_ID = 'editable-story-input-text';\n// eslint-disable-next-line max-len\nexport const EDITABLE_INPUT_CSS_SELECTOR = `.messages-layout .Transition_slide-active #${EDITABLE_INPUT_ID}, .messages-layout .Transition > .Transition_slide-to #${EDITABLE_INPUT_ID}`;\nexport const EDITABLE_INPUT_MODAL_CSS_SELECTOR = `#${EDITABLE_INPUT_MODAL_ID}`;\nexport const EDITABLE_STORY_INPUT_CSS_SELECTOR = `#${EDITABLE_STORY_INPUT_ID}`;\n\nexport const GIFT_MESSAGE_INPUT_ID = 'gift-message-editor';\nexport const FOLDER_NAME_INPUT_ID = 'folder-name-editor';\n\nexport const CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\nexport const MESSAGE_CONTENT_CLASS_NAME = 'message-content';\nexport const MESSAGE_CONTENT_SELECTOR = '.message-content';\n\nexport const RESIZE_HANDLE_CLASS_NAME = 'resizeHandle';\nexport const RESIZE_HANDLE_SELECTOR = `.${RESIZE_HANDLE_CLASS_NAME}`;\n\nexport const SNAP_EFFECT_CONTAINER_ID = 'snap-effect-container';\nexport const SNAP_EFFECT_ID = 'snap-effect';\n\nexport const STARS_ICON_PLACEHOLDER = '⭐';\nexport const STARS_CURRENCY_CODE = 'XTR';\n\nexport const MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN = 1275; // px\nexport const MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN = 925; // px\nexport const MOBILE_SCREEN_MAX_WIDTH = 600; // px\nexport const MOBILE_SCREEN_LANDSCAPE_MAX_WIDTH = 950; // px\nexport const MOBILE_SCREEN_LANDSCAPE_MAX_HEIGHT = 450; // px\n\nexport const MAX_INT_32 = 2 ** 31 - 1;\nexport const TMP_CHAT_ID = '0';\n\nexport const ANIMATION_END_DELAY = 100;\nexport const ANIMATION_WAVE_MIN_INTERVAL = 200;\n\nexport const SCROLL_MIN_DURATION = 300;\nexport const SCROLL_MAX_DURATION = 600;\nexport const SCROLL_MAX_DISTANCE = 800;\nexport const SCROLL_SHORT_TRANSITION_MAX_DISTANCE = 300; // px\n\n// Average duration of message sending animation\nexport const API_UPDATE_THROTTLE = Math.round((SCROLL_MIN_DURATION + SCROLL_MAX_DURATION) / 2);\nexport const API_THROTTLE_RESET_UPDATES = new Set([\n  'newMessage', 'newScheduledMessage', 'deleteMessages', 'deleteScheduledMessages', 'deleteHistory',\n]);\n\nexport const LOCK_SCREEN_ANIMATION_DURATION_MS = 200;\n\nexport const STICKER_SIZE_INLINE_DESKTOP_FACTOR = 13;\nexport const STICKER_SIZE_INLINE_MOBILE_FACTOR = 11;\nexport const STICKER_SIZE_AUTH = 160;\nexport const STICKER_SIZE_AUTH_MOBILE = 120;\nexport const STICKER_SIZE_PICKER = 72;\nexport const EMOJI_SIZE_PICKER = 36;\nexport const COMPOSER_EMOJI_SIZE_PICKER = 32;\nexport const STICKER_SIZE_GENERAL_SETTINGS = 48;\nexport const STICKER_SIZE_PICKER_HEADER = 32;\nexport const STICKER_PICKER_MAX_SHARED_COVERS = 20;\nexport const STICKER_SIZE_SEARCH = 72;\nexport const STICKER_SIZE_MODAL = 72;\nexport const EMOJI_SIZE_MODAL = 36;\nexport const STICKER_SIZE_TWO_FA = 160;\nexport const STICKER_SIZE_PASSCODE = 160;\nexport const STICKER_SIZE_DISCUSSION_GROUPS = 140;\nexport const STICKER_SIZE_FOLDER_SETTINGS = 100;\nexport const STICKER_SIZE_INLINE_BOT_RESULT = 100;\nexport const STICKER_SIZE_JOIN_REQUESTS = 140;\nexport const STICKER_SIZE_INVITES = 140;\nexport const RECENT_STICKERS_LIMIT = 20;\nexport const RECENT_STATUS_LIMIT = 20;\nexport const EMOJI_STATUS_LOOP_LIMIT = 2;\nexport const EMOJI_SIZES = 7;\nexport const TOP_SYMBOL_SET_ID = 'top';\nexport const POPULAR_SYMBOL_SET_ID = 'popular';\nexport const RECENT_SYMBOL_SET_ID = 'recent';\nexport const FAVORITE_SYMBOL_SET_ID = 'favorite';\nexport const EFFECT_STICKERS_SET_ID = 'effectStickers';\nexport const EFFECT_EMOJIS_SET_ID = 'effectEmojis';\nexport const CHAT_STICKER_SET_ID = 'chatStickers';\nexport const DEFAULT_TOPIC_ICON_STICKER_ID = 'topic-default-icon';\nexport const DEFAULT_STATUS_ICON_ID = 'status-default-icon';\nexport const EMOJI_IMG_REGEX = /<img[^>]+alt=\"([^\"]+)\"(?![^>]*data-document-id)[^>]*>/gm;\n\nexport const BASE_EMOJI_KEYWORD_LANG = 'en';\n\nexport const MENU_TRANSITION_DURATION = 200;\nexport const SLIDE_TRANSITION_DURATION = 450;\n\nexport const BIRTHDAY_NUMBERS_SET = 'FestiveFontEmoji';\nexport const RESTRICTED_EMOJI_SET = 'RestrictedEmoji';\n\nexport const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n\nexport const VIDEO_WEBM_TYPE = 'video/webm';\nexport const GIF_MIME_TYPE = 'image/gif';\n\nexport const LOTTIE_STICKER_MIME_TYPE = 'application/x-tgsticker';\nexport const WALLPAPER_PATTERN_MIME_TYPE = 'application/x-tgwallpattern';\nexport const VIDEO_STICKER_MIME_TYPE = VIDEO_WEBM_TYPE;\n\nexport const SUPPORTED_PHOTO_CONTENT_TYPES = new Set([\n  'image/png', 'image/jpeg', GIF_MIME_TYPE,\n]);\n\nexport const SUPPORTED_VIDEO_CONTENT_TYPES = new Set([\n  'video/mp4', 'video/quicktime',\n]);\n\nexport const SUPPORTED_AUDIO_CONTENT_TYPES = new Set([\n  'audio/mp3',\n  'audio/ogg',\n  'audio/wav',\n  'audio/mpeg',\n  'audio/flac',\n  'audio/aac',\n  'audio/m4a',\n  'audio/mp4',\n  'audio/x-m4a',\n]);\n\nexport const CONTENT_TYPES_WITH_PREVIEW = new Set([\n  ...SUPPORTED_PHOTO_CONTENT_TYPES,\n  ...SUPPORTED_VIDEO_CONTENT_TYPES,\n]);\n\nexport const CONTENT_NOT_SUPPORTED = 'The message is not supported on this version of Telegram.';\n\n// Taken from https://github.com/telegramdesktop/tdesktop/blob/41d9a9fcbd0c809c60ddbd9350791b1436aff7d9/Telegram/SourceFiles/ui/boxes/choose_language_box.cpp#L28\nexport const SUPPORTED_TRANSLATION_LANGUAGES = [\n  // Official\n  'en', 'ar', 'be', 'ca', 'zh', 'nl', 'fr', 'de', 'id',\n  'it', 'ja', 'ko', 'pl', 'pt', 'ru', 'es', 'uk',\n  // Unofficial\n  'af', 'sq', 'am', 'hy', 'az', 'eu', 'bn', 'bs', 'bg',\n  'ceb', 'zh-CN', 'zh-TW', 'co', 'hr', 'cs', 'da', 'eo',\n  'et', 'fi', 'fy', 'gl', 'ka', 'el', 'gu', 'ht', 'ha',\n  'haw', 'he', 'iw', 'hi', 'hmn', 'hu', 'is', 'ig', 'ga',\n  'jv', 'kn', 'kk', 'km', 'rw', 'ku', 'ky', 'lo', 'la',\n  'lv', 'lt', 'lb', 'mk', 'mg', 'ms', 'ml', 'mt', 'mi',\n  'mr', 'mn', 'my', 'ne', 'no', 'ny', 'or', 'ps', 'fa',\n  'pa', 'ro', 'sm', 'gd', 'sr', 'st', 'sn', 'sd', 'si',\n  'sk', 'sl', 'so', 'su', 'sw', 'sv', 'tl', 'tg', 'ta',\n  'tt', 'te', 'th', 'tr', 'tk', 'ur', 'ug', 'uz', 'vi',\n  'cy', 'xh', 'yi', 'yo', 'zu',\n];\n\n// eslint-disable-next-line max-len\nexport const RE_LINK_TEMPLATE = '((ftp|https?):\\\\/\\\\/)?((www\\\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\\\.[a-zA-Z][-a-zA-Z0-9]{1,62})\\\\b([-a-zA-Z0-9()@:%_+.,~#?&/=]*)';\nexport const RE_MENTION_TEMPLATE = '(@[\\\\w\\\\d_-]+)';\nexport const RE_TG_LINK = /^tg:(\\/\\/)?/i;\nexport const RE_TME_LINK = /^(https?:\\/\\/)?([-a-zA-Z0-9@:%_+~#=]{1,32}\\.)?t\\.me/i;\nexport const RE_TELEGRAM_LINK = /^(https?:\\/\\/)?telegram\\.org\\//i;\nexport const TME_LINK_PREFIX = 'https://t.me/';\nexport const BOT_FATHER_USERNAME = 'botfather';\nexport const USERNAME_PURCHASE_ERROR = 'USERNAME_PURCHASE_AVAILABLE';\nexport const MESSAGE_ID_REQUIRED_ERROR = 'MESSAGE_ID_REQUIRED';\nexport const PURCHASE_USERNAME = 'auction';\nexport const ACCEPTABLE_USERNAME_ERRORS = new Set([USERNAME_PURCHASE_ERROR, 'USERNAME_INVALID']);\nexport const TME_WEB_DOMAINS = new Set(['t.me', 'web.t.me', 'a.t.me', 'k.t.me', 'z.t.me']);\nexport const WEB_APP_PLATFORM = 'weba';\nexport const LANG_PACK = 'weba';\n\n// eslint-disable-next-line max-len\nexport const COUNTRIES_WITH_12H_TIME_FORMAT = new Set(['AU', 'BD', 'CA', 'CO', 'EG', 'HN', 'IE', 'IN', 'JO', 'MX', 'MY', 'NI', 'NZ', 'PH', 'PK', 'SA', 'SV', 'US']);\n\nexport const API_CHAT_TYPES = ['bots', 'channels', 'chats', 'users'] as const;\n\nexport const HEART_REACTION: ApiReactionEmoji = {\n  type: 'emoji',\n  emoticon: '❤',\n};\n\n// MTProto constants\nexport const SERVICE_NOTIFICATIONS_USER_ID = '777000';\nexport const REPLIES_USER_ID = '1271266957'; // TODO For Test connection ID must be equal to 708513\nexport const VERIFICATION_CODES_USER_ID = '489000';\nexport const ANONYMOUS_USER_ID = '2666000';\nexport const RESTRICTED_EMOJI_SET_ID = '7173162320003080';\nexport const CHANNEL_ID_LENGTH = 14; // 14 symbols, based on TDLib's `ZERO_CHANNEL_ID = -1000000000000`\nexport const DEFAULT_GIF_SEARCH_BOT_USERNAME = 'gif';\nexport const ALL_FOLDER_ID = 0;\nexport const ARCHIVED_FOLDER_ID = 1;\nexport const SAVED_FOLDER_ID = -1;\nexport const DELETED_COMMENTS_CHANNEL_ID = '-1000000000777';\nexport const MAX_MEDIA_FILES_FOR_ALBUM = 10;\nexport const MAX_ACTIVE_PINNED_CHATS = 5;\nexport const SCHEDULED_WHEN_ONLINE = 0x7FFFFFFE;\nexport const LANG_PACKS = ['android', 'ios', 'tdesktop', 'macos'] as const;\nexport const FEEDBACK_URL = 'https://bugs.telegram.org/?tag_ids=41&sort=time';\nexport const FAQ_URL = 'https://telegram.org/faq';\nexport const PRIVACY_URL = 'https://telegram.org/privacy';\nexport const MINI_APP_TOS_URL = 'https://telegram.org/tos/mini-apps';\nexport const FRAGMENT_ADS_URL = 'https://fragment.com/ads';\nexport const GENERAL_TOPIC_ID = 1;\nexport const STORY_EXPIRE_PERIOD = 86400; // 1 day\nexport const STORY_VIEWERS_EXPIRE_PERIOD = 86400; // 1 day\nexport const FRESH_AUTH_PERIOD = 86400; // 1 day\nexport const GIVEAWAY_BOOST_PER_PREMIUM = 4;\nexport const GIVEAWAY_MAX_ADDITIONAL_CHANNELS = 10;\nexport const GIVEAWAY_MAX_ADDITIONAL_USERS = 10;\nexport const GIVEAWAY_MAX_ADDITIONAL_COUNTRIES = 10;\nexport const BOOST_PER_SENT_GIFT = 3;\nexport const FRAGMENT_PHONE_CODE = '888';\nexport const FRAGMENT_PHONE_LENGTH = 11;\n\nexport const LIGHT_THEME_BG_COLOR = '#99BA92';\nexport const DARK_THEME_BG_COLOR = '#0F0F0F';\nexport const DEFAULT_PATTERN_COLOR = '#4A8E3A8C';\nexport const DARK_THEME_PATTERN_COLOR = '#0A0A0A8C';\nexport const PEER_COLOR_BG_OPACITY = '1a';\nexport const PEER_COLOR_BG_ACTIVE_OPACITY = '2b';\nexport const PEER_COLOR_GRADIENT_STEP = 5; // px\nexport const MAX_UPLOAD_FILEPART_SIZE = 524288;\nexport const MAX_UNIQUE_REACTIONS = 11;\n\nexport const IGNORE_UNHANDLED_ERRORS = new Set([\n  'USER_CANCELED',\n]);\n\n// Group calls\nexport const GROUP_CALL_VOLUME_MULTIPLIER = 100;\nexport const GROUP_CALL_DEFAULT_VOLUME = 100 * GROUP_CALL_VOLUME_MULTIPLIER;\n\nexport const DEFAULT_LIMITS: Record<ApiLimitType, readonly [number, number]> = {\n  uploadMaxFileparts: [4000, 8000],\n  stickersFaved: [5, 10],\n  savedGifs: [200, 400],\n  dialogFiltersChats: [100, 200],\n  dialogFilters: [10, 20],\n  dialogFolderPinned: [5, 10],\n  captionLength: [1024, 4096],\n  channels: [500, 1000],\n  channelsPublic: [10, 20],\n  aboutLength: [70, 140],\n  chatlistInvites: [3, 100],\n  chatlistJoined: [2, 20],\n  recommendedChannels: [10, 100],\n  savedDialogsPinned: [5, 100],\n};\nexport const DEFAULT_MAX_MESSAGE_LENGTH = 4096;\n\nexport const ONE_TIME_MEDIA_TTL_SECONDS = 2147483647;\n\n// Premium\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'stories',\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n  'translations',\n  'saved_tags',\n  'last_seen',\n  'message_privacy',\n  'effects',\n] as const;\n\nexport const PREMIUM_BOTTOM_VIDEOS: ApiPremiumSection[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'infinite_reactions',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n  'translations',\n  'saved_tags',\n  'last_seen',\n  'message_privacy',\n  'effects',\n];\n\nexport const PREMIUM_LIMITS_ORDER: ApiLimitTypeForPromo[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n  'recommendedChannels',\n];\n","/* eslint-disable no-console */\n\nexport const DEBUG_LEVELS = ['log', 'error', 'warn', 'info', 'debug'] as const;\nexport type DebugLevel = typeof DEBUG_LEVELS[number];\n// @ts-ignore\nconst ORIGINAL_FUNCTIONS: Record<DebugLevel, (...args: any[]) => void> = DEBUG_LEVELS.reduce((acc, level) => {\n  // @ts-ignore\n  acc[level] = console[level];\n  return acc;\n}, {});\n\ntype DebugEntry = {\n  level: DebugLevel;\n  args: any[];\n  date: Date;\n};\nlet DEBUG_LOGS: DebugEntry[] = [];\n\nexport function logDebugMessage(level: DebugLevel, ...args: any[]) {\n  DEBUG_LOGS.push({\n    level,\n    args,\n    date: new Date(),\n  });\n  ORIGINAL_FUNCTIONS[level](...args);\n}\n\nexport function initDebugConsole() {\n  DEBUG_LOGS = [];\n  DEBUG_LEVELS.forEach((level) => {\n    // @ts-ignore\n    console[level] = (...args: any[]) => {\n      logDebugMessage(level, ...args);\n    };\n  });\n}\n\nexport function disableDebugConsole() {\n  DEBUG_LEVELS.forEach((level) => {\n    // @ts-ignore\n    console[level] = ORIGINAL_FUNCTIONS[level];\n  });\n  DEBUG_LOGS = [];\n}\n\nexport function getDebugLogs() {\n  return JSON.stringify(DEBUG_LOGS, (key, value) => (typeof value === 'bigint'\n    ? value.toString()\n    : value));\n}\n","export type Scheduler = typeof requestAnimationFrame | typeof onTickEnd;\n\nexport function debounce<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n  shouldRunLast = true,\n) {\n  let waitingTimeout: number | undefined;\n\n  return (...args: Parameters<F>) => {\n    if (waitingTimeout) {\n      clearTimeout(waitingTimeout);\n      waitingTimeout = undefined;\n    } else if (shouldRunFirst) {\n      fn(...args);\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    waitingTimeout = self.setTimeout(() => {\n      if (shouldRunLast) {\n        fn(...args);\n      }\n\n      waitingTimeout = undefined;\n    }, ms);\n  };\n}\n\nexport function throttle<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n) {\n  let interval: number | undefined;\n  let isPending: boolean;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    isPending = true;\n    args = _args;\n\n    if (!interval) {\n      if (shouldRunFirst) {\n        isPending = false;\n        fn(...args);\n      }\n\n      // eslint-disable-next-line no-restricted-globals\n      interval = self.setInterval(() => {\n        if (!isPending) {\n          // eslint-disable-next-line no-restricted-globals\n          self.clearInterval(interval!);\n          interval = undefined;\n          return;\n        }\n\n        isPending = false;\n        fn(...args);\n      }, ms);\n    }\n  };\n}\n\nexport function throttleWithTickEnd<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(onTickEnd, fn);\n}\n\nexport function throttleWith<F extends AnyToVoidFunction>(schedulerFn: Scheduler, fn: F) {\n  let waiting = false;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    args = _args;\n\n    if (!waiting) {\n      waiting = true;\n\n      schedulerFn(() => {\n        waiting = false;\n        fn(...args);\n      });\n    }\n  };\n}\n\nexport const pause = (ms: number) => new Promise<void>((resolve) => {\n  setTimeout(() => resolve(), ms);\n});\n\nexport function rafPromise() {\n  return new Promise<void>((resolve) => {\n    fastRaf(resolve);\n  });\n}\n\nconst FAST_RAF_TIMEOUT_FALLBACK_MS = 35; // < 30 FPS\n\nlet fastRafCallbacks: Set<NoneToVoidFunction> | undefined;\nlet fastRafFallbackCallbacks: Set<NoneToVoidFunction> | undefined;\nlet fastRafFallbackTimeout: number | undefined;\n\n// May result in an immediate execution if called from another RAF callback which was scheduled\n// (and therefore is executed) earlier than RAF callback scheduled by `fastRaf`\nexport function fastRaf(callback: NoneToVoidFunction, withTimeoutFallback = false) {\n  if (!fastRafCallbacks) {\n    fastRafCallbacks = new Set([callback]);\n\n    requestAnimationFrame(() => {\n      const currentCallbacks = fastRafCallbacks!;\n\n      fastRafCallbacks = undefined;\n      fastRafFallbackCallbacks = undefined;\n\n      if (fastRafFallbackTimeout) {\n        clearTimeout(fastRafFallbackTimeout);\n        fastRafFallbackTimeout = undefined;\n      }\n\n      currentCallbacks.forEach((cb) => cb());\n    });\n  } else {\n    fastRafCallbacks.add(callback);\n  }\n\n  if (withTimeoutFallback) {\n    if (!fastRafFallbackCallbacks) {\n      fastRafFallbackCallbacks = new Set([callback]);\n    } else {\n      fastRafFallbackCallbacks.add(callback);\n    }\n\n    if (!fastRafFallbackTimeout) {\n      fastRafFallbackTimeout = window.setTimeout(() => {\n        const currentTimeoutCallbacks = fastRafFallbackCallbacks!;\n\n        if (fastRafCallbacks) {\n          currentTimeoutCallbacks.forEach(fastRafCallbacks.delete, fastRafCallbacks);\n        }\n        fastRafFallbackCallbacks = undefined;\n\n        if (fastRafFallbackTimeout) {\n          clearTimeout(fastRafFallbackTimeout);\n          fastRafFallbackTimeout = undefined;\n        }\n\n        currentTimeoutCallbacks.forEach((cb) => cb());\n      }, FAST_RAF_TIMEOUT_FALLBACK_MS);\n    }\n  }\n}\n\nlet onTickEndCallbacks: NoneToVoidFunction[] | undefined;\n\nexport function onTickEnd(callback: NoneToVoidFunction) {\n  if (!onTickEndCallbacks) {\n    onTickEndCallbacks = [callback];\n\n    Promise.resolve().then(() => {\n      const currentCallbacks = onTickEndCallbacks!;\n      onTickEndCallbacks = undefined;\n      currentCallbacks.forEach((cb) => cb());\n    });\n  } else {\n    onTickEndCallbacks.push(callback);\n  }\n}\n\nconst IDLE_TIMEOUT = 500;\n\nlet onIdleCallbacks: NoneToVoidFunction[] | undefined;\n\nexport function onIdle(callback: NoneToVoidFunction) {\n  // eslint-disable-next-line no-restricted-globals\n  if (!self.requestIdleCallback) {\n    onTickEnd(callback);\n    return;\n  }\n\n  if (!onIdleCallbacks) {\n    onIdleCallbacks = [callback];\n\n    requestIdleCallback((deadline) => {\n      const currentCallbacks = onIdleCallbacks!;\n      onIdleCallbacks = undefined;\n\n      while (currentCallbacks.length) {\n        const cb = currentCallbacks.shift()!;\n        cb();\n\n        if (!deadline.timeRemaining()) break;\n      }\n\n      if (currentCallbacks.length) {\n        if (onIdleCallbacks) {\n          // Prepend the remaining callbacks if the next pass is already planned\n          onIdleCallbacks = currentCallbacks.concat(onIdleCallbacks);\n        } else {\n          currentCallbacks.forEach(onIdle);\n        }\n      }\n    }, { timeout: IDLE_TIMEOUT });\n  } else {\n    onIdleCallbacks.push(callback);\n  }\n}\n\nlet beforeUnloadCallbacks: NoneToVoidFunction[] | undefined;\n\nexport function onBeforeUnload(callback: NoneToVoidFunction, isLast = false) {\n  if (!beforeUnloadCallbacks) {\n    beforeUnloadCallbacks = [];\n    // eslint-disable-next-line no-restricted-globals\n    self.addEventListener('beforeunload', () => {\n      beforeUnloadCallbacks!.forEach((cb) => cb());\n    });\n  }\n\n  if (isLast) {\n    beforeUnloadCallbacks.push(callback);\n  } else {\n    beforeUnloadCallbacks.unshift(callback);\n  }\n\n  return () => {\n    beforeUnloadCallbacks = beforeUnloadCallbacks!.filter((cb) => cb !== callback);\n  };\n}\n","import type { Api } from '../tl';\n\n/**\n * Base class for all Remote Procedure Call errors.\n */\nexport class RPCError extends Error {\n    public code: number | undefined;\n\n    public errorMessage: string;\n\n    constructor(message: string, request: Api.AnyRequest, code?: number) {\n        super(\n            'RPCError {0}: {1}{2}'\n                .replace('{0}', code?.toString() || '')\n                .replace('{1}', message)\n                .replace('{2}', RPCError._fmtRequest(request)),\n        );\n        this.code = code;\n        this.errorMessage = message;\n    }\n\n    static _fmtRequest(request: Api.AnyRequest) {\n        // TODO fix this\n        if (request) {\n            return ` (caused by ${request.className})`;\n        } else {\n            return '';\n        }\n    }\n}\n\n/**\n * The request must be repeated, but directed to a different data center.\n */\nexport class InvalidDCError extends RPCError {\n    constructor(message: string, request: Api.AnyRequest, code?: number) {\n        super(message, request, code);\n        this.code = code || 303;\n        this.errorMessage = message || 'ERROR_SEE_OTHER';\n    }\n}\n\n/**\n * The query contains errors. In the event that a request was created\n * using a form and contains user generated data, the user should be\n * notified that the data must be corrected before the query is repeated.\n */\nexport class BadRequestError extends RPCError {\n    code = 400;\n\n    errorMessage = 'BAD_REQUEST';\n}\n\n/**\n * There was an unauthorized attempt to use functionality available only\n * to authorized users.\n */\nexport class UnauthorizedError extends RPCError {\n    code = 401;\n\n    errorMessage = 'UNAUTHORIZED';\n}\n\n/**\n * Privacy violation. For example, an attempt to write a message to\n * someone who has blacklisted the current user.\n */\nexport class ForbiddenError extends RPCError {\n    code = 403;\n\n    errorMessage = 'FORBIDDEN';\n}\n\n/**\n * An attempt to invoke a non-existent object, such as a method.\n */\nexport class NotFoundError extends RPCError {\n    code = 404;\n\n    errorMessage = 'NOT_FOUND';\n}\n\n/**\n * Errors related to invalid authorization key, like\n * AUTH_KEY_DUPLICATED which can cause the connection to fail.\n */\nexport class AuthKeyError extends RPCError {\n    code = 406;\n\n    errorMessage = 'AUTH_KEY';\n}\n\n/**\n * The maximum allowed number of attempts to invoke the given method\n * with the given input parameters has been exceeded. For example, in an\n * attempt to request a large number of text messages (SMS) for the same\n * phone number.\n */\nexport class FloodError extends RPCError {\n    code = 420;\n\n    errorMessage = 'FLOOD';\n}\n\n/**\n * An internal server error occurred while a request was being processed\n * for example, there was a disruption while accessing a database or file\n * storage\n */\nexport class ServerError extends RPCError {\n    code = 500; // Also witnessed as -500\n\n    errorMessage = 'INTERNAL';\n}\n\n/**\n * Clicking the inline buttons of bots that never (or take to long to)\n * call ``answerCallbackQuery`` will result in this \"special\" RPCError.\n */\nexport class TimedOutError extends RPCError {\n    code = 503; // Only witnessed as -503\n\n    errorMessage = 'Timeout';\n}\n","/* eslint-disable max-len */\nimport {\n    BadRequestError, FloodError, InvalidDCError, RPCError, TimedOutError,\n} from './RPCBaseErrors';\n\nexport class UserMigrateError extends InvalidDCError {\n    public newDc: number;\n\n    constructor(args: any) {\n        const newDc = Number(args.capture || 0);\n        super(`The user whose identity is being used to execute queries is associated with DC ${newDc}${RPCError._fmtRequest(args.request)}`, args.request);\n        this.message = `The user whose identity is being used to execute queries is associated with DC ${newDc}${RPCError._fmtRequest(args.request)}`;\n        this.newDc = newDc;\n    }\n}\n\nexport class PhoneMigrateError extends InvalidDCError {\n    public newDc: number;\n\n    constructor(args: any) {\n        const newDc = Number(args.capture || 0);\n        super(`The phone number a user is trying to use for authorization is associated with DC ${newDc}${RPCError._fmtRequest(args.request)}`, args.request);\n        this.message = `The phone number a user is trying to use for authorization is associated with DC ${newDc}${RPCError._fmtRequest(args.request)}`;\n        this.newDc = newDc;\n    }\n}\n\nexport class SlowModeWaitError extends FloodError {\n    public seconds: number;\n\n    constructor(args: any) {\n        const seconds = Number(args.capture || 0);\n        super(\n            `A wait of ${seconds} seconds is required before sending another message in this chat ${RPCError._fmtRequest(args.request)}`,\n            args.request,\n        );\n        this.message = `A wait of ${seconds} seconds is required before sending another message in this chat${RPCError._fmtRequest(args.request)}`;\n        this.seconds = seconds;\n    }\n}\n\nexport class FloodWaitError extends FloodError {\n    public seconds: number;\n\n    constructor(args: any) {\n        const seconds = Number(args.capture || 0);\n        super(\n            `A wait of ${seconds} seconds is required${RPCError._fmtRequest(args.request)}`,\n            args.request,\n        );\n        this.message = `A wait of ${seconds} seconds is required${RPCError._fmtRequest(args.request)}`;\n        this.seconds = seconds;\n    }\n}\n\nexport class FloodPremiumWaitError extends FloodWaitError {\n    constructor(args: any) {\n        const seconds = Number(args.capture || 0);\n        super(`A wait of ${seconds} seconds is required${RPCError._fmtRequest(args.request)}`);\n        this.message = `A wait of ${seconds} seconds is required${RPCError._fmtRequest(args.request)}`;\n        this.seconds = seconds;\n    }\n}\n\nexport class MsgWaitError extends FloodError {\n    constructor(args: any) {\n        super(\n            `Message failed to be sent.${RPCError._fmtRequest(args.request)}`,\n            args.request,\n        );\n        this.message = `Message failed to be sent.${RPCError._fmtRequest(\n            args.request,\n        )}`;\n    }\n}\n\nexport class FloodTestPhoneWaitError extends FloodError {\n    public seconds: number;\n\n    constructor(args: any) {\n        const seconds = Number(args.capture || 0);\n        super(\n            `A wait of ${seconds} seconds is required in the test servers${RPCError._fmtRequest(args.request)}`,\n            args.request,\n        );\n        this.message = `A wait of ${seconds} seconds is required in the test servers${RPCError._fmtRequest(args.request)}`;\n        this.seconds = seconds;\n    }\n}\n\nexport class FileMigrateError extends InvalidDCError {\n    public newDc: number;\n\n    constructor(args: any) {\n        const newDc = Number(args.capture || 0);\n        super(\n            `The file to be accessed is currently stored in DC ${newDc}${RPCError._fmtRequest(args.request)}`,\n            args.request,\n        );\n        this.message = `The file to be accessed is currently stored in DC ${newDc}${RPCError._fmtRequest(args.request)}`;\n        this.newDc = newDc;\n    }\n}\n\nexport class NetworkMigrateError extends InvalidDCError {\n    public newDc: number;\n\n    constructor(args: any) {\n        const newDc = Number(args.capture || 0);\n        super(\n            `The source IP address is associated with DC ${newDc}${RPCError._fmtRequest(args.request)}`,\n            args.request,\n        );\n        this.message = `The source IP address is associated with DC ${newDc}${RPCError._fmtRequest(args.request)}`;\n        this.newDc = newDc;\n    }\n}\n\nexport class EmailUnconfirmedError extends BadRequestError {\n    codeLength: number;\n\n    constructor(args: any) {\n        const codeLength = Number(args.capture || 0);\n        super(\n            `Email unconfirmed, the length of the code must be ${codeLength}${RPCError._fmtRequest(\n                args.request,\n            )}`,\n            args.request,\n            400,\n        );\n        // eslint-disable-next-line max-len\n        this.message = `Email unconfirmed, the length of the code must be ${codeLength}${RPCError._fmtRequest(\n            args.request,\n        )}`;\n        this.codeLength = codeLength;\n    }\n}\n\nexport class PasswordFreshError extends BadRequestError {\n    public seconds: number;\n\n    constructor(args: any) {\n        const seconds = Number(args.capture || 0);\n        super(`The password was modified less than 24 hours ago, try again in ${seconds} seconds.`, args.request);\n        // eslint-disable-next-line max-len\n        this.message = `The password was modified less than 24 hours ago, try again in ${seconds} seconds.`;\n        this.seconds = seconds;\n    }\n}\n\nexport const rpcErrorRe = new Map<RegExp, any>([\n    [/FILE_MIGRATE_(\\d+)/, FileMigrateError],\n    [/FLOOD_TEST_PHONE_WAIT_(\\d+)/, FloodTestPhoneWaitError],\n    [/FLOOD_WAIT_(\\d+)/, FloodWaitError],\n    [/FLOOD_PREMIUM_WAIT_(\\d+)/, FloodPremiumWaitError],\n    [/MSG_WAIT_(.*)/, MsgWaitError],\n    [/PHONE_MIGRATE_(\\d+)/, PhoneMigrateError],\n    [/SLOWMODE_WAIT_(\\d+)/, SlowModeWaitError],\n    [/USER_MIGRATE_(\\d+)/, UserMigrateError],\n    [/NETWORK_MIGRATE_(\\d+)/, NetworkMigrateError],\n    [/EMAIL_UNCONFIRMED_(\\d+)/, EmailUnconfirmedError],\n    [/PASSWORD_TOO_FRESH_(\\d+)/, PasswordFreshError],\n    [/^Timeout$/, TimedOutError],\n]);\n","/**\n * Errors not related to the Telegram API itself\n */\n\nimport type { Api } from '../tl';\n\n/**\n * Occurs when a read operation was cancelled.\n */\nexport class ReadCancelledError extends Error {\n    constructor() {\n        super('The read operation was cancelled.');\n    }\n}\n\n/**\n * Occurs when a type is not found, for example,\n * when trying to read a TLObject with an invalid constructor code.\n */\nexport class TypeNotFoundError extends Error {\n    invalidConstructorId: number;\n\n    remaining: Buffer;\n\n    constructor(invalidConstructorId: number, remaining: Buffer) {\n        super(`Could not find a matching Constructor ID for the TLObject that was supposed to be\n        read with ID ${invalidConstructorId}. Most likely, a TLObject was trying to be read when\n         it should not be read. Remaining bytes: ${remaining.length}`);\n        if (typeof alert !== 'undefined') {\n            // eslint-disable-next-line no-alert\n            alert(`Missing MTProto Entity: Please, make sure to add TL definition for ID ${invalidConstructorId}`);\n        }\n        this.invalidConstructorId = invalidConstructorId;\n        this.remaining = remaining;\n    }\n}\n\n/**\n * Occurs when using the TCP full mode and the checksum of a received\n * packet doesn't match the expected checksum.\n */\nexport class InvalidChecksumError extends Error {\n    checksum: number;\n\n    validChecksum: number;\n\n    constructor(checksum: number, validChecksum: number) {\n        super(`Invalid checksum (${checksum} when ${validChecksum} was expected). This packet should be skipped.`);\n        this.checksum = checksum;\n        this.validChecksum = validChecksum;\n    }\n}\n\n/**\n * Occurs when the buffer is invalid, and may contain an HTTP error code.\n * For instance, 404 means \"forgotten/broken authorization key\", while\n */\nexport class InvalidBufferError extends Error {\n    code?: number;\n\n    payload: Buffer;\n\n    constructor(payload: Buffer) {\n        let code;\n        if (payload.length === 4) {\n            code = -payload.readInt32LE(0);\n            super(`Invalid response buffer (HTTP code ${code})`);\n        } else {\n            super(`Invalid response buffer (too short ${payload})`);\n        }\n        this.code = code;\n        this.payload = payload;\n    }\n}\n\n/**\n * Generic security error, mostly used when generating a new AuthKey.\n */\nexport class SecurityError extends Error {\n    constructor(...args: any[]) {\n        if (!args.length) {\n            args = ['A security check failed.'];\n        }\n        super(...args);\n    }\n}\n\n/**\n * Occurs when there's a hash mismatch between the decrypted CDN file\n * and its expected hash.\n */\nexport class CdnFileTamperedError extends SecurityError {\n    constructor() {\n        super('The CDN file has been altered and its download cancelled.');\n    }\n}\n\n/**\n * Occurs when handling a badMessageNotification\n */\nexport class BadMessageError extends Error {\n    static ErrorMessages: Record<number, string> = {\n        16:\n            'msg_id too low (most likely, client time is wrong it would be worthwhile to '\n            + 'synchronize it using msg_id notifications and re-send the original message '\n            + 'with the “correct” msg_id or wrap it in a container with a new msg_id if the '\n            + 'original message had waited too long on the client to be transmitted).',\n\n        17:\n            'msg_id too high (similar to the previous case, the client time has to be '\n            + 'synchronized, and the message re-sent with the correct msg_id).',\n\n        18:\n            'Incorrect two lower order msg_id bits (the server expects client message msg_id '\n            + 'to be divisible by 4).',\n\n        19: 'Container msg_id is the same as msg_id of a previously received message (this must never happen).',\n\n        20:\n            'Message too old, and it cannot be verified whether the server has received a '\n            + 'message with this msg_id or not.',\n\n        32:\n            'msg_seqno too low (the server has already received a message with a lower '\n            + 'msg_id but with either a higher or an equal and odd seqno).',\n\n        33:\n            'msg_seqno too high (similarly, there is a message with a higher msg_id but with '\n            + 'either a lower or an equal and odd seqno).',\n\n        34: 'An even msg_seqno expected (irrelevant message), but odd received.',\n\n        35: 'Odd msg_seqno expected (relevant message), but even received.',\n\n        48:\n            'Incorrect server salt (in this case, the bad_server_salt response is received with '\n            + 'the correct salt, and the message is to be re-sent with it).',\n\n        64: 'Invalid container.',\n    };\n\n    code: number;\n\n    errorMessage: string;\n\n    constructor(request: Api.AnyRequest, code: number) {\n        let errorMessage = BadMessageError.ErrorMessages[code]\n            || `Unknown error code (this should not happen): ${code}.`;\n        errorMessage += `  Caused by ${request.className}`;\n        super(errorMessage);\n        this.errorMessage = errorMessage;\n        this.code = code;\n    }\n}\n\n// TODO : Support multi errors.\n","export default class AsyncQueue<T extends unknown> {\n    private _queue: T[];\n\n    private canGet: Promise<boolean>;\n\n    private resolveGet: (value: boolean) => void;\n\n    private canPush: Promise<boolean> | boolean;\n\n    private resolvePush: (value: boolean) => void;\n\n    constructor() {\n        this._queue = [];\n        this.resolvePush = () => {};\n        this.resolveGet = () => {};\n        this.canGet = new Promise((resolve) => {\n            this.resolveGet = resolve;\n        });\n        this.canPush = true;\n    }\n\n    async push(value: T) {\n        await this.canPush;\n        this._queue.push(value);\n        this.resolveGet(true);\n        this.canPush = new Promise((resolve) => {\n            this.resolvePush = resolve;\n        });\n    }\n\n    async pop() {\n        await this.canGet;\n        const returned = this._queue.pop();\n        this.resolvePush(true);\n        this.canGet = new Promise((resolve) => {\n            this.resolveGet = resolve;\n        });\n        return returned;\n    }\n}\n","import type { BinaryReader } from '../../extensions';\n\nimport TLMessage from './TLMessage';\n\nexport default class MessageContainer {\n    static CONSTRUCTOR_ID = 0x73f1f8dc;\n\n    static classType = 'constructor';\n\n    // Maximum size in bytes for the inner payload of the container.\n    // Telegram will close the connection if the payload is bigger.\n    // The overhead of the container itself is subtracted.\n    static MAXIMUM_SIZE = 1044456 - 8;\n\n    // Maximum amount of messages that can't be sent inside a single\n    // container, inclusive. Beyond this limit Telegram will respond\n    // with BAD_MESSAGE 64 (invalid container).\n    //\n    // This limit is not 100% accurate and may in some cases be higher.\n    // However, sending up to 100 requests at once in a single container\n    // is a reasonable conservative value, since it could also depend on\n    // other factors like size per request, but we cannot know this.\n    static MAXIMUM_LENGTH = 100;\n\n    private CONSTRUCTOR_ID: number;\n\n    private messages: any[];\n\n    private classType: string;\n\n    constructor(messages: any[]) {\n        this.CONSTRUCTOR_ID = 0x73f1f8dc;\n        this.messages = messages;\n        this.classType = 'constructor';\n    }\n\n    static fromReader(reader: BinaryReader) {\n        const messages = [];\n        const totalLength = reader.readInt();\n        for (let x = 0; x < totalLength; x++) {\n            const msgId = reader.readLong();\n            const seqNo = reader.readInt();\n            const length = reader.readInt();\n            const before = reader.tellPosition();\n            const obj = reader.tgReadObject();\n            reader.setPosition(before + length);\n            const tlMessage = new TLMessage(msgId, seqNo, obj);\n            messages.push(tlMessage);\n        }\n        return new MessageContainer(messages);\n    }\n}\n","import GZIPPacked from './GZIPPacked';\nimport MessageContainer from './MessageContainer';\nimport RPCResult from './RPCResult';\nimport TLMessage from './TLMessage';\n\nexport const coreObjects = new Map<number, Function>([\n    [RPCResult.CONSTRUCTOR_ID, RPCResult],\n    [GZIPPacked.CONSTRUCTOR_ID, GZIPPacked],\n    [MessageContainer.CONSTRUCTOR_ID, MessageContainer],\n]);\nexport {\n    RPCResult,\n    TLMessage,\n    MessageContainer,\n    GZIPPacked,\n};\n","import { Api } from '.';\n\nconst tlobjects: Record<number, any> = {};\n\nfor (const tl of Object.values(Api)) {\n    if ('CONSTRUCTOR_ID' in tl) {\n        tlobjects[tl.CONSTRUCTOR_ID] = tl;\n    } else {\n        for (const sub of Object.values(tl)) {\n            tlobjects[sub.CONSTRUCTOR_ID] = sub;\n        }\n    }\n}\n\nexport const LAYER = 198;\nexport { tlobjects };\n","import { TypeNotFoundError } from '../errors';\nimport { coreObjects } from '../tl/core';\n\nimport { readBigIntFromBuffer } from '../Helpers';\nimport { tlobjects } from '../tl/AllTLObjects';\n\nexport default class BinaryReader {\n    private readonly stream: Buffer;\n\n    private _last?: Buffer;\n\n    offset: number;\n\n    /**\n     * Small utility class to read binary data.\n     * @param data {Buffer}\n     */\n    constructor(data: Buffer) {\n        this.stream = data;\n        this._last = undefined;\n        this.offset = 0;\n    }\n\n    // region Reading\n\n    // \"All numbers are written as little endian.\"\n    // https://core.telegram.org/mtproto\n    /**\n     * Reads a single byte value.\n     */\n    readByte() {\n        return this.read(1)[0];\n    }\n\n    /**\n     * Reads an integer (4 bytes or 32 bits) value.\n     * @param signed {Boolean}\n     */\n    readInt(signed = true) {\n        let res;\n        if (signed) {\n            res = this.stream.readInt32LE(this.offset);\n        } else {\n            res = this.stream.readUInt32LE(this.offset);\n        }\n        this.offset += 4;\n        return res;\n    }\n\n    /**\n     * Reads a long integer (8 bytes or 64 bits) value.\n     * @param signed\n     * @returns {BigInteger}\n     */\n    readLong(signed = true) {\n        return this.readLargeInt(64, signed);\n    }\n\n    /**\n     * Reads a real floating point (4 bytes) value.\n     * @returns {number}\n     */\n    readFloat() {\n        return this.read(4).readFloatLE(0);\n    }\n\n    /**\n     * Reads a real floating point (8 bytes) value.\n     * @returns {BigInteger}\n     */\n    readDouble() {\n        // was this a bug ? it should have been <d\n        return this.read(8).readDoubleLE(0);\n    }\n\n    /**\n     * Reads a n-bits long integer value.\n     * @param bits\n     * @param signed {Boolean}\n     */\n    readLargeInt(bits: number, signed = true) {\n        const buffer = this.read(Math.floor(bits / 8));\n        return readBigIntFromBuffer(buffer, true, signed);\n    }\n\n    /**\n     * Read the given amount of bytes, or -1 to read all remaining.\n     * @param length {number}\n     * @param checkLength {boolean} whether to check if the length overflows or not.\n     */\n    read(length = -1) {\n        if (length === -1) {\n            length = this.stream.length - this.offset;\n        }\n        const result = this.stream.slice(this.offset, this.offset + length);\n        this.offset += length;\n        if (result.length !== length) {\n            throw Error(\n                `No more data left to read (need ${length}, got ${result.length}: ${result}); last read ${this._last}`,\n            );\n        }\n        this._last = result;\n        return result;\n    }\n\n    /**\n     * Gets the byte array representing the current buffer as a whole.\n     * @returns {Buffer}\n     */\n    getBuffer() {\n        return this.stream;\n    }\n\n    // endregion\n\n    // region Telegram custom reading\n    /**\n     * Reads a Telegram-encoded byte array, without the need of\n     * specifying its length.\n     * @returns {Buffer}\n     */\n    tgReadBytes() {\n        const firstByte = this.readByte();\n        let padding;\n        let length;\n        if (firstByte === 254) {\n            length = this.readByte() | (this.readByte() << 8) | (this.readByte() << 16);\n            padding = length % 4;\n        } else {\n            length = firstByte;\n            padding = (length + 1) % 4;\n        }\n        const data = this.read(length);\n\n        if (padding > 0) {\n            padding = 4 - padding;\n            this.read(padding);\n        }\n\n        return data;\n    }\n\n    /**\n     * Reads a Telegram-encoded string.\n     * @returns {string}\n     */\n    tgReadString() {\n        return this.tgReadBytes().toString('utf-8');\n    }\n\n    /**\n     * Reads a Telegram boolean value.\n     * @returns {boolean}\n     */\n    tgReadBool() {\n        const value = this.readInt(false);\n        if (value === 0x997275b5) {\n            // boolTrue\n            return true;\n        } else if (value === 0xbc799737) {\n            // boolFalse\n            return false;\n        } else {\n            throw new Error(`Invalid boolean code ${value.toString(16)}`);\n        }\n    }\n\n    /**\n     * Reads and converts Unix time (used by Telegram)\n     * into a Javascript {Date} object.\n     * @returns {Date}\n     */\n    tgReadDate() {\n        const value = this.readInt();\n        return new Date(value * 1000);\n    }\n\n    /**\n     * Reads a Telegram object.\n     */\n    tgReadObject(): any {\n        const constructorId = this.readInt(false);\n\n        let clazz = tlobjects[constructorId];\n        if (clazz === undefined) {\n            /**\n             * The class was undefined, but there's still a\n             * chance of it being a manually parsed value like bool!\n             */\n            const value = constructorId;\n            if (value === 0x997275b5) {\n                // boolTrue\n                return true;\n            } else if (value === 0xbc799737) {\n                // boolFalse\n                return false;\n            } else if (value === 0x1cb5c415) {\n                // Vector\n                const temp = [];\n                const length = this.readInt();\n                for (let i = 0; i < length; i++) {\n                    temp.push(this.tgReadObject());\n                }\n                return temp;\n            }\n\n            clazz = coreObjects.get(constructorId);\n\n            if (clazz === undefined) {\n                // If there was still no luck, give up\n                this.seek(-4); // Go back\n                const pos = this.tellPosition();\n                const error = new TypeNotFoundError(constructorId, this.read());\n                this.setPosition(pos);\n                throw error;\n            }\n        }\n        return clazz.fromReader(this);\n    }\n\n    /**\n     * Reads a vector (a list) of Telegram objects.\n     * @returns {[Buffer]}\n     */\n    tgReadVector() {\n        if (this.readInt(false) !== 0x1cb5c415) {\n            throw new Error('Invalid constructor code, vector was expected');\n        }\n        const count = this.readInt();\n        const temp = [];\n        for (let i = 0; i < count; i++) {\n            temp.push(this.tgReadObject());\n        }\n        return temp;\n    }\n\n    // endregion\n\n    // region Position related\n\n    /**\n     * Tells the current position on the stream.\n     * @returns {number}\n     */\n    tellPosition() {\n        return this.offset;\n    }\n\n    /**\n     * Sets the current position on the stream.\n     * @param position\n     */\n    setPosition(position: number) {\n        this.offset = position;\n    }\n\n    /**\n     * Seeks the stream position given an offset from the current position.\n     * The offset may be negative.\n     * @param offset\n     */\n    seek(offset: number) {\n        this.offset += offset;\n    }\n\n    // endregion\n}\n","export default class BinaryWriter {\n    private readonly _buffers: Buffer[];\n\n    constructor(stream: Buffer) {\n        this._buffers = [stream];\n    }\n\n    write(buffer: Buffer) {\n        this._buffers.push(buffer);\n    }\n\n    getValue(): Buffer {\n        return Buffer.concat(this._buffers);\n    }\n}\n","const closeError = new Error('HttpStream was closed');\nconst REQUEST_TIMEOUT = 10000;\n\nAbortSignal.timeout ??= function timeout(ms) {\n    const ctrl = new AbortController();\n    setTimeout(() => ctrl.abort(), ms);\n    return ctrl.signal;\n};\n\nexport default class HttpStream {\n    private url: string | undefined;\n\n    private isClosed: boolean;\n\n    private stream: Buffer[] = [];\n\n    private canRead: Promise<void> = Promise.resolve();\n\n    private resolveRead: VoidFunction | undefined;\n\n    private rejectRead: VoidFunction | undefined;\n\n    private disconnectedCallback: VoidFunction | undefined;\n\n    constructor(disconnectedCallback: VoidFunction) {\n        this.isClosed = true;\n        this.disconnectedCallback = disconnectedCallback;\n    }\n\n    async readExactly(number: number) {\n        let readData = Buffer.alloc(0);\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const thisTime = await this.read();\n            readData = Buffer.concat([readData, thisTime]);\n            number -= thisTime.length;\n            if (number <= 0) {\n                return readData;\n            }\n        }\n    }\n\n    async read() {\n        await this.canRead;\n\n        const data = this.stream.shift()!;\n        if (this.stream.length === 0) {\n            this.canRead = new Promise((resolve, reject) => {\n                this.resolveRead = resolve;\n                this.rejectRead = reject;\n            });\n        }\n\n        return data;\n    }\n\n    static getURL(ip: string, port: number, isTestServer?: boolean, isPremium?: boolean) {\n        if (port === 443) {\n            return `https://${ip}:${port}/apiw1${isTestServer ? '_test' : ''}${isPremium ? '_premium' : ''}`;\n        } else {\n            return `http://${ip}:${port}/apiw1${isTestServer ? '_test' : ''}${isPremium ? '_premium' : ''}`;\n        }\n    }\n\n    async connect(port: number, ip: string, isTestServer = false, isPremium = false) {\n        this.stream = [];\n        this.canRead = new Promise((resolve, reject) => {\n            this.resolveRead = resolve;\n            this.rejectRead = reject;\n        });\n        this.url = HttpStream.getURL(ip, port, isTestServer, isPremium);\n\n        await fetch(this.url, {\n            method: 'POST',\n            body: Buffer.from([]),\n            mode: 'cors',\n            signal: AbortSignal.timeout(REQUEST_TIMEOUT),\n        });\n\n        this.isClosed = false;\n    }\n\n    write(data: Buffer) {\n        if (this.isClosed || !this.url) {\n            this.handleDisconnect();\n            throw closeError;\n        }\n\n        return fetch(this.url, {\n            method: 'POST',\n            body: data,\n            mode: 'cors',\n            signal: AbortSignal.timeout(REQUEST_TIMEOUT),\n        }).then(async (response) => {\n            if (this.isClosed) {\n                this.handleDisconnect();\n                return;\n            }\n            if (response.status !== 200) {\n                throw closeError;\n            }\n\n            const arrayBuffer = await response.arrayBuffer();\n\n            this.stream = this.stream.concat(Buffer.from(arrayBuffer));\n            if (this.resolveRead && !this.isClosed) this.resolveRead();\n        }).catch((err) => {\n            this.handleDisconnect();\n            throw err;\n        });\n    }\n\n    handleDisconnect() {\n        this.disconnectedCallback?.();\n        if (this.rejectRead) this.rejectRead();\n    }\n\n    close() {\n        this.isClosed = true;\n        this.handleDisconnect();\n        this.disconnectedCallback = undefined;\n    }\n}\n","export type LoggerLevel = 'error' | 'warn' | 'info' | 'debug';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet _level: LoggerLevel;\n\ntype ColorKey = LoggerLevel | 'start' | 'end';\n\nexport default class Logger {\n    static LEVEL_MAP = new Map<LoggerLevel, Set<LoggerLevel>>([\n        ['error', new Set(['error'])],\n        ['warn', new Set(['error', 'warn'])],\n        ['info', new Set(['error', 'warn', 'info'])],\n        ['debug', new Set(['error', 'warn', 'info', 'debug'])],\n    ]);\n\n    colors: Record<ColorKey, string>;\n\n    messageFormat: string;\n\n    constructor(level?: LoggerLevel) {\n        if (!_level) {\n            _level = level || 'debug';\n        }\n\n        this.colors = {\n            start: '%c',\n            warn: 'color : #ff00ff',\n            info: 'color : #ffff00',\n            debug: 'color : #00ffff',\n            error: 'color : #ff0000',\n            end: '',\n        };\n        this.messageFormat = '[%t] [%l] - [%m]';\n    }\n\n    static setLevel(level: LoggerLevel) {\n        _level = level;\n    }\n\n    canSend(level: LoggerLevel) {\n        if (!_level) return false;\n        return Logger.LEVEL_MAP.get(_level)!.has(level);\n    }\n\n    warn(message: string) {\n        this._log('warn', message, this.colors.warn);\n    }\n\n    info(message: string) {\n        this._log('info', message, this.colors.info);\n    }\n\n    debug(message: string) {\n        this._log('debug', message, this.colors.debug);\n    }\n\n    error(message: string) {\n        this._log('error', message, this.colors.error);\n    }\n\n    format(message: string, level: LoggerLevel) {\n        return this.messageFormat.replace('%t', new Date().toISOString())\n            .replace('%l', level.toUpperCase())\n            .replace('%m', message);\n    }\n\n    _log(level: LoggerLevel, message: string, color: string) {\n        if (!_level) {\n            return;\n        }\n        if (this.canSend(level)) {\n            // eslint-disable-next-line no-console\n            console.log(this.colors.start + this.format(message, level), color);\n        }\n    }\n}\n","import type MTProtoState from '../network/MTProtoState';\nimport type RequestState from '../network/RequestState';\nimport type Logger from './Logger';\n\nimport TLMessage from '../tl/core/TLMessage';\n\nimport MessageContainer from '../tl/core/MessageContainer';\nimport BinaryWriter from './BinaryWriter';\n\nconst USE_INVOKE_AFTER_WITH = new Set([\n    'messages.SendMessage', 'messages.SendMedia', 'messages.SendMultiMedia',\n    'messages.ForwardMessages', 'messages.SendInlineBotResult',\n]);\n\nexport default class MessagePacker {\n    private _state: MTProtoState;\n\n    public _pendingStates: RequestState[];\n\n    private _queue: (RequestState | undefined)[];\n\n    private _ready: Promise<unknown>;\n\n    setReady: ((value?: any) => void) | undefined;\n\n    private _log: Logger;\n\n    constructor(state: MTProtoState, logger: Logger) {\n        this._state = state;\n        this._queue = [];\n        this._pendingStates = [];\n        this._ready = new Promise(((resolve) => {\n            this.setReady = resolve;\n        }));\n        this._log = logger;\n    }\n\n    values() {\n        return this._queue;\n    }\n\n    clear() {\n        this._queue = [];\n        this.append(undefined);\n    }\n\n    append(state?: RequestState, setReady = true, atStart = false) {\n        // We need to check if there is already a `USE_INVOKE_AFTER_WITH` request\n        if (state && USE_INVOKE_AFTER_WITH.has(state.request.className)) {\n            if (atStart) {\n                // Assign `after` for the previously first `USE_INVOKE_AFTER_WITH` request\n                for (let i = 0; i < this._queue.length; i++) {\n                    if (USE_INVOKE_AFTER_WITH.has(this._queue[i]?.request.className)) {\n                        this._queue[i]!.after = state;\n                        break;\n                    }\n                }\n            } else {\n                // Assign after for the previous `USE_INVOKE_AFTER_WITH` request\n                for (let i = this._queue.length - 1; i >= 0; i--) {\n                    if (USE_INVOKE_AFTER_WITH.has(this._queue[i]?.request.className)) {\n                        state.after = this._queue[i];\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (atStart) {\n            this._queue.unshift(state);\n        } else {\n            this._queue.push(state);\n        }\n\n        if (setReady) {\n            this.setReady?.(true);\n        }\n\n        // 1658238041=MsgsAck, we don't care about MsgsAck here because they never resolve anyway.\n        if (state && state.request.CONSTRUCTOR_ID !== 1658238041) {\n            this._pendingStates.push(state);\n            state.promise\n                // Using finally causes triggering `unhandledrejection` event\n                ?.catch(() => {\n                })\n                .finally(() => {\n                    this._pendingStates = this._pendingStates.filter((s) => s !== state);\n                });\n        }\n    }\n\n    prepend(states: RequestState[]) {\n        states.reverse().forEach((state) => {\n            this.append(state, false, true);\n        });\n\n        this.setReady?.(true);\n    }\n\n    extend(states: RequestState[]) {\n        states.forEach((state) => {\n            this.append(state, false);\n        });\n        this.setReady?.(true);\n    }\n\n    async getBeacon(state: RequestState) {\n        const buffer = new BinaryWriter(Buffer.alloc(0));\n        const size = state.data.length + TLMessage.SIZE_OVERHEAD;\n        if (size <= MessageContainer.MAXIMUM_SIZE) {\n            let afterId;\n            if (state.after) {\n                afterId = state.after.msgId;\n            }\n            state.msgId = await this._state.writeDataAsMessage(\n                buffer, state.data, state.request.classType === 'request', afterId,\n            );\n            this._log.debug(`Assigned msgId = ${state.msgId} to ${state.request.className\n            || state.request.constructor.name}`);\n\n            return buffer.getValue();\n        }\n        this._log.warn(`Message payload for ${state.request.className\n        || state.request.constructor.name} is too long ${state.data.length} and cannot be sent`);\n        state.reject?.(new Error('Request Payload is too big'));\n\n        return undefined;\n    }\n\n    async wait() {\n        if (!this._queue.length) {\n            this._ready = new Promise(((resolve) => {\n                this.setReady = resolve;\n            }));\n            await this._ready;\n        }\n    }\n\n    async get() {\n        if (!this._queue[this._queue.length - 1]) {\n            this._queue = this._queue.filter(Boolean);\n            return undefined;\n        }\n        let data;\n        let buffer = new BinaryWriter(Buffer.alloc(0));\n\n        const batch = [];\n        let size = 0;\n\n        while (this._queue.length && batch.length <= MessageContainer.MAXIMUM_LENGTH) {\n            const state = this._queue.shift();\n            if (!state) {\n                continue;\n            }\n\n            if (state.abortSignal?.aborted) {\n                state.reject?.(new Error('Request aborted'));\n                continue;\n            }\n\n            size += state.data.length + TLMessage.SIZE_OVERHEAD;\n            if (size <= MessageContainer.MAXIMUM_SIZE) {\n                let afterId;\n                if (state.after) {\n                    afterId = state.after.msgId;\n                }\n                state.msgId = await this._state.writeDataAsMessage(\n                    buffer, state.data, state.request.classType === 'request', afterId,\n                );\n                this._log.debug(`Assigned msgId = ${state.msgId} to ${state.request.className\n                || state.request.constructor.name}`);\n                batch.push(state);\n                continue;\n            }\n\n            if (batch.length) {\n                this._queue.unshift(state);\n                break;\n            }\n\n            this._log.warn(`Message payload for ${state.request.className\n            || state.request.constructor.name} is too long ${state.data.length} and cannot be sent`);\n            state.reject?.(new Error('Request Payload is too big'));\n            size = 0;\n        }\n        if (!batch.length) {\n            return undefined;\n        }\n        if (batch.length > 1) {\n            const b = Buffer.alloc(8);\n            b.writeUInt32LE(MessageContainer.CONSTRUCTOR_ID, 0);\n            b.writeInt32LE(batch.length, 4);\n            data = Buffer.concat([b, buffer.getValue()]);\n            buffer = new BinaryWriter(Buffer.alloc(0));\n            const containerId = await this._state.writeDataAsMessage(\n                buffer, data, false,\n            );\n            for (const s of batch) {\n                s.containerId = containerId;\n            }\n        }\n\n        data = buffer.getValue();\n        return {\n            batch,\n            data,\n        };\n    }\n}\n","import { Mutex } from \"async-mutex\";\n\nconst mutex = new Mutex();\n\nconst closeError = new Error('WebSocket was closed');\nconst CONNECTION_TIMEOUT = 3000;\nconst MAX_TIMEOUT = 30000;\n\nexport default class PromisedWebSockets {\n    private closed: boolean;\n\n    private timeout: number;\n\n    private stream: Buffer;\n\n    private canRead?: boolean | Promise<boolean>;\n\n    private resolveRead: ((value?: any) => void) | undefined;\n\n    private client: WebSocket | undefined;\n\n    private website?: string;\n\n    private disconnectedCallback: () => void;\n\n    constructor(disconnectedCallback: () => void) {\n        this.client = undefined;\n        this.closed = true;\n        this.stream = Buffer.alloc(0);\n        this.disconnectedCallback = disconnectedCallback;\n        this.timeout = CONNECTION_TIMEOUT;\n    }\n\n    async readExactly(number: number) {\n        let readData = Buffer.alloc(0);\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const thisTime = await this.read(number);\n            readData = Buffer.concat([readData, thisTime]);\n            number -= thisTime.length;\n            if (!number) {\n                return readData;\n            }\n        }\n    }\n\n    async read(number: number) {\n        if (this.closed) {\n            throw closeError;\n        }\n        await this.canRead;\n        if (this.closed) {\n            throw closeError;\n        }\n        const toReturn = this.stream.slice(0, number);\n        this.stream = this.stream.slice(number);\n        if (this.stream.length === 0) {\n            this.canRead = new Promise((resolve) => {\n                this.resolveRead = resolve;\n            });\n        }\n\n        return toReturn;\n    }\n\n    async readAll() {\n        if (this.closed || !await this.canRead) {\n            throw closeError;\n        }\n        const toReturn = this.stream;\n        this.stream = Buffer.alloc(0);\n        this.canRead = new Promise((resolve) => {\n            this.resolveRead = resolve;\n        });\n\n        return toReturn;\n    }\n\n    getWebSocketLink(ip: string, port: number, isTestServer?: boolean, isPremium?: boolean) {\n        if (port === 443) {\n            return `wss://${ip}:${port}/apiws${isTestServer ? '_test' : ''}${isPremium ? '_premium' : ''}`;\n        } else {\n            return `ws://${ip}:${port}/apiws${isTestServer ? '_test' : ''}${isPremium ? '_premium' : ''}`;\n        }\n    }\n\n    connect(port: number, ip: string, isTestServer = false, isPremium = false) {\n        this.stream = Buffer.alloc(0);\n        this.canRead = new Promise((resolve) => {\n            this.resolveRead = resolve;\n        });\n        this.closed = false;\n        this.website = this.getWebSocketLink(ip, port, isTestServer, isPremium);\n        this.client = new WebSocket(this.website, 'binary');\n        return new Promise((resolve, reject) => {\n            if (!this.client) return;\n            let hasResolved = false;\n            let timeout: ReturnType<typeof globalThis.setTimeout> | undefined;\n            this.client.onopen = () => {\n                this.receive();\n                resolve(this);\n                hasResolved = true;\n                if (timeout) clearTimeout(timeout);\n            };\n            this.client.onerror = (error) => {\n                // eslint-disable-next-line no-console\n                console.error('WebSocket error', error);\n                reject(error);\n                hasResolved = true;\n                if (timeout) clearTimeout(timeout);\n            };\n            this.client.onclose = (event) => {\n                const { code, reason, wasClean } = event;\n                if (code !== 1000) {\n                    // eslint-disable-next-line no-console\n                    console.error(`Socket ${ip} closed. Code: ${code}, reason: ${reason}, was clean: ${wasClean}`);\n                }\n\n                this.resolveRead?.(false);\n                this.closed = true;\n                if (this.disconnectedCallback) {\n                    this.disconnectedCallback();\n                }\n                hasResolved = true;\n                if (timeout) clearTimeout(timeout);\n            };\n\n            timeout = setTimeout(() => {\n                if (hasResolved) return;\n\n                reject(new Error('WebSocket connection timeout'));\n                this.resolveRead?.(false);\n                this.closed = true;\n                if (this.disconnectedCallback) {\n                    this.disconnectedCallback();\n                }\n                this.client?.close();\n                this.timeout *= 2;\n                this.timeout = Math.min(this.timeout, MAX_TIMEOUT);\n                timeout = undefined;\n            }, this.timeout);\n\n            // CONTEST\n            // Seems to not be working, at least in a web worker\n            // eslint-disable-next-line no-restricted-globals\n            self.addEventListener('offline', async () => {\n                await this.close();\n                this.resolveRead?.(false);\n            });\n        });\n    }\n\n    write(data: Buffer) {\n        if (this.closed) {\n            throw closeError;\n        }\n        this.client?.send(data);\n    }\n\n    async close() {\n        await this.client?.close();\n        this.closed = true;\n    }\n\n    receive() {\n        if (!this.client) return;\n        this.client.onmessage = async (message) => {\n            await mutex.runExclusive(async () => {\n                const data = message.data instanceof ArrayBuffer\n                    ? Buffer.from(message.data)\n                    : Buffer.from(await new Response(message.data).arrayBuffer());\n                this.stream = Buffer.concat([this.stream, data]);\n                this.resolveRead?.(true);\n            });\n        };\n    }\n}\n","import type { Logger } from '../../extensions';\nimport type { AbridgedPacketCodec } from './TCPAbridged';\n\nimport { AsyncQueue, PromisedWebSockets } from '../../extensions';\n\nimport HttpStream from '../../extensions/HttpStream';\n\ninterface ConnectionInterfaceParams {\n    ip: string;\n    port: number;\n    dcId: number;\n    loggers: Logger;\n    isPremium?: boolean;\n    isTestServer?: boolean;\n}\n\n/**\n * The `Connection` class is a wrapper around ``asyncio.open_connection``.\n *\n * Subclasses will implement different transport modes as atomic operations,\n * which this class eases doing since the exposed interface simply puts and\n * gets complete data payloads to and from queues.\n *\n * The only error that will raise from send and receive methods is\n * ``ConnectionError``, which will raise when attempting to send if\n * the client is disconnected (includes remote disconnections).\n */\nexport class Connection {\n    PacketCodecClass?: typeof AbridgedPacketCodec;\n\n    readonly _ip: string;\n\n    readonly _port: number;\n\n    _dcId: number;\n\n    _log: Logger;\n\n    _connected: boolean;\n\n    _isPremium?: boolean;\n\n    shouldLongPoll: boolean;\n\n    private _sendTask?: Promise<void>;\n\n    private _recvTask?: Promise<void>;\n\n    protected _codec: any;\n\n    protected _obfuscation: any;\n\n    _sendArray: AsyncQueue<Buffer>;\n\n    _recvArray: AsyncQueue<Buffer | undefined>;\n\n    socket: PromisedWebSockets | HttpStream;\n\n    public _isTestServer?: boolean;\n\n    constructor({\n        ip, port, dcId, loggers, isPremium, isTestServer,\n    }: ConnectionInterfaceParams) {\n        this._ip = ip;\n        this._port = port;\n        this._dcId = dcId;\n        this._log = loggers;\n        this._isTestServer = isTestServer;\n\n        this._isPremium = isPremium;\n        this._connected = false;\n        this._sendTask = undefined;\n        this._recvTask = undefined;\n        this._codec = undefined;\n        this._obfuscation = undefined; // TcpObfuscated and MTProxy\n        this._sendArray = new AsyncQueue<Buffer>();\n        this._recvArray = new AsyncQueue<Buffer>();\n        // this.socket = new PromiseSocket(new Socket())\n\n        this.shouldLongPoll = false;\n        this.socket = new PromisedWebSockets(this.disconnectCallback.bind(this));\n    }\n\n    isConnected() {\n        return this._connected;\n    }\n\n    async disconnectCallback() {\n        await this.disconnect(true);\n    }\n\n    async _connect() {\n        this._log.debug('Connecting');\n        this._codec = new this.PacketCodecClass!(this);\n        await this.socket.connect(this._port, this._ip, this._isTestServer, this._isPremium);\n        this._log.debug('Finished connecting');\n\n        await this._initConn();\n    }\n\n    async connect() {\n        await this._connect();\n        this._connected = true;\n\n        if (!this._sendTask) {\n            this._sendTask = this._sendLoop();\n        }\n        this._recvTask = this._recvLoop();\n    }\n\n    async disconnect(fromCallback = false) {\n        if (!this._connected) {\n            return;\n        }\n\n        this._connected = false;\n        void this._recvArray.push(undefined);\n        if (!fromCallback) {\n            await this.socket.close();\n        }\n    }\n\n    async send(data: Buffer) {\n        if (!this._connected) {\n            throw new Error('Not connected');\n        }\n        await this._sendArray.push(data);\n    }\n\n    async recv() {\n        while (this._connected) {\n            const result = await this._recvArray.pop();\n            // null = sentinel value = keep trying\n            if (result) {\n                return result;\n            }\n        }\n        throw new Error('Not connected');\n    }\n\n    async _sendLoop() {\n        // TODO handle errors\n        try {\n            while (this._connected) {\n                const data = await this._sendArray.pop();\n                if (!data) {\n                    this._sendTask = undefined;\n                    return;\n                }\n                await this._send(data);\n            }\n        } catch (e) {\n            this._log.info('The server closed the connection while sending');\n        }\n    }\n\n    async _recvLoop() {\n        let data;\n        while (this._connected) {\n            try {\n                data = await this._recv();\n                if (!data) {\n                    throw new Error('no data received');\n                }\n            } catch (e) {\n                this._log.info('connection closed');\n                // await this._recvArray.push()\n\n                this.disconnect();\n                return;\n            }\n            await this._recvArray.push(data);\n        }\n    }\n\n    async _initConn() {\n        if (this._codec.tag) {\n            await this.socket.write(this._codec.tag);\n        }\n    }\n\n    _send(data: Buffer) {\n        const encodedPacket = this._codec.encodePacket(data);\n        this.socket.write(encodedPacket);\n    }\n\n    _recv() {\n        return this._codec.readPacket(this.socket);\n    }\n\n    toString() {\n        return `${this._ip}:${this._port}/${this.constructor.name.replace('Connection', '')}`;\n    }\n}\n\nexport class ObfuscatedConnection extends Connection {\n    ObfuscatedIO: any = undefined;\n\n    async _initConn() {\n        this._obfuscation = new this.ObfuscatedIO(this);\n        this.socket.write(this._obfuscation.header);\n    }\n\n    _send(data: Buffer) {\n        this._obfuscation.write(this._codec.encodePacket(data));\n    }\n\n    _recv() {\n        return this._codec.readPacket(this._obfuscation);\n    }\n}\n\nexport class PacketCodec {\n    private _conn: Buffer;\n\n    constructor(connection: Buffer) {\n        this._conn = connection;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    encodePacket(data: Buffer) {\n        throw new Error('Not Implemented');\n\n        // Override\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    readPacket(reader: PromisedWebSockets) {\n        // override\n        throw new Error('Not Implemented');\n    }\n}\n\nexport class HttpConnection extends Connection {\n    socket: HttpStream;\n\n    href: string;\n\n    constructor(params: ConnectionInterfaceParams) {\n        super(params);\n        this.shouldLongPoll = true;\n        this.socket = new HttpStream(this.disconnectCallback.bind(this));\n        this.href = HttpStream.getURL(this._ip, this._port, this._isTestServer, this._isPremium);\n    }\n\n    send(data: Buffer) {\n        return this.socket.write(data);\n    }\n\n    recv() {\n        return this.socket.read();\n    }\n\n    async _connect() {\n        this._log.debug('Connecting');\n        await this.socket.connect(this._port, this._ip, this._isTestServer, this._isPremium);\n        this._log.debug('Finished connecting');\n    }\n\n    async connect() {\n        await this._connect();\n        this._connected = true;\n    }\n}\n","import BigInt from 'big-integer';\n\nimport type { PromisedWebSockets } from '../../extensions';\n\nimport { readBufferFromBigInt } from '../../Helpers';\nimport { Connection, PacketCodec } from './Connection';\n\nexport class AbridgedPacketCodec extends PacketCodec {\n    static tag = Buffer.from('ef', 'hex');\n\n    static obfuscateTag = Buffer.from('efefefef', 'hex');\n\n    private tag: Buffer;\n\n    obfuscateTag: Buffer;\n\n    constructor(props: any) {\n        super(props);\n        this.tag = AbridgedPacketCodec.tag;\n        this.obfuscateTag = AbridgedPacketCodec.obfuscateTag;\n    }\n\n    encodePacket(data: Buffer) {\n        const length = data.length >> 2;\n        let temp;\n        if (length < 127) {\n            const b = Buffer.alloc(1);\n            b.writeUInt8(length, 0);\n            temp = b;\n        } else {\n            temp = Buffer.concat([Buffer.from('7f', 'hex'), readBufferFromBigInt(BigInt(length), 3)]);\n        }\n        return Buffer.concat([temp, data]);\n    }\n\n    async readPacket(reader: PromisedWebSockets) {\n        const readData = await reader.read(1);\n        let length = readData[0];\n        if (length >= 127) {\n            length = Buffer.concat([await reader.read(3), Buffer.alloc(1)])\n                .readInt32LE(0);\n        }\n\n        return reader.read(length << 2);\n    }\n}\n\n/**\n * This is the mode with the lowest overhead, as it will\n * only require 1 byte if the packet length is less than\n * 508 bytes (127 << 2, which is very common).\n */\nexport class ConnectionTCPAbridged extends Connection {\n    PacketCodecClass = AbridgedPacketCodec;\n}\n","import { createCipheriv, createDecipheriv, type CtrImpl } from './crypto';\n\nexport class CTR {\n    private cipher: CtrImpl;\n    private decipher: CtrImpl;\n\n    constructor(key: Buffer, iv: Buffer) {\n        if (!Buffer.isBuffer(key) || !Buffer.isBuffer(iv) || iv.length !== 16) {\n            throw new Error('Key and iv need to be a buffer');\n        }\n\n        this.cipher = createCipheriv('AES-256-CTR', key, iv);\n        this.decipher = createDecipheriv('AES-256-CTR', key, iv);\n    }\n\n    encrypt(data: Buffer) {\n        return Buffer.from(this.cipher.update(data));\n    }\n\n    decrypt(data: Buffer) {\n        return Buffer.from(this.decipher.update(data));\n    }\n}\n","import type { HttpStream, PromisedWebSockets } from '../../extensions';\n\nimport { CTR } from '../../crypto/CTR';\n\nimport { generateRandomBytes } from '../../Helpers';\nimport { ObfuscatedConnection } from './Connection';\nimport { AbridgedPacketCodec } from './TCPAbridged';\n\nclass ObfuscatedIO {\n    header?: Buffer = undefined;\n\n    private connection: PromisedWebSockets | HttpStream;\n\n    private _encrypt: CTR;\n\n    private _decrypt: CTR;\n\n    constructor(connection: ConnectionTCPObfuscated) {\n        this.connection = connection.socket;\n        const res = this.initHeader(connection.PacketCodecClass);\n        this.header = res.random;\n\n        this._encrypt = res.encryptor;\n        this._decrypt = res.decryptor;\n    }\n\n    initHeader(packetCodec: typeof AbridgedPacketCodec) {\n        // Obfuscated messages secrets cannot start with any of these\n        const keywords = [\n            Buffer.from('50567247', 'hex'),\n            Buffer.from('474554', 'hex'),\n            Buffer.from('504f5354', 'hex'),\n            Buffer.from('eeeeeeee', 'hex'),\n        ];\n        let random;\n\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            random = generateRandomBytes(64);\n            if (random[0] !== 0xef && !(random.slice(4, 8)\n                .equals(Buffer.alloc(4)))) {\n                let ok = true;\n                for (const key of keywords) {\n                    if (key.equals(random.slice(0, 4))) {\n                        ok = false;\n                        break;\n                    }\n                }\n                if (ok) {\n                    break;\n                }\n            }\n        }\n        random = random.toJSON().data;\n\n        const randomReversed = Buffer.from(random.slice(8, 56))\n            .reverse();\n        // Encryption has \"continuous buffer\" enabled\n        const encryptKey = Buffer.from(random.slice(8, 40));\n        const encryptIv = Buffer.from(random.slice(40, 56));\n        const decryptKey = Buffer.from(randomReversed.slice(0, 32));\n        const decryptIv = Buffer.from(randomReversed.slice(32, 48));\n        const encryptor = new CTR(encryptKey, encryptIv);\n        const decryptor = new CTR(decryptKey, decryptIv);\n\n        random = Buffer.concat([\n            Buffer.from(random.slice(0, 56)), packetCodec.obfuscateTag, Buffer.from(random.slice(60)),\n        ]);\n        random = Buffer.concat([\n            Buffer.from(random.slice(0, 56)), Buffer.from(encryptor.encrypt(random)\n                .slice(56, 64)), Buffer.from(random.slice(64)),\n        ]);\n        return {\n            random,\n            encryptor,\n            decryptor,\n        };\n    }\n\n    async read(n: number) {\n        const data = await this.connection.readExactly(n);\n        return this._decrypt.encrypt(data);\n    }\n\n    write(data: Buffer) {\n        this.connection.write(this._encrypt.encrypt(data));\n    }\n}\n\nexport class ConnectionTCPObfuscated extends ObfuscatedConnection {\n    ObfuscatedIO = ObfuscatedIO;\n\n    PacketCodecClass = AbridgedPacketCodec;\n}\n","export class UpdateConnectionState {\n    static disconnected = -1;\n\n    static connected = 1;\n\n    static broken = 0;\n\n    state: number;\n\n    constructor(state: number) {\n        this.state = state;\n    }\n}\n\nexport class UpdateServerTimeOffset {\n    timeOffset: number;\n\n    constructor(timeOffset: number) {\n        this.timeOffset = timeOffset;\n    }\n}\n","import { IGE as AesIge } from '@cryptography/aes';\n\nimport { convertToLittle, generateRandomBytes } from '../Helpers';\n\nclass IGENEW {\n    private ige: AesIge;\n\n    constructor(key: Buffer, iv: Buffer) {\n        this.ige = new AesIge(key, iv);\n    }\n\n    /**\n     * Decrypts the given text in 16-bytes blocks by using the given key and 32-bytes initialization vector\n     * @param cipherText {Buffer}\n     * @returns {Buffer}\n     */\n    decryptIge(cipherText: Buffer): Buffer {\n        return convertToLittle(this.ige.decrypt(cipherText));\n    }\n\n    /**\n     * Encrypts the given text in 16-bytes blocks by using the given key and 32-bytes initialization vector\n     * @param plainText {Buffer}\n     * @returns {Buffer}\n     */\n    encryptIge(plainText: Buffer): Buffer {\n        const padding = plainText.length % 16;\n        if (padding) {\n            plainText = Buffer.concat([\n                plainText,\n                generateRandomBytes(16 - padding),\n            ]);\n        }\n\n        return convertToLittle(this.ige.encrypt(plainText));\n    }\n}\n\nexport { IGENEW as IGE };\n","import BigInt from 'big-integer';\n\nimport type { AuthKey } from '../crypto/AuthKey';\n\nimport { IGE } from '../crypto/IGE';\nimport { BinaryReader, type BinaryWriter, type Logger } from '../extensions';\nimport { Api } from '../tl';\nimport { TLMessage } from '../tl/core';\nimport GZIPPacked from '../tl/core/GZIPPacked';\n\nimport { InvalidBufferError, SecurityError } from '../errors/Common';\nimport {\n    convertToLittle,\n    generateRandomBytes,\n    generateRandomLong,\n    mod,\n    readBigIntFromBuffer,\n    readBufferFromBigInt,\n    sha256,\n    toSignedLittleBuffer,\n} from '../Helpers';\nimport { CTR } from '../crypto/CTR';\n\nexport default class MTProtoState {\n    private readonly authKey?: AuthKey;\n\n    private _log: any;\n\n    timeOffset: number;\n\n    salt: bigInt.BigInteger;\n\n    private id: bigInt.BigInteger;\n\n    _sequence: number;\n\n    _isCall: boolean;\n\n    _isOutgoing: boolean;\n\n    private _lastMsgId: bigInt.BigInteger;\n\n    private msgIds: string[];\n\n    /**\n     *\n     `telethon.network.mtprotosender.MTProtoSender` needs to hold a state\n     in order to be able to encrypt and decrypt incoming/outgoing messages,\n     as well as generating the message IDs. Instances of this class hold\n     together all the required information.\n\n     It doesn't make sense to use `telethon.sessions.abstract.Session` for\n     the sender because the sender should *not* be concerned about storing\n     this information to disk, as one may create as many senders as they\n     desire to any other data center, or some CDN. Using the same session\n     for all these is not a good idea as each need their own authkey, and\n     the concept of \"copying\" sessions with the unnecessary entities or\n     updates state for these connections doesn't make sense.\n\n     While it would be possible to have a `MTProtoPlainState` that does no\n     encryption so that it was usable through the `MTProtoLayer` and thus\n     avoid the need for a `MTProtoPlainSender`, the `MTProtoLayer` is more\n     focused to efficiency and this state is also more advanced (since it\n     supports gzipping and invoking after other message IDs). There are too\n     many methods that would be needed to make it convenient to use for the\n     authentication process, at which point the `MTProtoPlainSender` is better\n     * @param authKey\n     * @param loggers\n     * @param isCall\n     * @param isOutgoing\n     */\n    constructor(authKey?: AuthKey, loggers?: Logger, isCall = false, isOutgoing = false) {\n        this.authKey = authKey;\n        this._log = loggers;\n        this._isCall = isCall;\n        this._isOutgoing = isOutgoing;\n        this.timeOffset = 0;\n        this.salt = BigInt.zero;\n\n        this.id = BigInt.zero;\n        this._sequence = 0;\n        this._lastMsgId = BigInt.zero;\n        this.msgIds = [];\n        this.reset();\n    }\n\n    /**\n     * Resets the state\n     */\n    reset() {\n        // Session IDs can be random on every connection\n        this.id = generateRandomLong(true);\n        this._sequence = 0;\n        this._lastMsgId = BigInt(0);\n        this.msgIds = [];\n    }\n\n    /**\n     * Updates the message ID to a new one,\n     * used when the time offset changed.\n     * @param message\n     */\n    updateMessageId(message: TLMessage) {\n        message.msgId = this._getNewMsgId();\n    }\n\n    /**\n     * Calculate the key based on Telegram guidelines, specifying whether it's the client or not\n     * @param authKey\n     * @param msgKey\n     * @param client\n     * @returns {{iv: Buffer, key: Buffer}}\n     */\n    async _calcKey(authKey: Buffer, msgKey: Buffer, client: boolean) {\n        const x = this._isCall\n            ? (128 + (this._isOutgoing !== client ? 8 : 0))\n            : (client ? 0 : 8);\n        const [sha256a, sha256b] = await Promise.all([\n            sha256(Buffer.concat([msgKey, authKey.slice(x, x + 36)])),\n            sha256(Buffer.concat([authKey.slice(x + 40, x + 76), msgKey])),\n        ]);\n        const key = Buffer.concat([sha256a.slice(0, 8), sha256b.slice(8, 24), sha256a.slice(24, 32)]);\n        if (this._isCall) {\n            const iv = Buffer.concat([sha256b.slice(0, 4), sha256a.slice(8, 16), sha256b.slice(24, 28)]);\n\n            return {\n                key,\n                iv,\n            };\n        }\n        const iv = Buffer.concat([sha256b.slice(0, 8), sha256a.slice(8, 24), sha256b.slice(24, 32)]);\n        return {\n            key,\n            iv,\n        };\n    }\n\n    /**\n     * Writes a message containing the given data into buffer.\n     * Returns the message id.\n     * @param buffer\n     * @param data\n     * @param contentRelated\n     * @param afterId\n     */\n    async writeDataAsMessage(buffer: BinaryWriter, data: Buffer, contentRelated: boolean, afterId?: BigInt.BigInteger) {\n        const msgId = this._getNewMsgId();\n        const seqNo = this._getSeqNo(contentRelated);\n        let body;\n        if (!afterId) {\n            body = await GZIPPacked.gzipIfSmaller(contentRelated, data);\n        } else {\n            // Invoke query expects a query with a getBytes func\n            body = await GZIPPacked.gzipIfSmaller(contentRelated, new Api.InvokeAfterMsg({\n                msgId: afterId,\n                query: {\n                    getBytes() {\n                        return data;\n                    },\n                },\n            }).getBytes());\n        }\n        const s = Buffer.alloc(4);\n        s.writeInt32LE(seqNo, 0);\n        const b = Buffer.alloc(4);\n        b.writeInt32LE(body.length, 0);\n        const m = toSignedLittleBuffer(msgId, 8);\n        buffer.write(Buffer.concat([m, s, b]));\n        buffer.write(body);\n        return msgId;\n    }\n\n    /**\n     * Encrypts the given message data using the current authorization key\n     * following MTProto 2.0 guidelines core.telegram.org/mtproto/description.\n     * @param data\n     */\n    async encryptMessageData(data: Buffer) {\n        if (!this.authKey) {\n            throw new Error('Auth key unset');\n        }\n\n        await this.authKey.waitForKey();\n        const authKey = this.authKey.getKey();\n        if (!authKey) {\n            throw new Error('Auth key unset');\n        }\n\n        if (!this.salt || !this.id || !authKey || !this.authKey.keyId) {\n            throw new Error('Unset params');\n        }\n\n        if (this._isCall) {\n            const x = 128 + (this._isOutgoing ? 0 : 8);\n            const lengthStart = data.length;\n\n            data = Buffer.from(data);\n            if (lengthStart % 4 !== 0) {\n                data = Buffer.concat([data, Buffer.from(new Array(4 - (lengthStart % 4)).fill(0x20))]);\n            }\n\n            const msgKeyLarge = await sha256(Buffer.concat([authKey\n                .slice(88 + x, 88 + x + 32), Buffer.from(data)]));\n\n            const msgKey = msgKeyLarge.slice(8, 24);\n\n            const {\n                iv,\n                key,\n            } = await this._calcKey(authKey, msgKey, true);\n\n            data = new CTR(key, iv).encrypt(data);\n            // data = data.slice(0, lengthStart)\n            return Buffer.concat([msgKey, data]);\n        } else {\n            const s = toSignedLittleBuffer(this.salt, 8);\n            const i = toSignedLittleBuffer(this.id, 8);\n            data = Buffer.concat([Buffer.concat([s, i]), data]);\n            const padding = generateRandomBytes(mod(-(data.length + 12), 16) + 12);\n            // Being substr(what, offset, length); x = 0 for client\n            // \"msg_key_large = SHA256(substr(auth_key, 88+x, 32) + pt + padding)\"\n            const msgKeyLarge = await sha256(Buffer.concat([authKey\n                .slice(88, 88 + 32), data, padding]));\n            // \"msg_key = substr (msg_key_large, 8, 16)\"\n            const msgKey = msgKeyLarge.slice(8, 24);\n\n            const {\n                iv,\n                key,\n            } = await this._calcKey(authKey, msgKey, true);\n\n            const keyId = readBufferFromBigInt(this.authKey.keyId, 8);\n            return Buffer.concat([keyId, msgKey, new IGE(key, iv).encryptIge(Buffer.concat([data, padding]))]);\n        }\n    }\n\n    /**\n     * Inverse of `encrypt_message_data` for incoming server messages.\n     * @param body\n     */\n    async decryptMessageData(body: Buffer) {\n        if (!this.authKey) {\n            throw new Error('Auth key unset');\n        }\n\n        if (body.length < 8) {\n            throw new InvalidBufferError(body);\n        }\n        if (body.length < 0) { // length needs to be positive\n            throw new SecurityError('Server replied with negative length');\n        }\n        if (body.length % 4 !== 0 && !this._isCall) {\n            throw new SecurityError('Server replied with length not divisible by 4');\n        }\n        // TODO Check salt,sessionId, and sequenceNumber\n        if (!this._isCall) {\n            const keyId = readBigIntFromBuffer(body.slice(0, 8));\n\n            if (!this.authKey.keyId || keyId.neq(this.authKey.keyId)) {\n                throw new SecurityError('Server replied with an invalid auth key');\n            }\n        }\n        const authKey = this.authKey.getKey();\n        if (!authKey) {\n            throw new SecurityError('Unset AuthKey');\n        }\n        const msgKey = this._isCall ? body.slice(0, 16) : body.slice(8, 24);\n\n        const x = this._isCall ? 128 + (this._isOutgoing ? 8 : 0) : 0;\n        const {\n            iv,\n            key,\n        } = await this._calcKey(authKey, msgKey, false);\n\n        if (this._isCall) {\n            body = body.slice(16);\n            const lengthStart = body.length;\n\n            body = Buffer.concat([body, Buffer.from(new Array(4 - (lengthStart % 4)).fill(0))]);\n\n            body = new CTR(key, iv).decrypt(body);\n\n            body = body.slice(0, lengthStart);\n        } else {\n            body = new IGE(key, iv).decryptIge(this._isCall ? body.slice(16) : body.slice(24));\n        }\n        // https://core.telegram.org/mtproto/security_guidelines\n        // Sections \"checking sha256 hash\" and \"message length\"\n\n        const ourKey = this._isCall\n            ? await sha256(Buffer.concat([authKey\n                .slice(88 + x, 88 + x + 32), body]))\n            : await sha256(Buffer.concat([authKey\n                .slice(96, 96 + 32), body]));\n\n        if (!this._isCall && !msgKey.equals(ourKey.slice(8, 24))) {\n            throw new SecurityError('Received msg_key doesn\\'t match with expected one');\n        }\n        const reader = new BinaryReader(body);\n\n        if (this._isCall) {\n            // Seq\n            reader.readInt(false);\n            return reader.read(body.length - 4);\n        } else {\n            reader.readLong(); // removeSalt\n            const serverId = reader.readLong();\n            if (!serverId.eq(this.id)) {\n                throw new SecurityError('Server replied with a wrong session ID');\n            }\n\n            const remoteMsgId = reader.readLong();\n            // if we get a duplicate message id we should ignore it.\n            if (this.msgIds.includes(remoteMsgId.toString())) {\n                throw new SecurityError('Duplicate msgIds');\n            }\n            // we only store the latest 500 message ids from the server\n            if (this.msgIds.length > 500) {\n                this.msgIds.shift();\n            }\n\n            const remoteSequence = reader.readInt();\n            const containerLen = reader.readInt(); // msgLen for the inner object, padding ignored\n            const diff = body.length - containerLen;\n            // We want to check if it's between 12 and 1024\n            // https://core.telegram.org/mtproto/security_guidelines#checking-message-length\n            if (diff < 12 || diff > 1024) {\n                throw new SecurityError('Server replied with the wrong message padding');\n            }\n\n            // We could read msg_len bytes and use those in a new reader to read\n            // the next TLObject without including the padding, but since the\n            // reader isn't used for anything else after this, it's unnecessary.\n            const obj = await reader.tgReadObject();\n            // We only check for objects that telegram has returned to us (Updates) not ones we send.\n            if (obj?.className?.startsWith('Update')) {\n                const now = Math.floor(Date.now() / 1000);\n                const msgLocalTime = this.getMsgIdTimeLocal(remoteMsgId);\n\n                if (msgLocalTime && ((msgLocalTime - now) > 30 || (now - msgLocalTime) > 300)) {\n                    // 30 sec in the future or 300 sec in the past\n                    throw new SecurityError('The message time is incorrect.');\n                }\n            }\n\n            if (obj && !('errorCode' in obj)) {\n                this.msgIds.push(remoteMsgId.toString());\n            }\n\n            return new TLMessage(remoteMsgId, remoteSequence, obj);\n        }\n    }\n\n    /**\n     * Generates a new unique message ID based on the current\n     * time (in ms) since epoch, applying a known time offset.\n     * @private\n     */\n    _getNewMsgId() {\n        const now = Date.now() / 1000 + this.timeOffset;\n        const nanoseconds = Math.floor((now - Math.floor(now)) * 1e9);\n        let newMsgId = (BigInt(Math.floor(now))\n            .shiftLeft(BigInt(32))).or(BigInt(nanoseconds)\n            .shiftLeft(BigInt(2)));\n        if (this._lastMsgId.greaterOrEquals(newMsgId)) {\n            newMsgId = this._lastMsgId.add(BigInt(4));\n        }\n        this._lastMsgId = newMsgId;\n        return newMsgId;\n    }\n\n    /**\n     * Returns the understood time by the message id (server time + local offset)\n     */\n    getMsgIdTimeLocal(msgId: BigInt.BigInteger) {\n        if (this._lastMsgId.eq(0)) {\n            // this means it's the first message sent/received so don't check yet\n            return false;\n        }\n        return msgId.shiftRight(BigInt(32)).toJSNumber() - this.timeOffset;\n    }\n\n    /**\n     * Updates the time offset to the correct\n     * one given a known valid message ID.\n     * @param correctMsgId {BigInteger}\n     */\n    updateTimeOffset(correctMsgId: BigInt.BigInteger) {\n        const bad = this._getNewMsgId();\n        const old = this.timeOffset;\n        const now = Math.floor(Date.now() / 1000);\n        const correct = correctMsgId.shiftRight(BigInt(32)).toJSNumber();\n        this.timeOffset = correct - now;\n\n        if (this.timeOffset !== old) {\n            this._lastMsgId = BigInt(0);\n            this._log.debug(\n                `Updated time offset (old offset ${old}, bad ${bad}, good ${correctMsgId}, new ${this.timeOffset})`,\n            );\n        }\n\n        return this.timeOffset;\n    }\n\n    /**\n     * Generates the next sequence number depending on whether\n     * it should be for a content-related query or not.\n     * @param contentRelated\n     * @private\n     */\n    _getSeqNo(contentRelated: boolean) {\n        if (contentRelated) {\n            const result = this._sequence * 2 + 1;\n            this._sequence += 1;\n            return result;\n        } else {\n            return this._sequence * 2;\n        }\n    }\n}\n","/**\n *  This module contains the class used to communicate with Telegram's servers\n *  in plain text, when no authorization key has been created yet.\n */\nimport BigInt from 'big-integer';\n\nimport type { Logger } from '../extensions';\nimport type { Api } from '../tl';\nimport type { Connection } from './connection';\n\nimport { BinaryReader } from '../extensions';\n\nimport { InvalidBufferError } from '../errors/Common';\nimport { toSignedLittleBuffer } from '../Helpers';\nimport MTProtoState from './MTProtoState';\n\n/**\n * MTProto Mobile Protocol plain sender (https://core.telegram.org/mtproto/description#unencrypted-messages)\n */\n\nexport default class MTProtoPlainSender {\n    private _state: MTProtoState;\n\n    private _connection: Connection;\n\n    /**\n     * Initializes the MTProto plain sender.\n     * @param connection connection: the Connection to be used.\n     * @param loggers\n     */\n    constructor(connection: Connection, loggers: Logger) {\n        this._state = new MTProtoState(undefined, loggers);\n        this._connection = connection;\n    }\n\n    /**\n     * Sends and receives the result for the given request.\n     * @param request\n     */\n    async send(request: Api.AnyRequest) {\n        let body = request.getBytes();\n        let msgId = this._state._getNewMsgId();\n        const m = toSignedLittleBuffer(msgId, 8);\n        const b = Buffer.alloc(4);\n        b.writeInt32LE(body.length, 0);\n\n        const res = Buffer.concat([Buffer.concat([Buffer.alloc(8), m, b]), body]);\n\n        await this._connection.send(res);\n        body = await this._connection.recv();\n        if (body.length < 8) {\n            throw new InvalidBufferError(body);\n        }\n        const reader = new BinaryReader(body);\n        const authKeyId = reader.readLong();\n        if (authKeyId.neq(BigInt(0))) {\n            throw new Error('Bad authKeyId');\n        }\n        msgId = reader.readLong();\n        if (msgId.eq(BigInt(0))) {\n            throw new Error('Bad msgId');\n        }\n        /** ^ We should make sure that the read ``msg_id`` is greater\n         * than our own ``msg_id``. However, under some circumstances\n         * (bad system clock/working behind proxies) this seems to not\n         * be the case, which would cause endless assertion errors.\n         */\n\n        const length = reader.readInt();\n        if (length <= 0) {\n            throw new Error('Bad length');\n        }\n        /**\n         * We could read length bytes and use those in a new reader to read\n         * the next TLObject without including the padding, but since the\n         * reader isn't used for anything else after this, it's unnecessary.\n         */\n        return reader.tgReadObject();\n    }\n}\n","import type BigInt from 'big-integer';\n\nimport { BinaryReader } from '../extensions';\n\nimport {\n    readBigIntFromBuffer,\n    readBufferFromBigInt,\n    sha1,\n    sleep,\n    toSignedLittleBuffer,\n} from '../Helpers';\n\nexport class AuthKey {\n    _key?: Buffer;\n\n    _hash?: Buffer;\n\n    private auxHash?: BigInt.BigInteger;\n\n    keyId?: BigInt.BigInteger;\n\n    constructor(value?: Buffer, hash?: Buffer) {\n        if (!hash || !value) {\n            return;\n        }\n        this._key = value;\n        this._hash = hash;\n        const reader = new BinaryReader(hash);\n        this.auxHash = reader.readLong(false);\n        reader.read(4);\n        this.keyId = reader.readLong(false);\n    }\n\n    async setKey(value?: Buffer | AuthKey) {\n        if (!value) {\n            this._key = undefined;\n            this.auxHash = undefined;\n            this.keyId = undefined;\n            this._hash = undefined;\n            return;\n        }\n        if (value instanceof AuthKey) {\n            this._key = value._key;\n            this.auxHash = value.auxHash;\n            this.keyId = value.keyId;\n            this._hash = value._hash;\n            return;\n        }\n        this._key = value;\n        this._hash = await sha1(this._key);\n        const reader = new BinaryReader(this._hash);\n        this.auxHash = reader.readLong(false);\n        reader.read(4);\n        this.keyId = reader.readLong(false);\n    }\n\n    async waitForKey() {\n        while (!this.keyId) {\n            await sleep(20);\n        }\n    }\n\n    getKey() {\n        return this._key;\n    }\n\n    // TODO : This doesn't really fit here, it's only used in authentication\n\n    /**\n     * Calculates the new nonce hash based on the current class fields' values\n     * @param newNonce\n     * @param number\n     * @returns {BigInt.BigInteger}\n     */\n    async calcNewNonceHash(\n        newNonce: BigInt.BigInteger,\n        number: number,\n    ): Promise<BigInt.BigInteger> {\n        if (!this.auxHash) {\n            throw new Error('Auth key not set');\n        }\n\n        const nonce = toSignedLittleBuffer(newNonce, 32);\n        const n = Buffer.alloc(1);\n        n.writeUInt8(number, 0);\n        const data = Buffer.concat([\n            nonce,\n            Buffer.concat([n, readBufferFromBigInt(this.auxHash, 8, true)]),\n        ]);\n\n        // Calculates the message key from the given data\n        const shaData = (await sha1(data)).slice(4, 20);\n        return readBigIntFromBuffer(shaData, true, true);\n    }\n\n    equals(other: AuthKey) {\n        return (\n            other instanceof this.constructor\n            && this._key\n            && Buffer.isBuffer(other.getKey())\n            && other.getKey()?.equals(this._key)\n        );\n    }\n}\n","import type BigInt from 'big-integer';\n\nimport type RequestState from '../network/RequestState';\n\nexport default class PendingState {\n    _pending: Map<string, RequestState>;\n\n    constructor() {\n        this._pending = new Map();\n    }\n\n    set(msgId: BigInt.BigInteger, state: RequestState) {\n        this._pending.set(msgId.toString(), state);\n    }\n\n    get(msgId: BigInt.BigInteger) {\n        return this._pending.get(msgId.toString());\n    }\n\n    getAndDelete(msgId: BigInt.BigInteger) {\n        const state = this.get(msgId);\n        this.delete(msgId);\n        return state;\n    }\n\n    values() {\n        return Array.from(this._pending.values());\n    }\n\n    delete(msgId: BigInt.BigInteger) {\n        this._pending.delete(msgId.toString());\n    }\n\n    clear() {\n        this._pending.clear();\n    }\n}\n","import bigInt from 'big-integer';\nimport {\n    generateRandomBytes,\n    modExp,\n    readBigIntFromBuffer,\n    readBufferFromBigInt,\n    sha1,\n} from '../Helpers';\n\nexport const SERVER_KEYS = [\n    {\n        fingerprint: bigInt('-3414540481677951611'),\n        n: bigInt(\n            '2937959817066933702298617714945612856538843112005886376816255642404751219133084745514657634448776440866'\n            + '1701890505066208632169112269581063774293102577308490531282748465986139880977280302242772832972539403531'\n            + '3160108704012876427630091361567343395380424193887227773571344877461690935390938502512438971889287359033'\n            + '8945177273024525306296338410881284207988753897636046529094613963869149149606209957083647645485599631919'\n            + '2747663615955633778034897140982517446405334423701359108810182097749467210509584293428076654573384828809'\n            + '574217079944388301239431309115013843331317877374435868468779972014486325557807783825502498215169806323',\n        ),\n        e: 65537,\n    },\n    {\n        fingerprint: bigInt('-5595554452916591101'),\n        n: bigInt(\n            '2534288944884041556497168959071347320689884775908477905258202659454602246385394058588521595116849196570'\n            + '8222649399180603818074200620463776135424884632162512403163793083921641631564740959529419359595852941166'\n            + '8489405859523376133330223960965841179548922160312292373029437018775884567383353986024616752250817918203'\n            + '9315375750495263623495132323782003654358104782690612092797248736680529211579223142368426126233039432475'\n            + '0785450942589751755390156647751460719351439969059949569615302809050721500330239005077889855323917509948'\n            + '255722081644689442127297605422579707142646660768825302832201908302295573257427896031830742328565032949',\n        ),\n        e: 65537,\n    },\n].reduce((acc, { fingerprint, ...keyInfo }) => {\n    acc.set(fingerprint.toString(), keyInfo);\n    return acc;\n}, new Map<string, { n: bigInt.BigInteger; e: number }>());\n\n/**\n * Encrypts the given data known the fingerprint to be used\n * in the way Telegram requires us to do so (sha1(data) + data + padding)\n\n * @param fingerprint the fingerprint of the RSA key.\n * @param data the data to be encrypted.\n * @returns {Buffer|*|undefined} the cipher text, or undefined if no key matching this fingerprint is found.\n */\nexport async function encrypt(fingerprint: bigInt.BigInteger, data: Buffer) {\n    const key = SERVER_KEYS.get(fingerprint.toString());\n    if (!key) {\n        return undefined;\n    }\n\n    // len(sha1.digest) is always 20, so we're left with 255 - 20 - x padding\n    const rand = generateRandomBytes(235 - data.length);\n\n    const toEncrypt = Buffer.concat([await sha1(data), data, rand]);\n\n    // rsa module rsa.encrypt adds 11 bits for padding which we don't want\n    // rsa module uses rsa.transform.bytes2int(to_encrypt), easier way:\n    const payload = readBigIntFromBuffer(toEncrypt, false);\n    const encrypted = modExp(payload, bigInt(key.e), key.n);\n    // rsa module uses transform.int2bytes(encrypted, keylength), easier:\n    return readBufferFromBigInt(encrypted, 256, false);\n}\n","import BigInt from 'big-integer';\n\nimport { modExp } from '../Helpers';\n\nexport class Factorizator {\n    /**\n     * Calculates the greatest common divisor\n     * @param a {BigInteger}\n     * @param b {BigInteger}\n     * @returns {BigInteger}\n     */\n    static gcd(a: BigInt.BigInteger, b: BigInt.BigInteger) {\n        while (b.neq(BigInt.zero)) {\n            const temp = b;\n            b = a.remainder(b);\n            a = temp;\n        }\n        return a;\n    }\n\n    /**\n     * Factorizes the given number and returns both the divisor and the number divided by the divisor\n     * @param pq {BigInteger}\n     * @returns {{p: *, q: *}}\n     */\n    static factorize(pq: BigInt.BigInteger) {\n        if (pq.remainder(2).equals(BigInt.zero)) {\n            return { p: BigInt(2), q: pq.divide(BigInt(2)) };\n        }\n        let y = BigInt.randBetween(BigInt(1), pq.minus(1));\n        const c = BigInt.randBetween(BigInt(1), pq.minus(1));\n        const m = BigInt.randBetween(BigInt(1), pq.minus(1));\n\n        let g = BigInt.one;\n        let r = BigInt.one;\n        let q = BigInt.one;\n        let x = BigInt.zero;\n        let ys = BigInt.zero;\n        let k;\n\n        while (g.eq(BigInt.one)) {\n            x = y;\n            for (let i = 0; BigInt(i).lesser(r); i++) {\n                y = modExp(y, BigInt(2), pq).add(c).remainder(pq);\n            }\n            k = BigInt.zero;\n\n            while (k.lesser(r) && g.eq(BigInt.one)) {\n                ys = y;\n                const condition = BigInt.min(m, r.minus(k));\n                for (let i = 0; BigInt(i).lesser(condition); i++) {\n                    y = modExp(y, BigInt(2), pq).add(c).remainder(pq);\n                    q = q.multiply(x.minus(y).abs()).remainder(pq);\n                }\n                g = Factorizator.gcd(q, pq);\n                k = k.add(m);\n            }\n\n            r = r.multiply(2);\n        }\n\n        if (g.eq(pq)) {\n            while (true) {\n                ys = modExp(ys, BigInt(2), pq).add(c).remainder(pq);\n                g = Factorizator.gcd(x.minus(ys).abs(), pq);\n\n                if (g.greater(1)) {\n                    break;\n                }\n            }\n        }\n        const p = g;\n        q = pq.divide(g);\n        return p < q ? { p, q } : { p: q, q: p };\n    }\n}\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n\n  static resolved(): Deferred<void>;\n  static resolved<T>(value: T): Deferred<T>;\n  static resolved<T>(value?: T): Deferred<T | void> {\n    const deferred = new Deferred<T | void>();\n    deferred.resolve(value);\n    return deferred;\n  }\n}\n","import type BigInt from 'big-integer';\n\nimport type { Api } from '../tl';\n\nimport Deferred from '../../../util/Deferred';\n\nexport type CallableRequest = Api.AnyRequest | Api.MsgsAck | Api.MsgsStateInfo | Api.HttpWait;\ntype RequestResponse<T> = T extends { __response: infer R } ? R : void;\n\nexport default class RequestState<T extends CallableRequest = CallableRequest> {\n    public containerId?: BigInt.BigInteger;\n\n    public msgId?: BigInt.BigInteger;\n\n    public request: any;\n\n    public data: Buffer;\n\n    public after: any;\n\n    public result: undefined;\n\n    public finished: Deferred;\n\n    public promise: Promise<RequestResponse<T> | undefined> | undefined;\n\n    public abortSignal: AbortSignal | undefined;\n\n    public resolve?: (value?: RequestResponse<T>) => void;\n\n    public reject?: (reason?: Error) => void;\n\n    constructor(request: T, abortSignal?: AbortSignal) {\n        this.containerId = undefined;\n        this.msgId = undefined;\n        this.request = request;\n        this.data = request.getBytes();\n        this.after = undefined;\n        this.result = undefined;\n        this.abortSignal = abortSignal;\n        this.finished = new Deferred();\n\n        this.resetPromise();\n    }\n\n    isReady() {\n        if (!this.after) {\n            return true;\n        }\n\n        return this.after.finished.promise;\n    }\n\n    resetPromise() {\n        // Prevent stuck await\n        this.reject?.();\n\n        this.promise = new Promise<RequestResponse<T> | undefined>((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\n","import type BigInt from 'big-integer';\n\nimport type { TLMessage } from '../tl/core';\nimport { type Connection, HttpConnection } from './connection';\n\nimport { RPCError, RPCMessageToError } from '../errors';\nimport {\n    BinaryReader, type Logger, MessagePacker,\n} from '../extensions';\nimport { Api } from '../tl';\nimport GZIPPacked from '../tl/core/GZIPPacked';\nimport RPCResult from '../tl/core/RPCResult';\nimport { UpdateConnectionState, UpdateServerTimeOffset } from './updates';\n\nimport { AuthKey } from '../crypto/AuthKey';\nimport {\n    BadMessageError, InvalidBufferError, SecurityError, TypeNotFoundError,\n} from '../errors/Common';\nimport PendingState from '../extensions/PendingState';\nimport { sleep } from '../Helpers';\nimport MessageContainer from '../tl/core/MessageContainer';\nimport { doAuthentication } from './Authenticator';\nimport MtProtoPlainSender from './MTProtoPlainSender';\nimport MTProtoState from './MTProtoState';\nimport RequestState, { CallableRequest } from './RequestState';\nimport { Update } from '../client/TelegramClient';\n\nconst LONGPOLL_MAX_WAIT = 3000;\nconst LONGPOLL_MAX_DELAY = 500;\nconst LONGPOLL_WAIT_AFTER = 150;\n\ninterface DefaultOptions {\n    logger: Logger;\n    retries: number;\n    retriesToFallback: number;\n    retryMainConnectionDelay: number;\n    delay: number;\n    dcId: number;\n    senderIndex?: number;\n    autoReconnect: boolean;\n    shouldForceHttpTransport: boolean;\n    shouldAllowHttpTransport: boolean;\n    connectTimeout: number;\n    authKeyCallback: any;\n    updateCallback?: any;\n    autoReconnectCallback?: any;\n    isMainSender?: boolean;\n    isExported?: boolean;\n    senderCallback?: any;\n    onConnectionBreak?: CallableFunction;\n    getShouldDebugExportedSenders?: () => boolean;\n}\n\n/**\n * MTProto Mobile Protocol sender\n * (https://core.telegram.org/mtproto/description)\n * This class is responsible for wrapping requests into `TLMessage`'s,\n * sending them over the network and receiving them in a safe manner.\n *\n * Automatic reconnection due to temporary network issues is a concern\n * for this class as well, including retry of messages that could not\n * be sent successfully.\n *\n * A new authorization key will be generated on connection if no other\n * key exists yet.\n */\nexport default class MTProtoSender {\n    static DEFAULT_OPTIONS: Partial<DefaultOptions> = {\n        logger: undefined,\n        retries: Infinity,\n        retriesToFallback: 1,\n        delay: 2000,\n        retryMainConnectionDelay: 10000,\n        shouldForceHttpTransport: false,\n        shouldAllowHttpTransport: false,\n        autoReconnect: true,\n        connectTimeout: undefined,\n        authKeyCallback: undefined,\n        updateCallback: undefined,\n        autoReconnectCallback: undefined,\n        isMainSender: undefined,\n        onConnectionBreak: undefined,\n        isExported: undefined,\n        getShouldDebugExportedSenders: undefined,\n    };\n\n    _connection?: Connection;\n\n    _fallbackConnection?: Connection;\n\n    private _shouldForceHttpTransport: boolean;\n\n    private _shouldAllowHttpTransport: boolean;\n\n    private _retriesToFallback: number;\n\n    private readonly _log: Logger;\n\n    _dcId: number;\n\n    _senderIndex: number;\n\n    private readonly _retries: number;\n\n    private readonly _delay: number;\n\n    private _retryMainConnectionDelay: number;\n\n    private _isFallback: boolean;\n\n    private readonly _authKeyCallback: any;\n\n    public _updateCallback: (\n        update: Update,\n    ) => void;\n\n    private readonly _autoReconnectCallback?: any;\n\n    private readonly _isMainSender: boolean;\n\n    private readonly _isExported: boolean;\n\n    private _sendQueue: MessagePacker;\n\n    private _sendQueueLongPoll: MessagePacker;\n\n    private isSendingLongPoll?: boolean;\n\n    private readonly _pendingAck: Set<any>;\n\n    private readonly _lastAcks: any[];\n\n    _pendingState: PendingState;\n\n    _userConnected: boolean;\n\n    isReconnecting: boolean;\n\n    _disconnected: boolean;\n\n    private _sendLoopHandle: any;\n\n    private _recvLoopHandle: any;\n\n    private _longPollLoopHandle: any;\n\n    private _isReconnectingToMain = false;\n\n    readonly authKey: AuthKey;\n\n    private readonly _state: MTProtoState;\n\n    _getShouldDebugExportedSenders?: () => boolean;\n\n    private readonly _handlers: Record<number, (message: TLMessage) => void>;\n\n    private readonly _onConnectionBreak?: CallableFunction;\n\n    userDisconnected: boolean;\n\n    isConnecting = false;\n\n    _authenticated = false;\n\n    /**\n     * @param authKey\n     * @param opts\n     */\n    constructor(authKey: AuthKey, opts: DefaultOptions) {\n        const args = { ...MTProtoSender.DEFAULT_OPTIONS, ...opts };\n        this._connection = undefined;\n        this._fallbackConnection = undefined;\n        this._shouldForceHttpTransport = args.shouldForceHttpTransport;\n        this._shouldAllowHttpTransport = args.shouldAllowHttpTransport;\n        this._log = args.logger;\n        this._dcId = args.dcId;\n        this._senderIndex = args.senderIndex || 0;\n        this._retries = args.retries;\n        this._retriesToFallback = args.retriesToFallback;\n        this._delay = args.delay;\n        this._retryMainConnectionDelay = args.retryMainConnectionDelay;\n        this._authKeyCallback = args.authKeyCallback;\n        this._updateCallback = args.updateCallback;\n        this._autoReconnectCallback = args.autoReconnectCallback;\n        this._isMainSender = Boolean(args.isMainSender);\n        this._isExported = Boolean(args.isExported);\n        this._onConnectionBreak = args.onConnectionBreak;\n        this._isFallback = false;\n        this._getShouldDebugExportedSenders = args.getShouldDebugExportedSenders;\n\n        /**\n         * whether we disconnected ourself or telegram did it.\n         */\n        this.userDisconnected = false;\n\n        /**\n         * Whether the user has explicitly connected or disconnected.\n         *\n         * If a disconnection happens for any other reason and it\n         * was *not* user action then the pending messages won't\n         * be cleared but on explicit user disconnection all the\n         * pending futures should be cancelled.\n         */\n        this._userConnected = false;\n        this.isReconnecting = false;\n        this._disconnected = true;\n\n        /**\n         * We need to join the loops upon disconnection\n         */\n        this._sendLoopHandle = undefined;\n        this._longPollLoopHandle = undefined;\n        this._recvLoopHandle = undefined;\n\n        /**\n         * Preserving the references of the AuthKey and state is important\n         */\n        this.authKey = authKey || new AuthKey();\n        this._state = new MTProtoState(this.authKey, this._log);\n\n        /**\n         * Outgoing messages are put in a queue and sent in a batch.\n         * Note that here we're also storing their ``_RequestState``.\n         */\n        this._sendQueue = new MessagePacker(this._state, this._log);\n        this._sendQueueLongPoll = new MessagePacker(this._state, this._log);\n\n        /**\n         * Sent states are remembered until a response is received.\n         */\n        this._pendingState = new PendingState();\n\n        /**\n         * Responses must be acknowledged, and we can also batch these.\n         */\n        this._pendingAck = new Set();\n\n        /**\n         * Similar to pending_messages but only for the last acknowledges.\n         * These can't go in pending_messages because no acknowledge for them\n         * is received, but we may still need to resend their state on bad salts.\n         */\n        this._lastAcks = [];\n\n        /**\n         * Jump table from response ID to method that handles it\n         */\n\n        this._handlers = {\n            [RPCResult.CONSTRUCTOR_ID]: this._handleRPCResult.bind(this),\n            [MessageContainer.CONSTRUCTOR_ID]: this._handleContainer.bind(this),\n            [GZIPPacked.CONSTRUCTOR_ID]: this._handleGzipPacked.bind(this),\n            [Api.Pong.CONSTRUCTOR_ID]: this._handlePong.bind(this),\n            [Api.BadServerSalt.CONSTRUCTOR_ID]: this._handleBadServerSalt.bind(this),\n            [Api.BadMsgNotification.CONSTRUCTOR_ID]: this._handleBadNotification.bind(this),\n            [Api.MsgDetailedInfo.CONSTRUCTOR_ID]: this._handleDetailedInfo.bind(this),\n            [Api.MsgNewDetailedInfo.CONSTRUCTOR_ID]: this._handleNewDetailedInfo.bind(this),\n            [Api.NewSessionCreated.CONSTRUCTOR_ID]: this._handleNewSessionCreated.bind(this),\n            [Api.MsgsAck.CONSTRUCTOR_ID]: this._handleAck.bind(this),\n            [Api.FutureSalts.CONSTRUCTOR_ID]: this._handleFutureSalts.bind(this),\n            [Api.MsgsStateReq.CONSTRUCTOR_ID]: this._handleStateForgotten.bind(this),\n            [Api.MsgResendReq.CONSTRUCTOR_ID]: this._handleStateForgotten.bind(this),\n            [Api.MsgsAllInfo.CONSTRUCTOR_ID]: this._handleMsgAll.bind(this),\n        };\n    }\n\n    // Public API\n\n    logWithIndexCallback(level: 'debug' | 'log' | 'warn' | 'error') {\n        return (...args: unknown[]) => {\n            if (!this._getShouldDebugExportedSenders\n                || !this._getShouldDebugExportedSenders()) return;\n            // eslint-disable-next-line no-console\n            console[level](`[${this._isExported ? `idx=${this._senderIndex} ` : 'M '}dcId=${this._dcId}]`, ...args);\n        };\n    }\n\n    logWithIndex = {\n        debug: this.logWithIndexCallback('debug'),\n        log: this.logWithIndexCallback('log'),\n        warn: this.logWithIndexCallback('warn'),\n        error: this.logWithIndexCallback('error'),\n    };\n\n    getConnection(): Connection | undefined {\n        return this._isFallback ? this._fallbackConnection : this._connection;\n    }\n\n    /**\n     * Connects to the specified given connection using the given auth key.\n     * @param connection\n     * @param [force]\n     * @param fallbackConnection\n     * @returns {Promise<boolean>}\n     */\n    async connect(connection: Connection, force: boolean, fallbackConnection?: Connection) {\n        this.userDisconnected = false;\n\n        if (this._userConnected && !force) {\n            this._log.info('User is already connected!');\n            return false;\n        }\n        this.isConnecting = true;\n        this._isFallback = this._shouldForceHttpTransport && this._shouldAllowHttpTransport;\n        this._connection = connection;\n        this._fallbackConnection = fallbackConnection;\n\n        for (let attempt = 0; attempt < this._retries + this._retriesToFallback; attempt++) {\n            try {\n                if (attempt >= this._retriesToFallback && this._shouldAllowHttpTransport) {\n                    this._isFallback = true;\n                    this.logWithIndex.warn('Using fallback connection');\n                    this._log.warn('Using fallback connection');\n                }\n                this.logWithIndex.warn('Connecting...');\n                await this._connect(this.getConnection()!);\n                this.logWithIndex.warn('Connected!');\n                if (!this._isExported) {\n                    this._updateCallback?.(new UpdateConnectionState(UpdateConnectionState.connected));\n                }\n                break;\n            } catch (err) {\n                if (!this._isExported && attempt === 0) {\n                    this._updateCallback?.(new UpdateConnectionState(UpdateConnectionState.disconnected));\n                }\n                this._log.error(`${this._isFallback ? 'HTTP' : 'WebSocket'} connection failed attempt: ${attempt + 1}`);\n                // eslint-disable-next-line no-console\n                console.error(err);\n                await sleep(this._delay);\n            }\n        }\n        this.isConnecting = false;\n\n        if (this._isFallback && !this._shouldForceHttpTransport) {\n            void this.tryReconnectToMain();\n        }\n\n        return true;\n    }\n\n    async tryReconnectToMain() {\n        if (!this.isConnecting && this._isFallback && !this._isReconnectingToMain && !this.isReconnecting\n            && !this._shouldForceHttpTransport && !this._isExported) {\n            this._log.debug('Trying to reconnect to main connection');\n            this._isReconnectingToMain = true;\n            try {\n                await this._connection!.connect();\n                this._log.info('Reconnected to main connection');\n                this.logWithIndex.warn('Reconnected to main connection');\n                this.isReconnecting = true;\n                if (this._fallbackConnection) await this._disconnect(this._fallbackConnection);\n                await this.connect(this._connection!, true, this._fallbackConnection);\n                this.isReconnecting = false;\n                this._isReconnectingToMain = false;\n            } catch (e) {\n                this.isReconnecting = false;\n                this._isReconnectingToMain = false;\n                this._log.error(\n                    `Failed to reconnect to main connection, retrying in ${this._retryMainConnectionDelay}ms`,\n                );\n                await sleep(this._retryMainConnectionDelay);\n                void this.tryReconnectToMain();\n            }\n        } else {\n            await sleep(this._retryMainConnectionDelay);\n        }\n    }\n\n    isConnected() {\n        return this._userConnected;\n    }\n\n    /**\n     * Cleanly disconnects the instance from the network, cancels\n     * all pending requests, and closes the send and receive loops.\n     */\n    async disconnect() {\n        this.userDisconnected = true;\n        this.logWithIndex.warn('Disconnecting...');\n        const connection = this.getConnection();\n        if (!connection) return;\n        await this._disconnect(connection);\n    }\n\n    destroy() {\n        this._sendQueue.clear();\n    }\n\n    /**\n     *\n     This method enqueues the given request to be sent. Its send\n     state will be saved until a response arrives, and a ``Future``\n     that will be resolved when the response arrives will be returned:\n\n     .. code-block:: javascript\n\n     async def method():\n     # Sending (enqueued for the send loop)\n     future = sender.send(request)\n     # Receiving (waits for the receive loop to read the result)\n     result = await future\n\n     Designed like this because Telegram may send the response at\n     any point, and it can send other items while one waits for it.\n     Once the response for this future arrives, it is set with the\n     received result, quite similar to how a ``receive()`` call\n     would otherwise work.\n\n     Since the receiving part is \"built in\" the future, it's\n     impossible to await receive a result that was never sent.\n     * @param request\n     * @param abortSignal\n     * @param isLongPoll\n     * @returns {RequestState}\n     */\n    send<T extends CallableRequest>(request: T, abortSignal?: AbortSignal, isLongPoll = false) {\n        const state = new RequestState<T>(request, abortSignal);\n        if (!isLongPoll) {\n            this.logWithIndex.debug(`Send ${request.className}`);\n            this._sendQueue.append(state);\n        } else {\n            this._sendQueueLongPoll.append(state);\n        }\n        return state.promise;\n    }\n\n    addStateToQueue(state: RequestState) {\n        this._sendQueue.append(state);\n    }\n\n    async sendBeacon(request: CallableRequest) {\n        if (!this._userConnected || !(this._fallbackConnection instanceof HttpConnection)) {\n            throw new Error('Cannot send requests while disconnected');\n        }\n        const state = new RequestState(request, undefined);\n        const data = await this._sendQueue.getBeacon(state);\n        if (!data) return;\n        const encryptedData = await this._state.encryptMessageData(data);\n\n        postMessage({\n            type: 'sendBeacon',\n            data: encryptedData,\n            url: this._fallbackConnection.href,\n        });\n    }\n\n    /**\n     * Performs the actual connection, retrying, generating the\n     * authorization key if necessary, and starting the send and\n     * receive loops.\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _connect(connection: Connection) {\n        if (!connection.isConnected()) {\n            this._log.info('Connecting to {0}...'.replace('{0}', connection._ip));\n            await connection.connect();\n            this._log.debug('Connection success!');\n        }\n\n        if (!this.authKey.getKey()) {\n            const plain = new MtProtoPlainSender(connection, this._log);\n            this._log.debug('New auth_key attempt ...');\n            const res = await doAuthentication(plain, this._log);\n            this._log.debug('Generated new auth_key successfully');\n            await this.authKey.setKey(res.authKey);\n\n            this._state.timeOffset = res.timeOffset;\n\n            if (!this._isExported) {\n                this._updateCallback?.(new UpdateServerTimeOffset(this._state.timeOffset));\n            }\n\n            /**\n             * This is *EXTREMELY* important since we don't control\n             * external references to the authorization key, we must\n             * notify whenever we change it. This is crucial when we\n             * switch to different data centers.\n             */\n            if (this._authKeyCallback) {\n                await this._authKeyCallback(this.authKey, this._dcId);\n            }\n        } else {\n            this._authenticated = true;\n            this._log.debug('Already have an auth key ...');\n        }\n        this._userConnected = true;\n        this.isReconnecting = false;\n\n        if (!this._sendLoopHandle) {\n            this._log.debug('Starting send loop');\n            this._sendLoopHandle = this._sendLoop();\n        }\n\n        if (!this._recvLoopHandle) {\n            this._log.debug('Starting receive loop');\n            this._recvLoopHandle = this._recvLoop();\n        }\n\n        if (!this._longPollLoopHandle && connection.shouldLongPoll) {\n            this._log.debug('Starting long-poll loop');\n            this._longPollLoopHandle = this._longPollLoop();\n        }\n\n        // _disconnected only completes after manual disconnection\n        // or errors after which the sender cannot continue such\n        // as failing to reconnect or any unexpected error.\n\n        this._log.info('Connection to %s complete!'.replace('%s', connection.toString()));\n    }\n\n    async _disconnect(connection: Connection) {\n        if (!this._isExported) {\n            this._updateCallback?.(new UpdateConnectionState(UpdateConnectionState.disconnected));\n        }\n\n        if (connection === undefined) {\n            this._log.info('Not disconnecting (already have no connection)');\n            return;\n        }\n\n        this._log.info('Disconnecting from %s...'.replace('%s', connection.toString()));\n        this._userConnected = false;\n        this._log.debug('Closing current connection...');\n        this.logWithIndex.warn('Disconnecting');\n        await connection.disconnect();\n    }\n\n    async _longPollLoop() {\n        while (this._userConnected && !this.isReconnecting && this._isFallback\n            && this.getConnection()!.shouldLongPoll) {\n            await this._sendQueueLongPoll.wait();\n\n            const res = await this._sendQueueLongPoll.get();\n\n            if (this.isReconnecting || !this._isFallback) {\n                this._longPollLoopHandle = undefined;\n                return;\n            }\n\n            if (!res) {\n                continue;\n            }\n            let { data } = res;\n            const { batch } = res;\n            this._log.debug(`Encrypting ${batch.length} message(s) in ${data.length} bytes for sending`);\n\n            data = await this._state.encryptMessageData(data);\n\n            try {\n                await this._fallbackConnection?.send(data);\n            } catch (e: any) {\n                this._log.error(e);\n                this._log.info('Connection closed while sending data');\n                this._longPollLoopHandle = undefined;\n                this.isSendingLongPoll = false;\n                if (!this.userDisconnected) {\n                    this.reconnect();\n                }\n                return;\n            }\n\n            this.isSendingLongPoll = false;\n            this.checkLongPoll();\n        }\n\n        this._longPollLoopHandle = undefined;\n    }\n\n    /**\n     * This loop is responsible for popping items off the send\n     * queue, encrypting them, and sending them over the network.\n     * Besides `connect`, only this method ever sends data.\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _sendLoop() {\n        // Retry previous pending requests\n        this._sendQueue.prepend(this._pendingState.values());\n        this._pendingState.clear();\n\n        while (this._userConnected && !this.isReconnecting) {\n            const appendAcks = () => {\n                if (this._pendingAck.size) {\n                    const ack = new RequestState(new Api.MsgsAck({ msgIds: Array(...this._pendingAck) }));\n                    this._sendQueue.append(ack);\n                    this._lastAcks.push(ack);\n                    if (this._lastAcks.length >= 10) {\n                        this._lastAcks.shift();\n                    }\n                    this._pendingAck.clear();\n                }\n            };\n\n            appendAcks();\n\n            this.logWithIndex.debug(`Waiting for messages to send... ${this.isReconnecting}`);\n            this._log.debug(`Waiting for messages to send... ${this.isReconnecting}`);\n            // TODO Wait for the connection send queue to be empty?\n            // This means that while it's not empty we can wait for\n            // more messages to be added to the send queue.\n            await this._sendQueue.wait();\n\n            if (this._isFallback) {\n                // We don't long-poll on main loop, instead we have a separate loop for that\n                this.send(new Api.HttpWait({\n                    maxDelay: 0,\n                    waitAfter: 0,\n                    maxWait: 0,\n                }));\n            }\n\n            // If we've had new ACKs appended while waiting for messages to send, add them to queue\n            appendAcks();\n\n            const res = await this._sendQueue.get();\n\n            this.logWithIndex.debug(`Got ${res?.batch.length} message(s) to send`);\n\n            if (!res) {\n                continue;\n            }\n\n            let { data } = res;\n            const { batch } = res;\n\n            for (const state of batch) {\n                if (!Array.isArray(state)) {\n                    if (state.request.classType === 'request' && state.request.className !== 'HttpWait') {\n                        this._pendingState.set(state.msgId!, state);\n                    }\n                } else {\n                    for (const s of state) {\n                        if (s.request.classType === 'request' && s.request.className !== 'HttpWait') {\n                            this._pendingState.set(s.msgId, s);\n                        }\n                    }\n                }\n            }\n\n            if (this.isReconnecting) {\n                this.logWithIndex.debug('Reconnecting :(');\n                this._sendLoopHandle = undefined;\n                return;\n            }\n\n            this._log.debug(`Encrypting ${batch.length} message(s) in ${data.length} bytes for sending`);\n            this.logWithIndex.debug('Sending', batch.map((m) => m.request.className));\n\n            data = await this._state.encryptMessageData(data);\n\n            try {\n                await this.getConnection()!.send(data);\n            } catch (e: any) {\n                this.logWithIndex.debug(`Connection closed while sending data ${e}`);\n                this._log.error(e);\n                this._log.info('Connection closed while sending data');\n                this._sendLoopHandle = undefined;\n                if (!this.userDisconnected) {\n                    this.reconnect();\n                }\n                return;\n            } finally {\n                for (const state of batch) {\n                    if (!Array.isArray(state)) {\n                        if (state.request.className === 'HttpWait') {\n                            state.resolve?.();\n                        }\n                    } else {\n                        for (const s of state) {\n                            if (s.request.className === 'HttpWait') {\n                                state.resolve?.();\n                            }\n                        }\n                    }\n                }\n\n                this.logWithIndex.debug('Encrypted messages put in a queue to be sent');\n                this._log.debug('Encrypted messages put in a queue to be sent');\n            }\n        }\n\n        this._sendLoopHandle = undefined;\n    }\n\n    async _recvLoop() {\n        let body;\n        let message;\n\n        while (this._userConnected && !this.isReconnecting) {\n            this._log.debug('Receiving items from the network...');\n            this.logWithIndex.debug('Receiving items from the network...');\n            try {\n                body = await this.getConnection()!.recv();\n            } catch (e: any) {\n                // this._log.info('Connection closed while receiving data');\n                /** when the server disconnects us we want to reconnect */\n                if (!this.userDisconnected) {\n                    this._log.error(e);\n                    this._log.warn('Connection closed while receiving data');\n                    this.reconnect();\n                }\n                this._recvLoopHandle = undefined;\n                return;\n            }\n\n            try {\n                // TODO: Handle `DecryptedDataBlock` in calls like a regular `TLMessage` rather than `Buffer`\n                message = (await this._state.decryptMessageData(body)) as TLMessage;\n            } catch (e: any) {\n                this.logWithIndex.debug(`Error while receiving items from the network ${e.toString()}`);\n                if (e instanceof TypeNotFoundError) {\n                    // Received object which we don't know how to deserialize\n                    this._log.info(`Type ${e.invalidConstructorId} not found, remaining data ${e.remaining}`);\n                    continue;\n                } else if (e instanceof SecurityError) {\n                    // A step while decoding had the incorrect data. This message\n                    // should not be considered safe and it should be ignored.\n                    this._log.warn(`Security error while unpacking a received message: ${e}`);\n                    continue;\n                } else if (e instanceof InvalidBufferError) {\n                    // 404 means that the server has \"forgotten\" our auth key and we need to create a new one.\n                    if (e.code === 404) {\n                        this._handleBadAuthKey();\n                    } else {\n                        // this happens sometimes when telegram is having some internal issues.\n                        // reconnecting should be enough usually\n                        // since the data we sent and received is probably wrong now.\n                        this._log.warn(`Invalid buffer ${e.code} for dc ${this._dcId}`);\n                        this.reconnect();\n                    }\n                    this._recvLoopHandle = undefined;\n                    return;\n                } else {\n                    this._log.error('Unhandled error while receiving data');\n                    this._log.error(e);\n                    this.reconnect();\n                    this._recvLoopHandle = undefined;\n                    return;\n                }\n            }\n            try {\n                await this._processMessage(message);\n            } catch (e: any) {\n                // `RPCError` errors except for 'AUTH_KEY_UNREGISTERED' should be handled by the client\n                if (e instanceof RPCError) {\n                    if (e.errorMessage === 'AUTH_KEY_UNREGISTERED' || e.errorMessage === 'SESSION_REVOKED') {\n                        // 'AUTH_KEY_UNREGISTERED' for the main sender is thrown when unauthorized and should be ignored\n                        this._handleBadAuthKey(true);\n                    }\n                } else {\n                    this._log.error('Unhandled error while receiving data');\n                    this._log.error(e);\n                }\n            }\n\n            void this.checkLongPoll();\n        }\n\n        this._recvLoopHandle = undefined;\n    }\n\n    checkLongPoll() {\n        if (this.isSendingLongPoll || !this._isFallback) return;\n\n        this.isSendingLongPoll = true;\n        this.send(new Api.HttpWait({\n            maxDelay: LONGPOLL_MAX_DELAY,\n            waitAfter: LONGPOLL_WAIT_AFTER,\n            maxWait: LONGPOLL_MAX_WAIT,\n        }), undefined, true);\n    }\n\n    _handleBadAuthKey(shouldSkipForMain?: boolean) {\n        if (shouldSkipForMain && this._isMainSender) {\n            return;\n        }\n\n        this._log.warn(`Broken authorization key for dc ${this._dcId}, resetting...`);\n\n        if (this._isMainSender && !this._isExported) {\n            this._updateCallback?.(new UpdateConnectionState(UpdateConnectionState.broken));\n        } else if (!this._isMainSender && this._onConnectionBreak) {\n            this._onConnectionBreak(this._dcId);\n        }\n    }\n\n    // Response Handlers\n\n    /**\n     * Adds the given message to the list of messages that must be\n     * acknowledged and dispatches control to different ``_handle_*``\n     * method based on its type.\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _processMessage(message: TLMessage) {\n        if (message.obj.className === 'MsgsAck') return;\n        this.logWithIndex.debug(`Process message ${message.obj.className}`);\n\n        this._pendingAck.add(message.msgId);\n\n        if (this.getConnection()!.shouldLongPoll) {\n            this._sendQueue.setReady?.(true);\n        }\n        // eslint-disable-next-line require-atomic-updates\n        message.obj = await message.obj;\n        let handler = this._handlers[message.obj.CONSTRUCTOR_ID];\n        if (!handler) {\n            handler = this._handleUpdate.bind(this);\n        }\n\n        await handler(message);\n    }\n\n    /**\n     * Pops the states known to match the given ID from pending messages.\n     * This method should be used when the response isn't specific.\n     * @param msgId\n     * @returns {*[]}\n     * @private\n     */\n    _popStates(msgId: BigInt.BigInteger) {\n        const state = this._pendingState.getAndDelete(msgId);\n        if (state) {\n            return [state];\n        }\n\n        const toPop: BigInt.BigInteger[] = [];\n\n        for (const pendingState of this._pendingState.values()) {\n            if (pendingState.containerId?.equals(msgId)) {\n                toPop.push(pendingState.msgId!);\n            }\n        }\n\n        if (toPop.length) {\n            const temp = [];\n            for (const x of toPop) {\n                temp.push(this._pendingState.getAndDelete(x));\n            }\n            return temp;\n        }\n\n        for (const ack of this._lastAcks) {\n            if (ack.msgId === msgId) {\n                return [ack];\n            }\n        }\n\n        return [];\n    }\n\n    /**\n     * Handles the result for Remote Procedure Calls:\n     * rpc_result#f35c6d01 req_msg_id:long result:bytes = RpcResult;\n     * This is where the future results for sent requests are set.\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handleRPCResult(message: TLMessage) {\n        const result = message.obj;\n        const state = this._pendingState.getAndDelete(result.reqMsgId);\n        this._log.debug(`Handling RPC result for message ${result.reqMsgId}`);\n\n        if (!state) {\n            // TODO We should not get responses to things we never sent\n            // However receiving a File() with empty bytes is \"common\".\n            // See #658, #759 and #958. They seem to happen in a container\n            // which contain the real response right after.\n            try {\n                const reader = new BinaryReader(result.body);\n                if (!(reader.tgReadObject() instanceof Api.upload.File)) {\n                    throw new TypeNotFoundError(0, Buffer.alloc(0));\n                }\n            } catch (e) {\n                if (e instanceof TypeNotFoundError) {\n                    this._log.info(`Received response without parent request: ${result.body}`);\n                    return;\n                } else if (this._isFallback) {\n                    // If we're using HTTP transport, there might be a chance that the response comes through\n                    // multiple times if didn't send acknowledgment in time, so we should just ignore it\n                    return;\n                }\n\n                throw e;\n            }\n            return;\n        }\n\n        if (result.error) {\n            // eslint-disable-next-line new-cap\n            const error = RPCMessageToError(result.error, state.request);\n            this._sendQueue.append(new RequestState(new Api.MsgsAck({ msgIds: [state.msgId!] })));\n            state.reject?.(error);\n            throw error;\n        } else {\n            try {\n                const reader = new BinaryReader(result.body);\n                const read = state.request.readResult(reader);\n                this.logWithIndex.debug('Handling RPC result', read);\n                state.resolve?.(read);\n            } catch (err: any) {\n                state.reject?.(err);\n                throw err;\n            }\n        }\n    }\n\n    /**\n     * Processes the inner messages of a container with many of them:\n     * msg_container#73f1f8dc messages:vector<%Message> = MessageContainer;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _handleContainer(message: TLMessage) {\n        this._log.debug('Handling container');\n        for (const innerMessage of message.obj.messages) {\n            await this._processMessage(innerMessage);\n        }\n    }\n\n    /**\n     * Unpacks the data from a gzipped object and processes it:\n     * gzip_packed#3072cfa1 packed_data:bytes = Object;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _handleGzipPacked(message: TLMessage) {\n        this._log.debug('Handling gzipped data');\n        const reader = new BinaryReader(message.obj.data);\n        message.obj = reader.tgReadObject();\n        await this._processMessage(message);\n    }\n\n    _handleUpdate(message: TLMessage) {\n        if (message.obj.SUBCLASS_OF_ID !== 0x8af52aac) {\n            // crc32(b'Updates')\n            this._log.warn(`Note: ${message.obj.className} is not an update, not dispatching it`);\n            return;\n        }\n        this._log.debug(`Handling update ${message.obj.className}`);\n        if (!this._isExported) {\n            this._updateCallback?.(message.obj);\n        }\n    }\n\n    /**\n     * Handles pong results, which don't come inside a ``RPCResult``\n     * but are still sent through a request:\n     * pong#347773c5 msg_id:long ping_id:long = Pong;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handlePong(message: TLMessage) {\n        const pong = message.obj;\n\n        const newTimeOffset = this._state.updateTimeOffset(message.msgId);\n        if (!this._isExported) {\n            this._updateCallback?.(new UpdateServerTimeOffset(newTimeOffset));\n        }\n\n        this._log.debug(`Handling pong for message ${pong.msgId}`);\n        const state = this._pendingState.getAndDelete(pong.msgId);\n\n        // Todo Check result\n        if (state) {\n            state.resolve?.(pong);\n        }\n    }\n\n    /**\n     * Corrects the currently used server salt to use the right value\n     * before enqueuing the rejected message to be re-sent:\n     * bad_server_salt#edab447b bad_msg_id:long bad_msg_seqno:int\n     * error_code:int new_server_salt:long = BadMsgNotification;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handleBadServerSalt(message: TLMessage) {\n        const badSalt = message.obj;\n        this._log.debug(`Handling bad salt for message ${badSalt.badMsgId}`);\n        this._state.salt = badSalt.newServerSalt;\n        const states = this._popStates(badSalt.badMsgId);\n        this._sendQueue.extend(states);\n        this._log.debug(`${states.length} message(s) will be resent`);\n    }\n\n    /**\n     * Adjusts the current state to be correct based on the\n     * received bad message notification whenever possible:\n     * bad_msg_notification#a7eff811 bad_msg_id:long bad_msg_seqno:int\n     * error_code:int = BadMsgNotification;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handleBadNotification(message: TLMessage) {\n        const badMsg = message.obj;\n        const states = this._popStates(badMsg.badMsgId);\n        this._log.debug(`Handling bad msg ${JSON.stringify(badMsg)}`);\n        if ([16, 17].includes(badMsg.errorCode)) {\n            // Sent msg_id too low or too high (respectively).\n            // Use the current msg_id to determine the right time offset.\n            const newTimeOffset = this._state.updateTimeOffset(message.msgId);\n\n            if (!this._isExported) {\n                this._updateCallback?.(new UpdateServerTimeOffset(newTimeOffset));\n            }\n\n            this._log.info(`System clock is wrong, set time offset to ${newTimeOffset}s`);\n        } else if (badMsg.errorCode === 32) {\n            // msg_seqno too low, so just pump it up by some \"large\" amount\n            // TODO A better fix would be to start with a new fresh session ID\n            this._state._sequence += 64;\n        } else if (badMsg.errorCode === 33) {\n            // msg_seqno too high never seems to happen but just in case\n            this._state._sequence -= 16;\n        } else {\n            for (const state of states) {\n                state.reject(new BadMessageError(state.request, badMsg.errorCode));\n            }\n\n            return;\n        }\n        // Messages are to be re-sent once we've corrected the issue\n        this._sendQueue.extend(states);\n        this._log.debug(`${states.length} messages will be resent due to bad msg`);\n    }\n\n    /**\n     * Updates the current status with the received detailed information:\n     * msg_detailed_info#276d3ec6 msg_id:long answer_msg_id:long\n     * bytes:int status:int = MsgDetailedInfo;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handleDetailedInfo(message: TLMessage) {\n        // TODO https://goo.gl/VvpCC6\n        const msgId = message.obj.answerMsgId;\n        this._log.debug(`Handling detailed info for message ${msgId}`);\n        this._pendingAck.add(msgId);\n    }\n\n    /**\n     * Updates the current status with the received detailed information:\n     * msg_new_detailed_info#809db6df answer_msg_id:long\n     * bytes:int status:int = MsgDetailedInfo;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handleNewDetailedInfo(message: TLMessage) {\n        // TODO https://goo.gl/VvpCC6\n        const msgId = message.obj.answerMsgId;\n        this._log.debug(`Handling new detailed info for message ${msgId}`);\n        this._pendingAck.add(msgId);\n    }\n\n    /**\n     * Updates the current status with the received session information:\n     * new_session_created#9ec20908 first_msg_id:long unique_id:long\n     * server_salt:long = NewSession;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handleNewSessionCreated(message: TLMessage) {\n        // TODO https://goo.gl/LMyN7A\n        this._log.debug('Handling new session created');\n        this._state.salt = message.obj.serverSalt;\n    }\n\n    /**\n     * Handles a server acknowledge about our messages. Normally these can be ignored\n    */\n    _handleAck() {}\n\n    /**\n     * Handles future salt results, which don't come inside a\n     * ``rpc_result`` but are still sent through a request:\n     *     future_salts#ae500895 req_msg_id:long now:int\n     *     salts:vector<future_salt> = FutureSalts;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handleFutureSalts(message: TLMessage) {\n        // TODO save these salts and automatically adjust to the\n        // correct one whenever the salt in use expires.\n        this._log.debug(`Handling future salts for message ${message.msgId}`);\n        const state = this._pendingState.getAndDelete(message.msgId);\n\n        if (state) {\n            state.resolve?.(message.obj);\n        }\n    }\n\n    /**\n     * Handles both :tl:`MsgsStateReq` and :tl:`MsgResendReq` by\n     * enqueuing a :tl:`MsgsStateInfo` to be sent at a later point.\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handleStateForgotten(message: TLMessage) {\n        this._sendQueue.append(\n            new RequestState(\n                new Api.MsgsStateInfo({\n                    reqMsgId: message.msgId,\n                    info: String.fromCharCode(1).repeat(message.obj.msgIds),\n                }),\n            ),\n        );\n    }\n\n    /**\n     * Handles :tl:`MsgsAllInfo` by doing nothing (yet).\n     * used as part of the telegram protocol https://core.telegram.org/mtproto/service_messages_about_messages\n     * This message does not require an acknowledgment.\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _handleMsgAll(message: TLMessage) {\n    }\n\n    reconnect() {\n        if (this._userConnected && !this.isReconnecting) {\n            this.isReconnecting = true;\n            // TODO Should we set this?\n            // this._user_connected = false\n            // we want to wait a second between each reconnect try to not flood the server with reconnects\n            // in case of internal server issues.\n            sleep(1000)\n                .then(() => {\n                    this.logWithIndex.log('Reconnecting...');\n                    this._log.info('Started reconnecting');\n                    this._reconnect();\n                });\n        }\n    }\n\n    async _reconnect() {\n        const currentConnection = this._connection!;\n        const currentFallbackConnection = this._fallbackConnection;\n        this._log.debug('Closing current connection...');\n        try {\n            this.logWithIndex.warn('[Reconnect] Closing current connection...');\n            if (currentConnection) await this._disconnect(currentConnection);\n            if (currentFallbackConnection) await this._disconnect(currentFallbackConnection);\n        } catch (err: any) {\n            this._log.warn(err);\n        }\n\n        this._sendQueue.append(undefined);\n        this._state.reset();\n\n        // For some reason reusing existing connection caused stuck requests\n        // @ts-ignore\n        const newConnection = new currentConnection.constructor({\n            ip: currentConnection._ip,\n            port: currentConnection._port,\n            dcId: currentConnection._dcId,\n            loggers: currentConnection._log,\n            isTestServer: currentConnection._isTestServer,\n            isPremium: currentConnection._isPremium,\n        });\n        // @ts-ignore\n        const newFallbackConnection = new this._fallbackConnection.constructor({\n            ip: currentConnection._ip,\n            port: currentConnection._port,\n            dcId: currentConnection._dcId,\n            loggers: currentConnection._log,\n            isTestServer: currentConnection._isTestServer,\n            isPremium: currentConnection._isPremium,\n        });\n        await this.connect(newConnection, true, newFallbackConnection);\n\n        this.isReconnecting = false;\n        this._sendQueue.prepend(this._pendingState.values());\n        this._pendingState.clear();\n\n        if (this._autoReconnectCallback) {\n            await this._autoReconnectCallback();\n        }\n    }\n}\n","/**\n * Executes the authentication process with the Telegram servers.\n * @param sender a connected {MTProtoPlainSender}.\n * @param log\n * @returns {Promise<{authKey: *, timeOffset: *}>}\n */\n\nimport bigInt from 'big-integer';\n\nimport type MTProtoPlainSender from './MTProtoPlainSender';\n\nimport { IGE } from '../crypto/IGE';\nimport { SERVER_KEYS } from '../crypto/RSA';\nimport { SecurityError } from '../errors';\nimport { BinaryReader } from '../extensions';\nimport { Api } from '../tl';\n\nimport { AuthKey } from '../crypto/AuthKey';\nimport { Factorizator } from '../crypto/Factorizator';\nimport {\n    bufferXor,\n    generateKeyDataFromNonce,\n    generateRandomBytes,\n    getByteArray,\n    modExp,\n    readBigIntFromBuffer,\n    readBufferFromBigInt,\n    sha1,\n    sha256,\n    toSignedLittleBuffer,\n} from '../Helpers';\n\nconst RETRIES = 20;\n\nexport async function doAuthentication(sender: MTProtoPlainSender, log: any) {\n    // Step 1 sending: PQ Request, endianness doesn't matter since it's random\n    let bytes = generateRandomBytes(16);\n\n    const nonce = readBigIntFromBuffer(bytes, false, true);\n    const resPQ = await sender.send(new Api.ReqPqMulti({ nonce }));\n    log.debug('Starting authKey generation step 1');\n\n    if (!(resPQ instanceof Api.ResPQ)) {\n        throw new SecurityError(`Step 1 answer was ${resPQ}`);\n    }\n    if (resPQ.nonce.neq(nonce)) {\n        throw new SecurityError('Step 1 invalid nonce from server');\n    }\n    const pq = readBigIntFromBuffer(resPQ.pq, false, true);\n    log.debug('Finished authKey generation step 1');\n    // Step 2 sending: DH Exchange\n    const { p, q } = Factorizator.factorize(pq);\n\n    const pBuffer = getByteArray(p);\n    const qBuffer = getByteArray(q);\n\n    bytes = generateRandomBytes(32);\n    const newNonce = readBigIntFromBuffer(bytes, true, true);\n    const pqInnerData = new Api.PQInnerData({\n        pq: getByteArray(pq), // unsigned\n        p: pBuffer,\n        q: qBuffer,\n        nonce: resPQ.nonce,\n        serverNonce: resPQ.serverNonce,\n        newNonce,\n    }).getBytes();\n    if (pqInnerData.length > 144) {\n        throw new SecurityError('Step 1 invalid nonce from server');\n    }\n    let targetFingerprint;\n    let targetKey;\n    for (const fingerprint of resPQ.serverPublicKeyFingerprints) {\n        targetKey = SERVER_KEYS.get(fingerprint.toString());\n        if (targetKey !== undefined) {\n            targetFingerprint = fingerprint;\n            break;\n        }\n    }\n    if (targetFingerprint === undefined || targetKey === undefined) {\n        throw new SecurityError(\n            'Step 2 could not find a valid key for fingerprints',\n        );\n    }\n    // Value should be padded to be made 192 exactly\n    const padding = generateRandomBytes(192 - pqInnerData.length);\n    const dataWithPadding = Buffer.concat([pqInnerData, padding]);\n    const dataPadReversed = Buffer.from(dataWithPadding).reverse();\n\n    let encryptedData;\n    for (let i = 0; i < RETRIES; i++) {\n        const tempKey = generateRandomBytes(32);\n        const shaDigestKeyWithData = await sha256(Buffer.concat([tempKey, dataWithPadding]));\n        const dataWithHash = Buffer.concat([dataPadReversed, shaDigestKeyWithData]);\n\n        const ige = new IGE(tempKey, Buffer.alloc(32));\n        const aesEncrypted = ige.encryptIge(dataWithHash);\n        const tempKeyXor = bufferXor(tempKey, await sha256(aesEncrypted));\n\n        const keyAesEncrypted = Buffer.concat([tempKeyXor, aesEncrypted]);\n        const keyAesEncryptedInt = readBigIntFromBuffer(keyAesEncrypted, false, false);\n        if (keyAesEncryptedInt.greaterOrEquals(targetKey.n)) {\n            log.debug('Aes key greater than RSA. retrying');\n            continue;\n        }\n        const encryptedDataBuffer = modExp(keyAesEncryptedInt, bigInt(targetKey.e), targetKey.n);\n        encryptedData = readBufferFromBigInt(encryptedDataBuffer, 256, false, false);\n\n        break;\n    }\n    if (encryptedData === undefined) {\n        throw new SecurityError(\n            'Step 2 could create a secure encrypted key',\n        );\n    }\n    log.debug('Step 2 : Generated a secure aes encrypted data');\n\n    const serverDhParams = await sender.send(\n        new Api.ReqDHParams({\n            nonce: resPQ.nonce,\n            serverNonce: resPQ.serverNonce,\n            p: pBuffer,\n            q: qBuffer,\n            publicKeyFingerprint: targetFingerprint,\n            encryptedData,\n        }),\n    );\n\n    if (\n        !(\n            serverDhParams instanceof Api.ServerDHParamsOk\n            || serverDhParams instanceof Api.ServerDHParamsFail\n        )\n    ) {\n        throw new Error(`Step 2.1 answer was ${serverDhParams}`);\n    }\n    if (serverDhParams.nonce.neq(resPQ.nonce)) {\n        throw new SecurityError('Step 2 invalid nonce from server');\n    }\n\n    if (serverDhParams.serverNonce.neq(resPQ.serverNonce)) {\n        throw new SecurityError('Step 2 invalid server nonce from server');\n    }\n\n    if (serverDhParams instanceof Api.ServerDHParamsFail) {\n        const sh = await sha1(\n            toSignedLittleBuffer(newNonce, 32).slice(4, 20),\n        );\n        const nnh = readBigIntFromBuffer(sh, true, true);\n        if (serverDhParams.newNonceHash.neq(nnh)) {\n            throw new SecurityError('Step 2 invalid DH fail nonce from server');\n        }\n    }\n    if (!(serverDhParams instanceof Api.ServerDHParamsOk)) {\n        throw new Error(`Step 2.2 answer was ${serverDhParams}`);\n    }\n    log.debug('Finished authKey generation step 2');\n    log.debug('Starting authKey generation step 3');\n\n    // Step 3 sending: Complete DH Exchange\n    const { key, iv } = await generateKeyDataFromNonce(\n        resPQ.serverNonce,\n        newNonce,\n    );\n    if (serverDhParams.encryptedAnswer.length % 16 !== 0) {\n        // See PR#453\n        throw new SecurityError('Step 3 AES block size mismatch');\n    }\n    const ige = new IGE(key, iv);\n    const plainTextAnswer = ige.decryptIge(serverDhParams.encryptedAnswer);\n    const reader = new BinaryReader(plainTextAnswer);\n    const hash = reader.read(20); // hash sum\n    const serverDhInner = reader.tgReadObject();\n    if (!(serverDhInner instanceof Api.ServerDHInnerData)) {\n        throw new Error(`Step 3 answer was ${serverDhInner}`);\n    }\n    const sha1Answer = await sha1(serverDhInner.getBytes());\n    if (!(hash.equals(sha1Answer))) {\n        throw new SecurityError('Step 3 Invalid hash answer');\n    }\n\n    if (serverDhInner.nonce.neq(resPQ.nonce)) {\n        throw new SecurityError('Step 3 Invalid nonce in encrypted answer');\n    }\n    if (serverDhInner.serverNonce.neq(resPQ.serverNonce)) {\n        throw new SecurityError(\n            'Step 3 Invalid server nonce in encrypted answer',\n        );\n    }\n    if (serverDhInner.g !== 3 || serverDhInner.dhPrime.toString('hex') !== 'c71caeb9c6b1c9048e6c522f70f13'\n        + 'f73980d40238e3e21c14934d037563d930f48198a0aa7c14058229493d22530f4dbfa336f6e0ac925139543aed44cce7c3720fd5'\n        + '1f69458705ac68cd4fe6b6b13abdc9746512969328454f18faf8c595f642477fe96bb2a941d5bcd1d4ac8cc49880708fa9b378e3'\n        + 'c4f3a9060bee67cf9a4a4a695811051907e162753b56b0f6b410dba74d8a84b2a14b3144e0ef1284754fd17ed950d5965b4b9dd4'\n        + '6582db1178d169c6bc465b0d6ff9ca3928fef5b9ae4e418fc15e83ebea0f87fa9ff5eed70050ded2849f47bf959d956850ce9298'\n        + '51f0d8115f635b105ee2e4e15d04b2454bf6f4fadf034b10403119cd8e3b92fcc5b') {\n        throw new SecurityError('Step 3 invalid dhPrime or g');\n    }\n\n    const dhPrime = readBigIntFromBuffer(\n        serverDhInner.dhPrime,\n        false,\n        false,\n    );\n    const ga = readBigIntFromBuffer(serverDhInner.gA, false, false);\n    const timeOffset = serverDhInner.serverTime - Math.floor(Date.now() / 1000);\n    const b = readBigIntFromBuffer(\n        generateRandomBytes(256),\n        false,\n        false,\n    );\n    const gb = modExp(bigInt(serverDhInner.g), b, dhPrime);\n    const gab = modExp(ga, b, dhPrime);\n\n    if (ga.lesserOrEquals(1)) {\n        throw new SecurityError('Step 3 failed ga > 1 check');\n    }\n\n    if (gb.lesserOrEquals(1)) {\n        throw new SecurityError('Step 3 failed gb > 1 check');\n    }\n\n    if (ga.greater(dhPrime.minus(1))) {\n        throw new SecurityError('Step 3 failed ga > dh_prime - 1 check');\n    }\n\n    const toCheckAgainst = bigInt(2).pow(2048 - 64);\n    if (!(ga.greaterOrEquals(toCheckAgainst) && ga.lesserOrEquals(dhPrime.minus(toCheckAgainst)))) {\n        throw new SecurityError('Step 3 failed dh_prime - 2^{2048-64} < ga < 2^{2048-64} check');\n    }\n    if (!(gb.greaterOrEquals(toCheckAgainst) && gb.lesserOrEquals(dhPrime.minus(toCheckAgainst)))) {\n        throw new SecurityError('Step 3 failed dh_prime - 2^{2048-64} < gb < 2^{2048-64} check');\n    }\n\n    // Prepare client DH Inner Data\n    const clientDhInner = new Api.ClientDHInnerData({\n        nonce: resPQ.nonce,\n        serverNonce: resPQ.serverNonce,\n        retryId: bigInt.zero, // TODO Actual retry ID\n        gB: getByteArray(gb, false),\n    }).getBytes();\n\n    const clientDdhInnerHashed = Buffer.concat([\n        await sha1(clientDhInner),\n        clientDhInner,\n    ]);\n    // Encryption\n\n    const clientDhEncrypted = ige.encryptIge(clientDdhInnerHashed);\n    const dhGen = await sender.send(\n        new Api.SetClientDHParams({\n            nonce: resPQ.nonce,\n            serverNonce: resPQ.serverNonce,\n            encryptedData: clientDhEncrypted,\n        }),\n    );\n    const nonceTypes = [Api.DhGenOk, Api.DhGenRetry, Api.DhGenFail];\n    // TS being weird again.\n    const nonceTypesString = ['DhGenOk', 'DhGenRetry', 'DhGenFail'];\n    if (\n        !(\n            dhGen instanceof nonceTypes[0]\n            || dhGen instanceof nonceTypes[1]\n            || dhGen instanceof nonceTypes[2]\n        )\n    ) {\n        throw new Error(`Step 3.1 answer was ${dhGen}`);\n    }\n    const { name } = dhGen.constructor;\n    if (dhGen.nonce.neq(resPQ.nonce)) {\n        throw new SecurityError(`Step 3 invalid ${name} nonce from server`);\n    }\n    if (dhGen.serverNonce.neq(resPQ.serverNonce)) {\n        throw new SecurityError(\n            `Step 3 invalid ${name} server nonce from server`,\n        );\n    }\n    const authKey = new AuthKey();\n    await authKey.setKey(getByteArray(gab));\n\n    const nonceNumber = 1 + nonceTypesString.indexOf(dhGen.className);\n\n    const newNonceHash = await authKey.calcNewNonceHash(newNonce, nonceNumber);\n    // @ts-ignore\n    const dhHash = dhGen[`newNonceHash${nonceNumber}`];\n\n    if (dhHash.neq(newNonceHash)) {\n        throw new SecurityError('Step 3 invalid new nonce hash');\n    }\n\n    if (!(dhGen instanceof Api.DhGenOk)) {\n        throw new Error(`Step 3.2 answer was ${dhGen}`);\n    }\n    log.debug('Finished authKey generation step 3');\n\n    return { authKey, timeOffset };\n}\n","/**\n * Converts a Telegram's RPC Error to a Python error.\n * @param rpcError the RPCError instance\n * @param request the request that caused this error\n * @constructor the RPCError as a Python exception that represents this error\n */\nimport type { Api } from '../tl';\n\nimport { RPCError } from './RPCBaseErrors';\nimport { rpcErrorRe } from './RPCErrorList';\n\nexport function RPCMessageToError(\n    rpcError: Api.RpcError,\n    request: Api.AnyRequest,\n) {\n    for (const [msgRegex, Cls] of rpcErrorRe) {\n        const m = rpcError.errorMessage.match(msgRegex);\n        if (m) {\n            const capture = m.length === 2 ? parseInt(m[1], 10) : undefined;\n            return new Cls({ request, capture });\n        }\n    }\n    return new RPCError(rpcError.errorMessage, request, rpcError.errorCode);\n}\n\nexport * from './Common';\nexport * from './RPCBaseErrors';\nexport * from './RPCErrorList';\n","import type { Entity, EntityLike } from './types';\n\nimport { Api } from './tl';\n\n// eslint-disable-next-line max-len\nconst JPEG_HEADER = Buffer.from('ffd8ffe000104a46494600010100000100010000ffdb004300281c1e231e19282321232d2b28303c64413c37373c7b585d4964918099968f808c8aa0b4e6c3a0aadaad8a8cc8ffcbdaeef5ffffff9bc1fffffffaffe6fdfff8ffdb0043012b2d2d3c353c76414176f8a58ca5f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8ffc00011080000000003012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00', 'hex');\nconst JPEG_FOOTER = Buffer.from('ffd9', 'hex');\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _raiseCastFail(entity: any, target: string) {\n    throw new Error(`Cannot cast ${entity.className} to any kind of ${target}`);\n}\n\n/**\n Gets the input peer for the given \"entity\" (user, chat or channel).\n\n A ``TypeError`` is raised if the given entity isn't a supported type\n or if ``check_hash is True`` but the entity's ``accessHash is None``\n *or* the entity contains ``min`` information. In this case, the hash\n cannot be used for general purposes, and thus is not returned to avoid\n any issues which can derive from invalid access hashes.\n\n Note that ``check_hash`` **is ignored** if an input peer is already\n passed since in that case we assume the user knows what they're doing.\n This is key to getting entities by explicitly passing ``hash = 0``.\n\n * @param entity\n * @param allowSelf\n * @param checkHash\n */\nexport function getInputPeer(entity: Entity, allowSelf = true, checkHash = true): Api.TypeInputPeer {\n    if (entity.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n        return entity;\n    }\n\n    if (entity instanceof Api.User) {\n        if (entity.self && allowSelf) {\n            return new Api.InputPeerSelf();\n        } else if (entity.accessHash !== undefined || !checkHash) {\n            return new Api.InputPeerUser({\n                userId: entity.id,\n                accessHash: entity.accessHash!,\n            });\n        } else {\n            throw new Error('User without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof Api.Chat || entity instanceof Api.ChatEmpty\n        || entity instanceof Api.ChatForbidden) {\n        return new Api.InputPeerChat({ chatId: entity.id });\n    }\n    if (entity instanceof Api.Channel) {\n        if (entity.accessHash !== undefined || !checkHash) {\n            return new Api.InputPeerChannel({\n                channelId: entity.id,\n                accessHash: entity.accessHash!,\n            });\n        } else {\n            throw new TypeError('Channel without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof Api.ChannelForbidden) {\n        // \"channelForbidden are never min\", and since their hash is\n        // also not optional, we assume that this truly is the case.\n        return new Api.InputPeerChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash,\n        });\n    }\n\n    if (entity instanceof Api.InputUser) {\n        return new Api.InputPeerUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof Api.InputChannel) {\n        return new Api.InputPeerChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof Api.UserEmpty) {\n        return new Api.InputPeerEmpty();\n    }\n\n    _raiseCastFail(entity, 'InputPeer');\n    return new Api.InputPeerEmpty();\n}\n\n/**\n * Adds the JPG header and footer to a stripped image.\n * Ported from https://github.com/telegramdesktop/\n * tdesktop/blob/bec39d89e19670eb436dc794a8f20b657cb87c71/Telegram/SourceFiles/ui/image/image.cpp#L225\n\n * @param stripped{Buffer}\n * @returns {Buffer}\n */\nexport function strippedPhotoToJpg(stripped: Buffer) {\n    // Note: Changes here should update _stripped_real_length\n    if (stripped.length < 3 || stripped[0] !== 1) {\n        return stripped;\n    }\n    const header = Buffer.from(JPEG_HEADER);\n    header[164] = stripped[1];\n    header[166] = stripped[2];\n    return Buffer.concat([header, stripped.slice(3), JPEG_FOOTER]);\n}\n\n/**\n * Gets the appropriated part size when downloading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nexport function getDownloadPartSize(fileSize: number) {\n    if (fileSize <= 65536) { // 64KB\n        return 64;\n    }\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 1024;\n    }\n\n    throw new Error('File size too large');\n}\n\n/**\n * Gets the appropriated part size when uploading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nexport function getUploadPartSize(fileSize: number) {\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 512;\n    }\n\n    throw new Error('File size too large');\n}\n\nexport function getMessageId(message: number | Api.TypeMessage) {\n    if (message === undefined) {\n        return undefined;\n    }\n    if (typeof message === 'number') {\n        return message;\n    }\n    if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n        return message.id;\n    }\n    throw new Error(`Invalid message type: ${message.constructor.name}`);\n}\n\n/**\n * Gets the display name for the given :tl:`User`,\n :tl:`Chat` or :tl:`Channel`. Returns an empty string otherwise\n * @param entity\n */\nexport function getDisplayName(entity: Entity) {\n    if (entity instanceof Api.User) {\n        if (entity.lastName && entity.firstName) {\n            return `${entity.firstName} ${entity.lastName}`;\n        } else if (entity.firstName) {\n            return entity.firstName;\n        } else if (entity.lastName) {\n            return entity.lastName;\n        } else {\n            return '';\n        }\n    } else if (entity instanceof Api.Chat || entity instanceof Api.Channel) {\n        return entity.title;\n    }\n    return '';\n}\n\n/**\n * Returns the appropriate DC based on the id\n * @param dcId the id of the DC.\n * @param downloadDC whether to use -1 DCs or not\n * (These only support downloading/uploading and not creating a new AUTH key)\n * @return {{port: number, ipAddress: string, id: number}}\n */\nexport function getDC(dcId: number, downloadDC = false) {\n    // TODO Move to external config\n    switch (dcId) {\n        case 1:\n            return {\n                id: 1,\n                ipAddress: `zws1${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 2:\n            return {\n                id: 2,\n                ipAddress: `zws2${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 3:\n            return {\n                id: 3,\n                ipAddress: `zws3${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 4:\n            return {\n                id: 4,\n                ipAddress: `zws4${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 5:\n            return {\n                id: 5,\n                ipAddress: `zws5${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        default:\n            throw new Error(`Cannot find the DC with the ID of ${dcId}`);\n    }\n    // TODO chose based on current connection method\n    /*\n    if (!this._config) {\n        this._config = await this.invoke(new requests.help.GetConfig())\n    }\n    if (cdn && !this._cdnConfig) {\n        this._cdnConfig = await this.invoke(new requests.help.GetCdnConfig())\n        for (const pk of this._cdnConfig.publicKeys) {\n            addKey(pk.publicKey)\n        }\n    }\n    for (const DC of this._config.dcOptions) {\n        if (DC.id === dcId && Boolean(DC.ipv6) === this._useIPV6 && Boolean(DC.cdn) === cdn) {\n            return DC\n        }\n    } */\n}\n","import type { AuthKey } from '../crypto/AuthKey';\n\nexport default abstract class Session {\n    abstract setDC(dcId: number, serverAddress: string, port: number, isTestServer?: boolean): void;\n\n    abstract get dcId(): number;\n\n    abstract get serverAddress(): string;\n\n    abstract get port(): number;\n\n    abstract get isTestServer(): boolean | undefined;\n\n    abstract getAuthKey(dcId?: number): AuthKey;\n\n    abstract setAuthKey(authKey: AuthKey | undefined, dcId?: number): void;\n\n    abstract save(): void;\n\n    abstract load(): Promise<void>;\n\n    abstract delete(): void;\n}\n","import { AuthKey } from '../crypto/AuthKey';\nimport Session from './Abstract';\n\n// Dummy implementation\nexport default class MemorySession extends Session {\n    protected _serverAddress?: string;\n\n    protected _dcId: number;\n\n    protected _port?: number;\n\n    protected _takeoutId: undefined;\n\n    protected _entities: Set<any>;\n\n    protected _updateStates: {};\n\n    protected _isTestServer?: boolean;\n\n    constructor() {\n        super();\n\n        this._serverAddress = undefined;\n        this._dcId = 0;\n        this._port = undefined;\n        this._takeoutId = undefined;\n        this._isTestServer = false;\n\n        this._entities = new Set();\n        this._updateStates = {};\n    }\n\n    get dcId() {\n        return this._dcId;\n    }\n\n    get serverAddress() {\n        return this._serverAddress!;\n    }\n\n    get port() {\n        return this._port!;\n    }\n\n    get isTestServer() {\n        return this._isTestServer;\n    }\n\n    setDC(dcId: number, serverAddress: string, port: number, isTestServer?: boolean) {\n        this._dcId = dcId | 0;\n        this._serverAddress = serverAddress;\n        this._port = port;\n        this._isTestServer = isTestServer;\n    }\n\n    getAuthKey(dcId?: number | undefined): AuthKey {\n        return new AuthKey();\n    }\n\n    setAuthKey(authKey: AuthKey, dcId?: number) {}\n\n    async load(): Promise<void> {  }\n\n    save() {}\n\n    delete() {}\n}\n","import type { SessionData } from '../types';\n\nimport { AuthKey } from '../crypto/AuthKey';\nimport { getDC } from '../Utils';\nimport MemorySession from './Memory';\n\nexport default class CallbackSession extends MemorySession {\n    private _sessionData?: SessionData;\n\n    private _callback: (session?: SessionData) => void;\n\n    private _authKeys: Record<number, AuthKey>;\n\n    constructor(sessionData: SessionData | undefined, callback: (session?: SessionData) => void) {\n        super();\n\n        this._sessionData = sessionData;\n        this._callback = callback;\n\n        this._authKeys = {};\n    }\n\n    async load() {\n        if (!this._sessionData) {\n            return;\n        }\n\n        const {\n            mainDcId,\n            keys,\n            hashes,\n            isTest,\n        } = this._sessionData;\n        const {\n            ipAddress,\n            port,\n        } = getDC(mainDcId);\n\n        this.setDC(mainDcId, ipAddress, port, isTest, true);\n\n        await Promise.all(Object.keys(keys)\n            .map(async (dcIdStr) => {\n                const dcId = Number(dcIdStr);\n                const key = typeof keys[dcId] === 'string'\n                    ? Buffer.from(keys[dcId] as string, 'hex')\n                    : Buffer.from(keys[dcId]);\n\n                if (hashes[dcId]) {\n                    const hash = typeof hashes[dcId] === 'string'\n                        ? Buffer.from(hashes[dcId] as string, 'hex')\n                        : Buffer.from(hashes[dcId]);\n\n                    this._authKeys[dcId] = new AuthKey(key, hash);\n                } else {\n                    this._authKeys[dcId] = new AuthKey();\n                    await this._authKeys[dcId].setKey(key);\n                }\n            }));\n    }\n\n    setDC(dcId: number, serverAddress: string, port: number, isTestServer?: boolean, skipOnUpdate = false) {\n        this._dcId = dcId;\n        this._serverAddress = serverAddress;\n        this._port = port;\n        this._isTestServer = isTestServer;\n\n        delete this._authKeys[dcId];\n\n        if (!skipOnUpdate) {\n            void this._onUpdate();\n        }\n    }\n\n    getAuthKey(dcId = this._dcId) {\n        return this._authKeys[dcId];\n    }\n\n    setAuthKey(authKey: AuthKey, dcId = this._dcId) {\n        this._authKeys[dcId] = authKey;\n\n        void this._onUpdate();\n    }\n\n    getSessionData() {\n        const sessionData: SessionData = {\n            mainDcId: this._dcId,\n            keys: {},\n            hashes: {},\n            isTest: this._isTestServer || undefined,\n        };\n\n        Object\n            .keys(this._authKeys)\n            .forEach((dcIdStr) => {\n                const dcId = Number(dcIdStr);\n                const authKey = this._authKeys[dcId];\n                if (!authKey?._key) return;\n\n                sessionData.keys[dcId] = authKey._key.toString('hex');\n                sessionData.hashes[dcId] = authKey._hash!.toString('hex');\n            });\n\n        return sessionData;\n    }\n\n    _onUpdate() {\n        this._callback(this.getSessionData());\n    }\n\n    delete() {\n        this._callback(undefined);\n    }\n}\n","import BigInt from 'big-integer';\n\nimport { pbkdf2 } from './crypto/crypto';\nimport Api from './tl/api';\n\nimport {\n    bigIntMod,\n    generateRandomBytes,\n    modExp,\n    readBigIntFromBuffer,\n    readBufferFromBigInt,\n    sha256,\n} from './Helpers';\n\nconst SIZE_FOR_HASH = 256;\n\n/**\n *\n *\n * @param prime{BigInteger}\n * @param g{BigInteger}\n */\n\n/*\nWe don't support changing passwords yet\nfunction checkPrimeAndGoodCheck(prime, g) {\n    console.error('Unsupported function `checkPrimeAndGoodCheck` call. Arguments:', prime, g)\n\n    const goodPrimeBitsCount = 2048\n    if (prime < 0 || prime.bitLength() !== goodPrimeBitsCount) {\n        throw new Error(`bad prime count ${prime.bitLength()},expected ${goodPrimeBitsCount}`)\n    }\n    // TODO this is kinda slow\n    if (Factorizator.factorize(prime)[0] !== 1) {\n        throw new Error('give \"prime\" is not prime')\n    }\n    if (g.eq(BigInt(2))) {\n        if ((prime.remainder(BigInt(8))).neq(BigInt(7))) {\n            throw new Error(`bad g ${g}, mod8 ${prime % 8}`)\n        }\n    } else if (g.eq(BigInt(3))) {\n        if ((prime.remainder(BigInt(3))).neq(BigInt(2))) {\n            throw new Error(`bad g ${g}, mod3 ${prime % 3}`)\n        }\n        // eslint-disable-next-line no-empty\n    } else if (g.eq(BigInt(4))) {\n\n    } else if (g.eq(BigInt(5))) {\n        if (!([ BigInt(1), BigInt(4) ].includes(prime.remainder(BigInt(5))))) {\n            throw new Error(`bad g ${g}, mod8 ${prime % 5}`)\n        }\n    } else if (g.eq(BigInt(6))) {\n        if (!([ BigInt(19), BigInt(23) ].includes(prime.remainder(BigInt(24))))) {\n            throw new Error(`bad g ${g}, mod8 ${prime % 24}`)\n        }\n    } else if (g.eq(BigInt(7))) {\n        if (!([ BigInt(3), BigInt(5), BigInt(6) ].includes(prime.remainder(BigInt(7))))) {\n            throw new Error(`bad g ${g}, mod8 ${prime % 7}`)\n        }\n    } else {\n        throw new Error(`bad g ${g}`)\n    }\n    const primeSub1Div2 = (prime.subtract(BigInt(1))).divide(BigInt(2))\n    if (Factorizator.factorize(primeSub1Div2)[0] !== 1) {\n        throw new Error('(prime - 1) // 2 is not prime')\n    }\n}\n*/\n\nfunction checkPrimeAndGood(primeBytes: Buffer, g: number) {\n    const goodPrime = Buffer.from([\n        0xC7, 0x1C, 0xAE, 0xB9, 0xC6, 0xB1, 0xC9, 0x04, 0x8E, 0x6C, 0x52, 0x2F, 0x70, 0xF1, 0x3F, 0x73,\n        0x98, 0x0D, 0x40, 0x23, 0x8E, 0x3E, 0x21, 0xC1, 0x49, 0x34, 0xD0, 0x37, 0x56, 0x3D, 0x93, 0x0F,\n        0x48, 0x19, 0x8A, 0x0A, 0xA7, 0xC1, 0x40, 0x58, 0x22, 0x94, 0x93, 0xD2, 0x25, 0x30, 0xF4, 0xDB,\n        0xFA, 0x33, 0x6F, 0x6E, 0x0A, 0xC9, 0x25, 0x13, 0x95, 0x43, 0xAE, 0xD4, 0x4C, 0xCE, 0x7C, 0x37,\n        0x20, 0xFD, 0x51, 0xF6, 0x94, 0x58, 0x70, 0x5A, 0xC6, 0x8C, 0xD4, 0xFE, 0x6B, 0x6B, 0x13, 0xAB,\n        0xDC, 0x97, 0x46, 0x51, 0x29, 0x69, 0x32, 0x84, 0x54, 0xF1, 0x8F, 0xAF, 0x8C, 0x59, 0x5F, 0x64,\n        0x24, 0x77, 0xFE, 0x96, 0xBB, 0x2A, 0x94, 0x1D, 0x5B, 0xCD, 0x1D, 0x4A, 0xC8, 0xCC, 0x49, 0x88,\n        0x07, 0x08, 0xFA, 0x9B, 0x37, 0x8E, 0x3C, 0x4F, 0x3A, 0x90, 0x60, 0xBE, 0xE6, 0x7C, 0xF9, 0xA4,\n        0xA4, 0xA6, 0x95, 0x81, 0x10, 0x51, 0x90, 0x7E, 0x16, 0x27, 0x53, 0xB5, 0x6B, 0x0F, 0x6B, 0x41,\n        0x0D, 0xBA, 0x74, 0xD8, 0xA8, 0x4B, 0x2A, 0x14, 0xB3, 0x14, 0x4E, 0x0E, 0xF1, 0x28, 0x47, 0x54,\n        0xFD, 0x17, 0xED, 0x95, 0x0D, 0x59, 0x65, 0xB4, 0xB9, 0xDD, 0x46, 0x58, 0x2D, 0xB1, 0x17, 0x8D,\n        0x16, 0x9C, 0x6B, 0xC4, 0x65, 0xB0, 0xD6, 0xFF, 0x9C, 0xA3, 0x92, 0x8F, 0xEF, 0x5B, 0x9A, 0xE4,\n        0xE4, 0x18, 0xFC, 0x15, 0xE8, 0x3E, 0xBE, 0xA0, 0xF8, 0x7F, 0xA9, 0xFF, 0x5E, 0xED, 0x70, 0x05,\n        0x0D, 0xED, 0x28, 0x49, 0xF4, 0x7B, 0xF9, 0x59, 0xD9, 0x56, 0x85, 0x0C, 0xE9, 0x29, 0x85, 0x1F,\n        0x0D, 0x81, 0x15, 0xF6, 0x35, 0xB1, 0x05, 0xEE, 0x2E, 0x4E, 0x15, 0xD0, 0x4B, 0x24, 0x54, 0xBF,\n        0x6F, 0x4F, 0xAD, 0xF0, 0x34, 0xB1, 0x04, 0x03, 0x11, 0x9C, 0xD8, 0xE3, 0xB9, 0x2F, 0xCC, 0x5B,\n    ]);\n    if (goodPrime.equals(primeBytes)) {\n        if ([3, 4, 5, 7].includes(g)) {\n            return; // It's good\n        }\n    }\n    throw new Error('Changing passwords unsupported');\n    // checkPrimeAndGoodCheck(readBigIntFromBuffer(primeBytes, false), g)\n}\n\nfunction isGoodLarge(number: BigInt.BigInteger, p: BigInt.BigInteger): boolean {\n    return (number.greater(BigInt(0)) && (p.subtract(number)\n        .greater(BigInt(0))));\n}\n\nfunction numBytesForHash(number: Buffer): Buffer {\n    return Buffer.concat([Buffer.alloc(SIZE_FOR_HASH - number.length), number]);\n}\n\nfunction bigNumForHash(g: BigInt.BigInteger) {\n    return readBufferFromBigInt(g, SIZE_FOR_HASH, false);\n}\n\nfunction isGoodModExpFirst(modexp: BigInt.BigInteger, prime: BigInt.BigInteger): boolean {\n    const diff = prime.subtract(modexp);\n\n    const minDiffBitsCount = 2048 - 64;\n    const maxModExpSize = 256;\n\n    return !(\n        diff.lesser(BigInt(0))\n        || diff.bitLength().toJSNumber() < minDiffBitsCount\n        || modexp.bitLength().toJSNumber() < minDiffBitsCount\n        || Math.floor((modexp.bitLength().toJSNumber() + 7) / 8) > maxModExpSize\n    );\n}\n\nfunction xor(a: Buffer, b: Buffer) {\n    const length = Math.min(a.length, b.length);\n\n    for (let i = 0; i < length; i++) {\n        a[i] ^= b[i];\n    }\n\n    return a;\n}\n\nfunction pbkdf2sha512(password: Buffer, salt: Buffer, iterations: number): any {\n    return pbkdf2(password, salt, iterations);\n}\n\n/**\n *\n * @param algo {constructors.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow}\n * @param password\n * @returns {Buffer|*}\n */\nasync function computeHash(\n    algo: Api.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow, password: string,\n) {\n    const hash1 = await sha256(Buffer.concat([algo.salt1, Buffer.from(password, 'utf-8'), algo.salt1]));\n    const hash2 = await sha256(Buffer.concat([algo.salt2, hash1, algo.salt2]));\n    const hash3 = await pbkdf2sha512(hash2, algo.salt1, 100000);\n    return sha256(Buffer.concat([algo.salt2, hash3, algo.salt2]));\n}\n\nexport async function computeDigest(\n    algo: Api.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow, password: string,\n) {\n    try {\n        checkPrimeAndGood(algo.p, algo.g);\n    } catch (e) {\n        throw new Error('bad p/g in password');\n    }\n\n    const value = modExp(BigInt(algo.g),\n        readBigIntFromBuffer(await computeHash(algo, password), false),\n        readBigIntFromBuffer(algo.p, false));\n    return bigNumForHash(value);\n}\n\n/**\n *\n * @param request {constructors.account.Password}\n * @param password {string}\n */\nexport async function computeCheck(request: Api.account.Password, password: string) {\n    const algo = request.currentAlgo;\n    if (!(algo instanceof Api.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow)) {\n        throw new Error(`Unsupported password algorithm ${algo?.className}`);\n    }\n\n    const srpB = request.srp_B;\n    const srpId = request.srpId;\n    if (!srpB || !srpId) {\n        throw new Error(`Undefined srp_b  ${request}`);\n    }\n    const pwHash = await computeHash(algo, password);\n    const p = readBigIntFromBuffer(algo.p, false);\n    const { g } = algo;\n    const B = readBigIntFromBuffer(srpB, false);\n    try {\n        checkPrimeAndGood(algo.p, g);\n    } catch (e) {\n        throw new Error('bad /g in password');\n    }\n    if (!isGoodLarge(B, p)) {\n        throw new Error('bad b in check');\n    }\n    const x = readBigIntFromBuffer(pwHash, false);\n    const pForHash = numBytesForHash(algo.p);\n    const gForHash = bigNumForHash(BigInt(g));\n    const bForHash = numBytesForHash(srpB);\n    const gX = modExp(BigInt(g), x, p);\n    const k = readBigIntFromBuffer(await sha256(Buffer.concat([pForHash, gForHash])), false);\n    const kgX = bigIntMod(k.multiply(gX), p);\n    const generateAndCheckRandom = async () => {\n        const randomSize = 256;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const random = generateRandomBytes(randomSize);\n            const a = readBigIntFromBuffer(random, false);\n            const A = modExp(BigInt(g), a, p);\n            if (isGoodModExpFirst(A, p)) {\n                const aForHash = bigNumForHash(A);\n                const u = readBigIntFromBuffer(await sha256(Buffer.concat([aForHash, bForHash])), false);\n                if (u.greater(BigInt(0))) {\n                    return { a, aForHash, u };\n                }\n            }\n        }\n    };\n    const { a, aForHash, u } = await generateAndCheckRandom();\n    const gB = bigIntMod(B.subtract(kgX), p);\n    if (!isGoodModExpFirst(gB, p)) {\n        throw new Error('bad gB');\n    }\n\n    const ux = u.multiply(x);\n    const aUx = a.add(ux);\n    const S = modExp(gB, aUx, p);\n    const [K, pSha, gSha, salt1Sha, salt2Sha] = await Promise.all([\n        sha256(bigNumForHash(S)),\n        sha256(pForHash),\n        sha256(gForHash),\n        sha256(algo.salt1),\n        sha256(algo.salt2),\n    ]);\n    const M1 = await sha256(Buffer.concat([\n        xor(pSha, gSha),\n        salt1Sha,\n        salt2Sha,\n        aForHash,\n        bForHash,\n        K,\n    ]));\n\n    return new Api.InputCheckPasswordSRP({\n        srpId,\n        A: Buffer.from(aForHash),\n        M1,\n\n    });\n}\n","let serverTimeOffset = 0;\n\nexport function setServerTimeOffset(_serverTimeOffset: number) {\n  serverTimeOffset = _serverTimeOffset;\n}\n\nexport function getServerTimeOffset() {\n  return serverTimeOffset;\n}\n\nexport function getServerTime() {\n  return Math.floor(Date.now() / 1000) + serverTimeOffset;\n}\n","import type TelegramClient from './TelegramClient';\n\nimport Api from '../tl/api';\n\nimport { sleep } from '../Helpers';\nimport { computeCheck as computePasswordSrpCheck } from '../Password';\nimport { getDisplayName } from '../Utils';\nimport { Update } from './TelegramClient';\nimport { RPCError } from '../errors';\nimport { getServerTime } from '../../../util/serverTime';\n\nexport interface UserAuthParams {\n    phoneNumber: string | (() => Promise<string>);\n    webAuthTokenFailed: () => void;\n    phoneCode: (isCodeViaApp?: boolean) => Promise<string>;\n    password: (hint?: string, noReset?: boolean) => Promise<string>;\n    firstAndLastNames: () => Promise<[string, string?]>;\n    qrCode: (qrCode: { token: Buffer; expires: number }) => Promise<void>;\n    onError: (err: Error) => void;\n    forceSMS?: boolean;\n    initialMethod?: 'phoneNumber' | 'qrCode';\n    shouldThrowIfUnauthorized?: boolean;\n    webAuthToken?: string;\n    mockScenario?: string;\n}\n\nexport interface BotAuthParams {\n    botAuthToken: string;\n}\n\ninterface ApiCredentials {\n    apiId: number;\n    apiHash: string;\n}\n\nconst DEFAULT_INITIAL_METHOD = 'phoneNumber';\n\nexport async function authFlow(\n    client: TelegramClient,\n    apiCredentials: ApiCredentials,\n    authParams: UserAuthParams | BotAuthParams,\n) {\n    let me: Api.TypeUser;\n\n    if ('botAuthToken' in authParams) {\n        me = await signInBot(client, apiCredentials, authParams);\n    } else if ('webAuthToken' in authParams && authParams.webAuthToken) {\n        me = await signInUserWithWebToken(client, apiCredentials, authParams);\n    } else {\n        me = await signInUserWithPreferredMethod(client, apiCredentials, authParams);\n    }\n\n    client._log.info(`Signed in successfully as ${getDisplayName(me)}`);\n}\n\nexport function signInUserWithPreferredMethod(\n    client: TelegramClient, apiCredentials: ApiCredentials, authParams: UserAuthParams,\n): Promise<Api.TypeUser> {\n    const { initialMethod = DEFAULT_INITIAL_METHOD } = authParams;\n\n    if (initialMethod === 'phoneNumber') {\n        return signInUser(client, apiCredentials, authParams);\n    } else {\n        return signInUserWithQrCode(client, apiCredentials, authParams);\n    }\n}\n\nexport async function checkAuthorization(client: TelegramClient, shouldThrow = false) {\n    try {\n        await client.invoke(new Api.updates.GetState());\n        return true;\n    } catch (err: unknown) {\n        if ((err instanceof Error && err.message === 'Disconnect') || shouldThrow) throw err;\n        return false;\n    }\n}\n\nasync function signInUserWithWebToken(\n    client: TelegramClient, apiCredentials: ApiCredentials, authParams: UserAuthParams,\n): Promise<Api.TypeUser> {\n    try {\n        const { apiId, apiHash } = apiCredentials;\n        const sendResult = await client.invoke(new Api.auth.ImportWebTokenAuthorization({\n            webAuthToken: authParams.webAuthToken,\n            apiId,\n            apiHash,\n        }));\n\n        if (sendResult instanceof Api.auth.Authorization) {\n            return sendResult.user;\n        } else {\n            throw new Error('SIGN_UP_REQUIRED');\n        }\n    } catch (err: unknown) {\n        if (err instanceof RPCError && err.errorMessage === 'SESSION_PASSWORD_NEEDED') {\n            return signInWithPassword(client, apiCredentials, authParams, true);\n        } else {\n            client._log.error(`Failed to login with web token: ${err}`);\n            authParams.webAuthTokenFailed();\n            return signInUserWithPreferredMethod(client, apiCredentials, {\n                ...authParams,\n                webAuthToken: undefined,\n            });\n        }\n    }\n}\n\nasync function signInUser(\n    client: TelegramClient, apiCredentials: ApiCredentials, authParams: UserAuthParams,\n): Promise<Api.TypeUser> {\n    let phoneNumber;\n    let phoneCodeHash;\n    let isCodeViaApp = false;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        try {\n            if (typeof authParams.phoneNumber === 'function') {\n                try {\n                    phoneNumber = await authParams.phoneNumber();\n                } catch (err: unknown) {\n                    if (err instanceof Error && err.message === 'RESTART_AUTH_WITH_QR') {\n                        return signInUserWithQrCode(client, apiCredentials, authParams);\n                    }\n\n                    throw err;\n                }\n            } else {\n                phoneNumber = authParams.phoneNumber;\n            }\n            const sendCodeResult = await sendCode(client, apiCredentials, phoneNumber, authParams.forceSMS);\n            phoneCodeHash = sendCodeResult.phoneCodeHash;\n            isCodeViaApp = sendCodeResult.isCodeViaApp;\n\n            if (typeof phoneCodeHash !== 'string') {\n                throw new Error('Failed to retrieve phone code hash');\n            }\n\n            break;\n        } catch (err: any) {\n            if (typeof authParams.phoneNumber !== 'function') {\n                throw err;\n            }\n\n            authParams.onError(err);\n        }\n    }\n\n    let phoneCode;\n    let isRegistrationRequired = false;\n    let termsOfService;\n\n    // eslint-disable-next-line no-constant-condition\n    while (1) {\n        try {\n            try {\n                phoneCode = await authParams.phoneCode(isCodeViaApp);\n            } catch (err: unknown) {\n                // This is the support for changing phone number from the phone code screen.\n                if (err instanceof Error && err.message === 'RESTART_AUTH') {\n                    return signInUser(client, apiCredentials, authParams);\n                }\n            }\n\n            if (!phoneCode) {\n                throw new Error('Code is empty');\n            }\n\n            // May raise PhoneCodeEmptyError, PhoneCodeExpiredError,\n            // PhoneCodeHashEmptyError or PhoneCodeInvalidError.\n            const result = await client.invoke(new Api.auth.SignIn({\n                phoneNumber,\n                phoneCodeHash,\n                phoneCode,\n            }));\n\n            if (result instanceof Api.auth.AuthorizationSignUpRequired) {\n                isRegistrationRequired = true;\n                termsOfService = result.termsOfService;\n                break;\n            }\n\n            return result.user;\n        } catch (err: unknown) {\n            if (err instanceof RPCError && err.errorMessage === 'SESSION_PASSWORD_NEEDED') {\n                return signInWithPassword(client, apiCredentials, authParams);\n            } else if (err instanceof Error) {\n                authParams.onError(err);\n            } else {\n                console.warn('Unexpected error:', err);\n            }\n        }\n    }\n\n    if (isRegistrationRequired) {\n        // eslint-disable-next-line no-constant-condition\n        while (1) {\n            try {\n                const [firstName, lastName] = await authParams.firstAndLastNames();\n                if (!firstName) {\n                    throw new Error('First name is required');\n                }\n\n                const { user } = await client.invoke(new Api.auth.SignUp({\n                    phoneNumber,\n                    phoneCodeHash,\n                    firstName,\n                    lastName,\n                })) as Api.auth.Authorization;\n\n                if (termsOfService) {\n                    // This is a violation of Telegram rules: the user should be presented with and accept TOS.\n                    await client.invoke(new Api.help.AcceptTermsOfService({ id: termsOfService.id }));\n                }\n\n                return user;\n            } catch (err: any) {\n                authParams.onError(err);\n            }\n        }\n    }\n\n    authParams.onError(new Error('Auth failed'));\n    return signInUser(client, apiCredentials, authParams);\n}\n\nasync function signInUserWithQrCode(\n    client: TelegramClient, apiCredentials: ApiCredentials, authParams: UserAuthParams,\n): Promise<Api.TypeUser> {\n    let isScanningComplete = false;\n\n    const inputPromise = (async () => {\n        // eslint-disable-next-line no-constant-condition\n        while (1) {\n            if (isScanningComplete) {\n                break;\n            }\n\n            const result = await client.invoke(new Api.auth.ExportLoginToken({\n                apiId: Number(process.env.TELEGRAM_API_ID),\n                apiHash: process.env.TELEGRAM_API_HASH,\n                exceptIds: [],\n            }));\n            if (!(result instanceof Api.auth.LoginToken)) {\n                throw new Error('Unexpected');\n            }\n\n            const { token, expires } = result;\n\n            await Promise.race([\n                authParams.qrCode({ token, expires }),\n                sleep((expires - getServerTime()) * 1000),\n            ]);\n        }\n    })();\n\n    const updatePromise = new Promise<void>((resolve) => {\n        client.addEventHandler((update: Api.TypeUpdate) => {\n            if (update instanceof Api.UpdateLoginToken) {\n                resolve();\n            }\n        }, { build: (update: Update) => update });\n    });\n\n    try {\n        // Either we receive an update that QR is successfully scanned,\n        // or we receive a rejection caused by user going back to the regular auth form\n        await Promise.race([updatePromise, inputPromise]);\n    } catch (err: unknown) {\n        if (err instanceof Error && err.message === 'RESTART_AUTH') {\n            return await signInUser(client, apiCredentials, authParams);\n        }\n\n        throw err;\n    } finally {\n        isScanningComplete = true;\n    }\n\n    try {\n        const result2 = await client.invoke(new Api.auth.ExportLoginToken({\n            apiId: Number(process.env.TELEGRAM_API_ID),\n            apiHash: process.env.TELEGRAM_API_HASH,\n            exceptIds: [],\n        }));\n\n        if (result2 instanceof Api.auth.LoginTokenSuccess && result2.authorization instanceof Api.auth.Authorization) {\n            return result2.authorization.user;\n        } else if (result2 instanceof Api.auth.LoginTokenMigrateTo) {\n            await client._switchDC(result2.dcId);\n            const migratedResult = await client.invoke(new Api.auth.ImportLoginToken({\n                token: result2.token,\n            }));\n\n            if (migratedResult instanceof Api.auth.LoginTokenSuccess\n                && migratedResult.authorization instanceof Api.auth.Authorization) {\n                return migratedResult.authorization.user;\n            }\n        }\n    } catch (err: unknown) {\n        if (err instanceof RPCError && err.errorMessage === 'SESSION_PASSWORD_NEEDED') {\n            return signInWithPassword(client, apiCredentials, authParams);\n        }\n\n        throw err;\n    }\n\n    // This is a workaround for TypeScript (never actually reached)\n    // eslint-disable-next-line @typescript-eslint/no-throw-literal\n    throw undefined;\n}\n\nasync function sendCode(\n    client: TelegramClient, apiCredentials: ApiCredentials, phoneNumber: string, forceSMS = false,\n): Promise<{\n        phoneCodeHash: string;\n        isCodeViaApp: boolean;\n    }> {\n    try {\n        const { apiId, apiHash } = apiCredentials;\n        const sendResult = await client.invoke(new Api.auth.SendCode({\n            phoneNumber,\n            apiId,\n            apiHash,\n            settings: new Api.CodeSettings(),\n        }));\n\n        if (!(sendResult instanceof Api.auth.SentCode)) {\n            throw Error('Unexpected SentCodeSuccess');\n        }\n\n        // If we already sent a SMS, do not resend the phoneCode (hash may be empty)\n        if (!forceSMS || (sendResult.type instanceof Api.auth.SentCodeTypeSms)) {\n            return {\n                phoneCodeHash: sendResult.phoneCodeHash,\n                isCodeViaApp: sendResult.type instanceof Api.auth.SentCodeTypeApp,\n            };\n        }\n\n        const resendResult = await client.invoke(new Api.auth.ResendCode({\n            phoneNumber,\n            phoneCodeHash: sendResult.phoneCodeHash,\n        }));\n\n        if (!(resendResult instanceof Api.auth.SentCode)) {\n            throw Error('Unexpected SentCodeSuccess');\n        }\n\n        return {\n            phoneCodeHash: resendResult.phoneCodeHash,\n            isCodeViaApp: resendResult.type instanceof Api.auth.SentCodeTypeApp,\n        };\n    } catch (err: unknown) {\n        if (err instanceof RPCError && err.errorMessage === 'AUTH_RESTART') {\n            return sendCode(client, apiCredentials, phoneNumber, forceSMS);\n        } else {\n            throw err;\n        }\n    }\n}\n\nasync function signInWithPassword(\n    client: TelegramClient, apiCredentials: ApiCredentials, authParams: UserAuthParams, noReset = false,\n): Promise<Api.TypeUser> {\n    // eslint-disable-next-line no-constant-condition\n    while (1) {\n        try {\n            const passwordSrpResult = await client.invoke(new Api.account.GetPassword());\n            const password = await authParams.password(passwordSrpResult.hint, noReset);\n            if (!password) {\n                throw new Error('Password is empty');\n            }\n\n            const passwordSrpCheck = await computePasswordSrpCheck(passwordSrpResult, password);\n            const { user } = await client.invoke(new Api.auth.CheckPassword({\n                password: passwordSrpCheck,\n            })) as Api.auth.Authorization;\n\n            return user;\n        } catch (err: any) {\n            authParams.onError(err);\n        }\n    }\n\n    // eslint-disable-next-line no-unreachable\n    return undefined!; // Never reached (TypeScript fix)\n}\n\nasync function signInBot(client: TelegramClient, apiCredentials: ApiCredentials, authParams: BotAuthParams) {\n    const { apiId, apiHash } = apiCredentials;\n    const { botAuthToken } = authParams;\n\n    const { user } = await client.invoke(new Api.auth.ImportBotAuthorization({\n        apiId,\n        apiHash,\n        botAuthToken,\n    })) as Api.auth.Authorization;\n\n    return user;\n}\n","import Deferred from './Deferred';\n\nexport class Foreman {\n  private deferreds: Deferred[] = [];\n\n  private priorityDeferreds: Deferred[] = [];\n\n  activeWorkers = 0;\n\n  constructor(private maxWorkers: number) {\n  }\n\n  requestWorker(isPriority?: boolean) {\n    if (this.activeWorkers === this.maxWorkers) {\n      const deferred = new Deferred();\n      if (isPriority) {\n        this.priorityDeferreds.push(deferred);\n      } else {\n        this.deferreds.push(deferred);\n      }\n      return deferred.promise;\n    }\n\n    this.activeWorkers++;\n    return Promise.resolve();\n  }\n\n  releaseWorker() {\n    if (this.queueLength) {\n      const deferred = (this.priorityDeferreds.shift() || this.deferreds.shift())!;\n      deferred.resolve();\n    } else {\n      this.activeWorkers--;\n    }\n  }\n\n  get queueLength() {\n    return this.deferreds.length + this.priorityDeferreds.length;\n  }\n}\n","export default class LocalUpdatePremiumFloodWait {\n  constructor(public isUpload: boolean) {}\n}\n","import BigInt from 'big-integer';\n\nimport type TelegramClient from './TelegramClient';\n\nimport Deferred from '../../../util/Deferred';\nimport { Foreman } from '../../../util/foreman';\nimport { FloodPremiumWaitError, FloodWaitError, RPCError } from '../errors';\nimport Api from '../tl/api';\n\nimport LocalUpdatePremiumFloodWait from '../../../api/gramjs/updates/UpdatePremiumFloodWait';\nimport { sleep } from '../Helpers';\nimport { getDownloadPartSize } from '../Utils';\nimport type { SizeType } from './TelegramClient';\n\ninterface OnProgress {\n    isCanceled?: boolean;\n    (\n        progress: number, // Float between 0 and 1.\n        ...args: any[]\n    ): void;\n}\n\nexport interface DownloadFileParams {\n    fileSize?: number;\n    workers?: number;\n    partSizeKb?: number;\n    start?: number;\n    end?: number;\n    progressCallback?: OnProgress;\n    isPriority?: boolean;\n}\n\nexport type DownloadFileWithDcParams = DownloadFileParams & { dcId: number };\n\nexport interface DownloadMediaParams {\n    sizeType?: SizeType;\n    progressCallback?: OnProgress;\n}\n\n// Chunk sizes for `upload.getFile` must be multiple of the smallest size\nconst MIN_CHUNK_SIZE = 4096;\nconst DEFAULT_CHUNK_SIZE = 64; // kb\nconst ONE_MB = 1024 * 1024;\nconst DISCONNECT_SLEEP = 1000;\n\nconst NEW_CONNECTION_QUEUE_THRESHOLD = 5;\n\n// when the sender requests hangs for 60 second we will reimport\nconst SENDER_TIMEOUT = 60 * 1000;\n// Telegram may have server issues so we try several times\nconst SENDER_RETRIES = 5;\n\nclass FileView {\n    private type: 'memory' | 'opfs';\n\n    private size?: number;\n\n    private buffer?: Buffer;\n\n    private largeFile?: FileSystemFileHandle;\n\n    private largeFileAccessHandle?: FileSystemSyncAccessHandle;\n\n    constructor(size?: number) {\n        this.size = size;\n        // eslint-disable-next-line no-restricted-globals\n        this.type = (size && size > (self as any).maxBufferSize) ? 'opfs' : 'memory';\n    }\n\n    async init() {\n        if (this.type === 'opfs') {\n            if (!FileSystemFileHandle?.prototype.createSyncAccessHandle) {\n                throw new Error('`createSyncAccessHandle` is not available. Cannot download files larger than 2GB.');\n            }\n            const directory = await navigator.storage.getDirectory();\n            const downloadsFolder = await directory.getDirectoryHandle('downloads', { create: true });\n            this.largeFile = await downloadsFolder.getFileHandle(Math.random().toString(), { create: true });\n            this.largeFileAccessHandle = await this.largeFile.createSyncAccessHandle();\n        } else {\n            this.buffer = this.size ? Buffer.alloc(this.size) : Buffer.alloc(0);\n        }\n    }\n\n    write(data: Uint8Array, offset: number) {\n        if (this.type === 'opfs') {\n            this.largeFileAccessHandle!.write(data, { at: offset });\n        } else if (this.size) {\n            for (let i = 0; i < data.length; i++) {\n                if (offset + i >= this.buffer!.length) return;\n                this.buffer!.writeUInt8(data[i], offset + i);\n            }\n        } else {\n            this.buffer = Buffer.concat([this.buffer!, data]);\n        }\n    }\n\n    async getData(): Promise<Buffer | File> {\n        if (this.type === 'opfs') {\n            return this.largeFile!.getFile();\n        } else {\n            return Promise.resolve(this.buffer!);\n        }\n    }\n}\n\nexport async function downloadFile(\n    client: TelegramClient,\n    inputLocation: Api.TypeInputFileLocation,\n    fileParams: DownloadFileWithDcParams,\n    shouldDebugExportedSenders?: boolean,\n) {\n    const { dcId } = fileParams;\n    for (let i = 0; i < SENDER_RETRIES; i++) {\n        try {\n            return await downloadFile2(client, inputLocation, fileParams, shouldDebugExportedSenders);\n        } catch (err: unknown) {\n            if (err instanceof RPCError && (\n                err.errorMessage.startsWith('SESSION_REVOKED')\n                || err.errorMessage.startsWith('CONNECTION_NOT_INITED')\n            ) && i < SENDER_RETRIES - 1) {\n                await client._cleanupExportedSenders(dcId);\n            } else {\n                throw err;\n            }\n        }\n    }\n\n    return undefined;\n}\n\nconst MAX_CONCURRENT_CONNECTIONS = 3;\nconst MAX_CONCURRENT_CONNECTIONS_PREMIUM = 6;\nconst MAX_WORKERS_PER_CONNECTION = 10;\nconst MULTIPLE_CONNECTIONS_MIN_FILE_SIZE = 10485760; // 10MB\n\nconst foremans = Array(MAX_CONCURRENT_CONNECTIONS_PREMIUM).fill(undefined)\n    .map(() => new Foreman(MAX_WORKERS_PER_CONNECTION));\n\nasync function downloadFile2(\n    client: TelegramClient,\n    inputLocation: Api.TypeInputFileLocation,\n    fileParams: DownloadFileWithDcParams,\n    shouldDebugExportedSenders?: boolean,\n) {\n    let {\n        partSizeKb, end = 0,\n    } = fileParams;\n    const {\n        fileSize, dcId, progressCallback, isPriority, start = 0,\n    } = fileParams;\n\n    const fileId = 'id' in inputLocation ? inputLocation.id : undefined;\n    const logWithId = (...args: any[]) => {\n        if (!shouldDebugExportedSenders) return;\n        // eslint-disable-next-line no-console\n        console.log(`⬇️ [${fileId}/${fileParams.dcId}]`, ...args);\n    };\n\n    logWithId('Downloading file...');\n    const isPremium = Boolean(client.isPremium);\n\n    if (fileSize) {\n        end = end && end < fileSize ? end : fileSize - 1;\n    }\n\n    const rangeSize = end ? end - start + 1 : undefined;\n\n    if (!partSizeKb) {\n        partSizeKb = fileSize ? getDownloadPartSize(rangeSize || fileSize) : DEFAULT_CHUNK_SIZE;\n    }\n\n    const partSize = partSizeKb * 1024;\n    const partsCount = rangeSize ? Math.ceil(rangeSize / partSize) : 1;\n    const noParallel = !end;\n    const shouldUseMultipleConnections = Boolean(fileSize)\n        && fileSize >= MULTIPLE_CONNECTIONS_MIN_FILE_SIZE\n        && !noParallel;\n    let deferred: Deferred | undefined;\n\n    if (partSize % MIN_CHUNK_SIZE !== 0) {\n        throw new Error(`The part size must be evenly divisible by ${MIN_CHUNK_SIZE}`);\n    }\n\n    client._log.info(`Downloading file in chunks of ${partSize} bytes`);\n\n    const fileView = new FileView(rangeSize);\n    const promises: Promise<any>[] = [];\n    let offset = start;\n    // Used for files with unknown size and for manual cancellations\n    let hasEnded = false;\n\n    let progress = 0;\n    if (progressCallback) {\n        progressCallback(progress);\n    }\n\n    // Limit updates to one per file\n    let isPremiumFloodWaitSent = false;\n\n    // Allocate memory\n    await fileView.init();\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let limit = partSize;\n        let isPrecise = false;\n\n        if (Math.floor(offset / ONE_MB) !== Math.floor((offset + limit - 1) / ONE_MB)) {\n            limit = ONE_MB - (offset % ONE_MB);\n            isPrecise = true;\n        }\n\n        if (offset % MIN_CHUNK_SIZE !== 0 || limit % MIN_CHUNK_SIZE !== 0) {\n            isPrecise = true;\n        }\n\n        const senderIndex = getFreeForemanIndex(isPremium, shouldUseMultipleConnections);\n\n        await foremans[senderIndex].requestWorker(isPriority);\n\n        if (deferred) await deferred.promise;\n\n        if (noParallel) deferred = new Deferred();\n\n        if (hasEnded) {\n            foremans[senderIndex].releaseWorker();\n            break;\n        }\n        const logWithSenderIndex = (...args: any[]) => {\n            logWithId(`[${senderIndex}/${dcId}]`, ...args);\n        };\n\n        // eslint-disable-next-line no-loop-func, @typescript-eslint/no-loop-func\n        promises.push((async (offsetMemo: number) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                let sender;\n                try {\n                    let isDone = false;\n                    if (shouldDebugExportedSenders) {\n                        setTimeout(() => {\n                            if (isDone) return;\n                            logWithSenderIndex(`❗️️ getSender took too long ${offsetMemo}`);\n                        }, 8000);\n                    }\n                    sender = await client.getSender(dcId, senderIndex, isPremium);\n                    isDone = true;\n\n                    let isDone2 = false;\n                    if (shouldDebugExportedSenders) {\n                        setTimeout(() => {\n                            if (isDone2) return;\n                            logWithSenderIndex(`❗️️ sender.send took too long ${offsetMemo}`);\n                        }, 6000);\n                    }\n                    // sometimes a session is revoked and will cause this to hang.\n                    const result = (await Promise.race([\n                        sender.send(new Api.upload.GetFile({\n                            location: inputLocation,\n                            offset: BigInt(offsetMemo),\n                            limit,\n                            precise: isPrecise || undefined,\n                        })),\n                        sleep(SENDER_TIMEOUT).then(() => {\n                            // If we're on the main DC we just cancel the download and let the user retry later\n                            if (dcId === client.session.dcId) {\n                                logWithSenderIndex(`Download timed out ${offsetMemo}`);\n                                return Promise.reject(new Error('USER_CANCELED'));\n                            } else {\n                                logWithSenderIndex(`Download timed out [not main] ${offsetMemo}`);\n                                return Promise.reject(new Error('SESSION_REVOKED'));\n                            }\n                        }),\n                    ]))!;\n                    client.releaseExportedSender(sender);\n\n                    if (result instanceof Api.upload.FileCdnRedirect) {\n                        throw new Error('CDN download not supported');\n                    }\n\n                    isDone2 = true;\n                    if (progressCallback) {\n                        if (progressCallback.isCanceled) {\n                            throw new Error('USER_CANCELED');\n                        }\n\n                        progress += (1 / partsCount);\n                        logWithSenderIndex(`⬇️️ ${progress * 100}%`);\n                        progressCallback(progress);\n                    }\n\n                    if (!end && (result.bytes.length < limit)) {\n                        hasEnded = true;\n                    }\n\n                    foremans[senderIndex].releaseWorker();\n                    if (deferred) deferred.resolve();\n\n                    fileView.write(result.bytes, offsetMemo - start);\n\n                    return;\n                } catch (err) {\n                    if (sender && !sender.isConnected()) {\n                        await sleep(DISCONNECT_SLEEP);\n                        continue;\n                    } else if (err instanceof FloodWaitError) {\n                        if (err instanceof FloodPremiumWaitError && !isPremiumFloodWaitSent) {\n                            sender?._updateCallback(new LocalUpdatePremiumFloodWait(false));\n                            isPremiumFloodWaitSent = true;\n                        }\n                        await sleep(err.seconds * 1000);\n                        continue;\n                    }\n\n                    logWithSenderIndex(`Ended not gracefully ${offsetMemo}`);\n                    foremans[senderIndex].releaseWorker();\n                    if (deferred) deferred.resolve();\n\n                    hasEnded = true;\n                    if (sender) client.releaseExportedSender(sender);\n                    throw err;\n                }\n            }\n        })(offset));\n\n        offset += limit;\n\n        if (end && (offset > end)) {\n            break;\n        }\n    }\n    await Promise.all(promises);\n    return fileView.getData();\n}\n\nfunction getFreeForemanIndex(isPremium: boolean, forceNewConnection?: boolean) {\n    const availableConnections = isPremium ? MAX_CONCURRENT_CONNECTIONS_PREMIUM : MAX_CONCURRENT_CONNECTIONS;\n    let foremanIndex = 0;\n    let minQueueLength = Infinity;\n    for (let i = 0; i < availableConnections; i++) {\n        const foreman = foremans[i];\n        // If worker is free, return it\n        if (!foreman.queueLength) return i;\n\n        // Potentially create a new connection if the current queue is too long\n        if (!forceNewConnection && foreman.queueLength <= NEW_CONNECTION_QUEUE_THRESHOLD) {\n            return i;\n        }\n\n        // If every connection is equally busy, prefer the last one in the list\n        if (foreman.queueLength <= minQueueLength) {\n            foremanIndex = i;\n            minQueueLength = foreman.activeWorkers;\n        }\n    }\n\n    return foremanIndex;\n}\n","import type TelegramClient from './TelegramClient';\n\nimport { Foreman } from '../../../util/foreman';\nimport { FloodPremiumWaitError, FloodWaitError } from '../errors';\nimport Api from '../tl/api';\n\nimport LocalUpdatePremiumFloodWait from '../../../api/gramjs/updates/UpdatePremiumFloodWait';\nimport { generateRandomBytes, readBigIntFromBuffer, sleep } from '../Helpers';\nimport { getUploadPartSize } from '../Utils';\n\ninterface OnProgress {\n    isCanceled?: boolean;\n\n    // Float between 0 and 1.\n    (progress: number): void;\n}\n\nexport interface UploadFileParams {\n    file: File;\n    workers: number;\n    onProgress?: OnProgress;\n}\n\nconst KB_TO_BYTES = 1024;\nconst LARGE_FILE_THRESHOLD = 10 * 1024 * 1024;\nconst DISCONNECT_SLEEP = 1000;\nconst MAX_CONCURRENT_CONNECTIONS = 3;\nconst MAX_CONCURRENT_CONNECTIONS_PREMIUM = 6;\nconst MAX_WORKERS_PER_CONNECTION = 10;\n\nconst foremans = Array(MAX_CONCURRENT_CONNECTIONS_PREMIUM).fill(undefined)\n    .map(() => new Foreman(MAX_WORKERS_PER_CONNECTION));\n\nexport async function uploadFile(\n    client: TelegramClient,\n    fileParams: UploadFileParams,\n    shouldDebugExportedSenders?: boolean,\n): Promise<Api.InputFile | Api.InputFileBig> {\n    const { file, onProgress } = fileParams;\n\n    const isPremium = Boolean(client.isPremium);\n\n    const { name, size } = file;\n    const fileId = readBigIntFromBuffer(generateRandomBytes(8), true, true);\n    const isLarge = size > LARGE_FILE_THRESHOLD;\n\n    const logWithId = (...args: any[]) => {\n        if (!shouldDebugExportedSenders) return;\n        // eslint-disable-next-line no-console\n        console.log(`⬆️ [${fileId}]`, ...args);\n    };\n\n    logWithId('Uploading file...');\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n\n    // Pick the least busy foreman\n    // For some reason, fresh connections give out a higher speed for the first couple of seconds\n    // I have no idea why, but this may speed up the download of small files\n    const activeCounts = foremans.map(({ activeWorkers }) => activeWorkers);\n    let currentForemanIndex = activeCounts.indexOf(Math.min(...activeCounts));\n\n    let progress = 0;\n    if (onProgress) {\n        onProgress(progress);\n    }\n\n    // Limit updates to one per file\n    let isPremiumFloodWaitSent = false;\n\n    const promises: Promise<any>[] = [];\n\n    for (let i = 0; i < partCount; i++) {\n        const senderIndex = currentForemanIndex % (\n            isPremium ? MAX_CONCURRENT_CONNECTIONS_PREMIUM : MAX_CONCURRENT_CONNECTIONS\n        );\n\n        await foremans[senderIndex].requestWorker();\n\n        if (onProgress?.isCanceled) {\n            foremans[senderIndex].releaseWorker();\n            break;\n        }\n\n        const logWithSenderIndex = (...args: any[]) => {\n            logWithId(`[${senderIndex}]`, ...args);\n        };\n\n        const blobSlice = file.slice(i * partSize, (i + 1) * partSize);\n        // eslint-disable-next-line no-loop-func, @typescript-eslint/no-loop-func\n        promises.push((async (jMemo: number, blobSliceMemo: Blob) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                let sender;\n                try {\n                    // We always upload from the DC we are in\n                    let isDone = false;\n                    if (shouldDebugExportedSenders) {\n                        setTimeout(() => {\n                            if (isDone) return;\n                            logWithSenderIndex(`❗️️ getSender took too long j=${jMemo}`);\n                        }, 8000);\n                    }\n                    sender = await client.getSender(client.session.dcId, senderIndex, isPremium);\n                    isDone = true;\n\n                    let isDone2 = false;\n                    const partBytes = await blobSliceMemo.arrayBuffer();\n                    if (shouldDebugExportedSenders) {\n                        setTimeout(() => {\n                            if (isDone2) return;\n                            logWithSenderIndex(`❗️️ sender.send took too long j=${jMemo}`);\n                        }, 6000);\n                    }\n                    await sender.send(\n                        isLarge\n                            ? new Api.upload.SaveBigFilePart({\n                                fileId,\n                                filePart: jMemo,\n                                fileTotalParts: partCount,\n                                bytes: Buffer.from(partBytes),\n                            })\n                            : new Api.upload.SaveFilePart({\n                                fileId,\n                                filePart: jMemo,\n                                bytes: Buffer.from(partBytes),\n                            }),\n                    );\n                    client.releaseExportedSender(sender);\n                    isDone2 = true;\n                } catch (err) {\n                    logWithSenderIndex(`❗️️️Upload part failed ${err?.toString()} j=${jMemo}`);\n                    if (sender && !sender.isConnected()) {\n                        await sleep(DISCONNECT_SLEEP);\n                        continue;\n                    } else if (err instanceof FloodWaitError) {\n                        if (err instanceof FloodPremiumWaitError && !isPremiumFloodWaitSent) {\n                            sender?._updateCallback(new LocalUpdatePremiumFloodWait(true));\n                            isPremiumFloodWaitSent = true;\n                        }\n                        await sleep(err.seconds * 1000);\n                        continue;\n                    }\n                    foremans[senderIndex].releaseWorker();\n                    if (sender) client.releaseExportedSender(sender);\n\n                    throw err;\n                }\n\n                foremans[senderIndex].releaseWorker();\n\n                if (onProgress) {\n                    if (onProgress.isCanceled) {\n                        throw new Error('USER_CANCELED');\n                    }\n\n                    progress += (1 / partCount);\n                    logWithSenderIndex(`${progress * 100}%`);\n                    onProgress(progress);\n                }\n                break;\n            }\n        })(i, blobSlice));\n\n        currentForemanIndex++;\n    }\n\n    await Promise.all(promises);\n\n    return isLarge\n        ? new Api.InputFileBig({\n            id: fileId,\n            parts: partCount,\n            name,\n        })\n        : new Api.InputFile({\n            id: fileId,\n            parts: partCount,\n            name,\n            md5Checksum: '', // This is not a \"flag\", so not sure if we can make it optional.\n        });\n}\n","import os from 'os';\nimport bigInt from 'big-integer';\nimport { Logger } from '../extensions';\nimport { getRandomInt, sleep } from '../Helpers';\nimport MemorySession from '../sessions/Memory';\nimport Session from '../sessions/Abstract';\nimport { LAYER } from '../tl/AllTLObjects';\nimport { Api } from '../tl';\nimport {\n    ConnectionTCPObfuscated,\n    MTProtoSender,\n    UpdateConnectionState,\n    HttpConnection,\n    Connection,\n    UpdateServerTimeOffset,\n} from '../network';\nimport { UserAuthParams, authFlow, checkAuthorization } from './auth';\nimport { DownloadFileParams, DownloadFileWithDcParams, DownloadMediaParams, downloadFile } from './downloadFile';\nimport { UploadFileParams, uploadFile } from './uploadFile';\nimport {\n    updateTwoFaSettings,\n    getTmpPassword,\n    getCurrentPassword,\n    TwoFaParams,\n    TmpPasswordResult,\n    PasswordResult,\n} from './2fa';\nimport RequestState from '../network/RequestState';\nimport Deferred from '../../../util/Deferred';\nimport { getDC, getInputPeer, strippedPhotoToJpg } from '../Utils';\nimport { AuthKey } from '../crypto/AuthKey';\nimport {\n    FloodTestPhoneWaitError,\n    FloodWaitError,\n    MsgWaitError,\n    NetworkMigrateError,\n    PhoneMigrateError,\n    RPCError,\n    ServerError,\n    TimedOutError,\n    UserMigrateError,\n} from '../errors';\nimport { UpdatePts } from '../../../api/gramjs/updates/UpdatePts';\nimport LocalUpdatePremiumFloodWait from '../../../api/gramjs/updates/UpdatePremiumFloodWait';\n\ntype TelegramClientParams = {\n    connection: typeof Connection;\n    fallbackConnection: typeof Connection;\n    useIPV6: boolean;\n    timeout: number;\n    requestRetries: number;\n    connectionRetries: number;\n    connectionRetriesToFallback: number;\n    retryDelay: number;\n    retryMainConnectionDelay: number;\n    autoReconnect: boolean;\n    sequentialUpdates: boolean;\n    floodSleepLimit: number;\n    deviceModel: string;\n    systemVersion: string;\n    appVersion: string;\n    langCode: string;\n    langPack: string;\n    systemLangCode: string;\n    baseLogger: string | Logger;\n    useWSS: boolean;\n    additionalDcsDisabled: boolean;\n    dcId: number;\n    isTestServerRequested: boolean;\n    shouldAllowHttpTransport: boolean;\n    shouldForceHttpTransport: boolean;\n    shouldDebugExportedSenders: boolean;\n};\n\ntype TimeoutId = ReturnType<typeof setTimeout>;\n\nexport type Update = (\n    Api.TypeUpdate | Api.TypeUpdates\n    | UpdateServerTimeOffset | UpdateConnectionState | UpdatePts | LocalUpdatePremiumFloodWait\n) & { _entities?: (Api.TypeUser | Api.TypeChat)[] };\ntype EventBuilder = {\n    build: (update: Update) => Update;\n}\n\nconst DEFAULT_DC_ID = 2;\nconst DEFAULT_WEBDOCUMENT_DC_ID = 4;\nconst EXPORTED_SENDER_RECONNECT_TIMEOUT = 1000; // 1 sec\nconst EXPORTED_SENDER_RELEASE_TIMEOUT = 30000; // 30 sec\nconst WEBDOCUMENT_REQUEST_PART_SIZE = 131072; // 128kb\n\nconst PING_INTERVAL = 3000; // 3 sec\nconst PING_TIMEOUT = 5000; // 5 sec\nconst PING_FAIL_ATTEMPTS = 3;\nconst PING_FAIL_INTERVAL = 100; // ms\n\n// An unusually long interval is a sign of returning from background mode...\nconst PING_INTERVAL_TO_WAKE_UP = 5000; // 5 sec\n// ... so we send a quick \"wake-up\" ping to confirm than connection was dropped ASAP\nconst PING_WAKE_UP_TIMEOUT = 3000; // 3 sec\n// We also send a warning to the user even a bit more quickly\nconst PING_WAKE_UP_WARNING_TIMEOUT = 1000; // 1 sec\n\nconst PING_DISCONNECT_DELAY = 60000; // 1 min\n\n// All types, sorted by size\nconst sizeTypes = ['u', 'v', 'w', 'y', 'd', 'x', 'c', 'm', 'b', 'a', 's', 'f', 'i', 'j'] as const;\nexport type SizeType = typeof sizeTypes[number];\n\nclass TelegramClient {\n    static DEFAULT_OPTIONS: Partial<TelegramClientParams> = {\n        connection: ConnectionTCPObfuscated,\n        fallbackConnection: HttpConnection,\n        useIPV6: false,\n        timeout: 10,\n        requestRetries: 5,\n        connectionRetries: Infinity,\n        connectionRetriesToFallback: 1,\n        retryDelay: 1000,\n        retryMainConnectionDelay: 10000,\n        autoReconnect: true,\n        sequentialUpdates: false,\n        floodSleepLimit: 60,\n        deviceModel: undefined,\n        systemVersion: undefined,\n        appVersion: undefined,\n        langCode: 'en',\n        langPack: 'weba',\n        systemLangCode: 'en',\n        baseLogger: 'gramjs',\n        useWSS: false,\n        additionalDcsDisabled: false,\n        dcId: DEFAULT_DC_ID,\n        isTestServerRequested: false,\n        shouldAllowHttpTransport: false,\n        shouldForceHttpTransport: false,\n        shouldDebugExportedSenders: false,\n    };\n\n    private _args: TelegramClientParams;\n\n    public session: Session;\n\n    public apiHash: string;\n\n    public apiId: number;\n\n    public defaultDcId: number;\n\n    private _useIPV6: boolean;\n\n    private _shouldForceHttpTransport: boolean;\n\n    private _shouldAllowHttpTransport: boolean;\n\n    private _shouldDebugExportedSenders: boolean;\n\n    _log: Logger;\n\n    private floodSleepLimit: number;\n\n    private _connection: typeof Connection;\n\n    private _fallbackConnection: typeof Connection;\n\n    private _sender?: MTProtoSender;\n\n    private _eventBuilders: [EventBuilder, CallableFunction][];\n\n    private _requestRetries: number;\n\n    private _connectionRetries: number;\n\n    private _connectionRetriesToFallback: number;\n\n    private _retryDelay: number;\n\n    private _retryMainConnectionDelay: number;\n\n    private _timeout: number;\n\n    private _autoReconnect: boolean;\n\n    private _config?: Api.Config;\n\n    private _exportedSenderPromises: Record<number, Record<number, Promise<MTProtoSender> | undefined>> = {};\n    private _exportedSenderRefCounter: Record<number, Record<number, number>> = {};\n    private _waitingForAuthKey: Record<number, Promise<void> | undefined> = {};\n    private _exportedSenderReleaseTimeouts: Record<number, Record<number, TimeoutId | undefined>> = {};\n    private _loopStarted = false;\n    private _isSwitchingDc = false;\n    private _destroyed = false;\n    private _connectedDeferred = new Deferred();\n    private pingCallback?: () => Promise<void>;\n\n    private _initWith: (x: unknown) => Api.InvokeWithLayer;\n\n    isPremium = false;\n    private _lastRequest = Date.now();\n\n    constructor(\n        session: Session,\n        apiId?: number,\n        apiHash?: string,\n        opts: Partial<TelegramClientParams> = TelegramClient.DEFAULT_OPTIONS,\n    ) {\n        if (!apiId || !apiHash || !Number.isFinite(apiId)) {\n            throw Error('Your API ID or Hash are invalid. Please read \"Requirements\" on README.md');\n        }\n        const args = { ...TelegramClient.DEFAULT_OPTIONS, ...opts } as TelegramClientParams;\n        this.apiId = apiId;\n        this.apiHash = apiHash;\n        this.defaultDcId = args.dcId || DEFAULT_DC_ID;\n        this._useIPV6 = args.useIPV6;\n        this._shouldForceHttpTransport = args.shouldForceHttpTransport;\n        this._shouldAllowHttpTransport = args.shouldAllowHttpTransport;\n        this._shouldDebugExportedSenders = args.shouldDebugExportedSenders;\n        // this._entityCache = new Set()\n        if (typeof args.baseLogger === 'string') {\n            this._log = new Logger();\n        } else {\n            this._log = args.baseLogger;\n        }\n        // Determine what session we will use\n        if (typeof session === 'string' || !session) {\n            try {\n                throw new Error('not implemented');\n            } catch (e: unknown) {\n                session = new MemorySession();\n            }\n        } else if (!(session instanceof Session)) {\n            throw new Error('The given session must be str or a session instance');\n        }\n        this.session = session;\n\n        this.floodSleepLimit = args.floodSleepLimit;\n        this._eventBuilders = [];\n\n        this._requestRetries = args.requestRetries;\n        this._connectionRetries = args.connectionRetries;\n        this._connectionRetriesToFallback = args.connectionRetriesToFallback;\n        this._retryDelay = args.retryDelay || 0;\n        this._retryMainConnectionDelay = args.retryMainConnectionDelay || 0;\n\n        this._timeout = args.timeout;\n        this._autoReconnect = args.autoReconnect;\n\n        this._connection = args.connection;\n        this._fallbackConnection = args.fallbackConnection;\n        // TODO add proxy support\n\n        this._initWith = (x: unknown) => {\n            return new Api.InvokeWithLayer({\n                layer: LAYER,\n                query: new Api.InitConnection({\n                    apiId: this.apiId,\n                    deviceModel: args.deviceModel || os.type()\n                        .toString() || 'Unknown',\n                    systemVersion: args.systemVersion || os.release()\n                        .toString() || '1.0',\n                    appVersion: args.appVersion || '1.0',\n                    langCode: args.langCode,\n                    langPack: args.langPack,\n                    systemLangCode: args.systemLangCode,\n                    query: x,\n                    proxy: undefined, // no proxies yet.\n                }),\n            });\n        };\n\n        this._args = args;\n    }\n\n    // region Connecting\n\n    /**\n     * Connects to the Telegram servers, executing authentication if required.\n     * Note that authenticating to the Telegram servers is not the same as authenticating\n     * the app, which requires to send a code first.\n     * @returns {Promise<void>}\n     */\n    async connect() {\n        await this._initSession();\n\n        if (this._sender === undefined) {\n            // only init sender once to avoid multiple loops.\n            this._sender = new MTProtoSender(this.session.getAuthKey(), {\n                logger: this._log,\n                dcId: this.session.dcId,\n                retries: this._connectionRetries,\n                retriesToFallback: this._connectionRetriesToFallback,\n                shouldForceHttpTransport: this._shouldForceHttpTransport,\n                shouldAllowHttpTransport: this._shouldAllowHttpTransport,\n                delay: this._retryDelay,\n                retryMainConnectionDelay: this._retryMainConnectionDelay,\n                autoReconnect: this._autoReconnect,\n                connectTimeout: this._timeout,\n                authKeyCallback: this._authKeyCallback.bind(this),\n                updateCallback: this._handleUpdate.bind(this),\n                getShouldDebugExportedSenders: this.getShouldDebugExportedSenders.bind(this),\n                isMainSender: true,\n            });\n        }\n\n        const connection = new this._connection({\n            ip: this.session.serverAddress,\n            port: this.session.port,\n            dcId: this.session.dcId,\n            loggers: this._log,\n            isTestServer: this.session.isTestServer,\n        });\n        const fallbackConnection = new this._fallbackConnection({\n            ip: this.session.serverAddress,\n            port: this.session.port,\n            dcId: this.session.dcId,\n            loggers: this._log,\n            isTestServer: this.session.isTestServer,\n        });\n\n        const newConnection = await this._sender.connect(connection, false, fallbackConnection);\n        if (!newConnection) {\n            // we're already connected so no need to reset auth key.\n            if (!this._loopStarted) {\n                this._updateLoop();\n                this._loopStarted = true;\n            }\n            return;\n        }\n\n        this.session.setAuthKey(this._sender.authKey);\n        await this._sender.send(this._initWith(\n            new Api.help.GetConfig(),\n        ));\n\n        if (!this._loopStarted) {\n            this._updateLoop();\n            this._loopStarted = true;\n        }\n        this._connectedDeferred.resolve();\n        this._isSwitchingDc = false;\n\n        // Prepare file connection on current DC to speed up initial media loading\n        const mediaSender = await this._borrowExportedSender(this.session.dcId, false, undefined, 0, this.isPremium);\n        if (mediaSender) this.releaseExportedSender(mediaSender);\n    }\n\n    async _initSession() {\n        await this.session.load();\n\n        if (!this.session.serverAddress || (this.session.serverAddress.includes(':') !== this._useIPV6)) {\n            const DC = getDC(this.defaultDcId);\n            // TODO Fill IP addresses for when `this._useIPV6` is used\n            this.session.setDC(\n                this.defaultDcId, DC.ipAddress, this._args.useWSS ? 443 : 80, this._args.isTestServerRequested,\n            );\n        }\n    }\n\n    setPingCallback(callback: () => Promise<void>) {\n        this.pingCallback = callback;\n    }\n\n    async setForceHttpTransport(forceHttpTransport: boolean) {\n        this._shouldForceHttpTransport = forceHttpTransport;\n        await this.disconnect();\n        this._sender = undefined;\n        await this.connect();\n    }\n\n    async setAllowHttpTransport(allowHttpTransport: boolean) {\n        this._shouldAllowHttpTransport = allowHttpTransport;\n        await this.disconnect();\n        this._sender = undefined;\n        await this.connect();\n    }\n\n    setShouldDebugExportedSenders(shouldDebugExportedSenders: boolean) {\n        this._shouldDebugExportedSenders = shouldDebugExportedSenders;\n    }\n\n    getShouldDebugExportedSenders() {\n        return this._shouldDebugExportedSenders;\n    }\n\n    async _updateLoop() {\n        let lastPongAt;\n\n        const sender = this._sender;\n        if (!sender) {\n            throw new Error('Sender is not initialized');\n        }\n\n        while (!this._destroyed) {\n            await sleep(PING_INTERVAL);\n            if (sender.isReconnecting || this._isSwitchingDc) {\n                lastPongAt = undefined;\n                continue;\n            }\n\n            try {\n                const ping = () => {\n                    if (this._destroyed) {\n                        return undefined;\n                    }\n                    return sender.send(new Api.PingDelayDisconnect({\n                        pingId: bigInt(getRandomInt(Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER)),\n                        disconnectDelay: PING_DISCONNECT_DELAY,\n                    }));\n                };\n\n                const pingAt = Date.now();\n                const lastInterval = lastPongAt ? pingAt - lastPongAt : undefined;\n\n                if (!lastInterval || lastInterval < PING_INTERVAL_TO_WAKE_UP) {\n                    await attempts(() => timeout(ping, PING_TIMEOUT), PING_FAIL_ATTEMPTS, PING_FAIL_INTERVAL);\n                } else {\n                    let wakeUpWarningTimeout: TimeoutId | undefined = setTimeout(() => {\n                        this._handleUpdate(new UpdateConnectionState(UpdateConnectionState.disconnected));\n                        wakeUpWarningTimeout = undefined;\n                    }, PING_WAKE_UP_WARNING_TIMEOUT);\n\n                    await timeout(ping, PING_WAKE_UP_TIMEOUT);\n\n                    if (wakeUpWarningTimeout) {\n                        clearTimeout(wakeUpWarningTimeout);\n                        wakeUpWarningTimeout = undefined;\n                    }\n\n                    this._handleUpdate(new UpdateConnectionState(UpdateConnectionState.connected));\n                }\n\n                lastPongAt = Date.now();\n            } catch (err) {\n                // eslint-disable-next-line no-console\n                console.warn(err);\n\n                lastPongAt = undefined;\n\n                if (sender.isReconnecting || this._isSwitchingDc) {\n                    continue;\n                }\n                if (this._destroyed) {\n                    break;\n                }\n                sender.reconnect();\n            }\n\n            // We need to send some content-related request at least hourly\n            // for Telegram to keep delivering updates, otherwise they will\n            // just stop even if we're connected. Do so every 30 minutes.\n\n            if (Date.now() - this._lastRequest > 30 * 60 * 1000) {\n                try {\n                    await this.pingCallback?.();\n                } catch (e: unknown) {\n                    // we don't care about errors here\n                }\n\n                lastPongAt = undefined;\n            }\n        }\n        await this.disconnect();\n    }\n\n    /**\n     * Disconnects from the Telegram server\n     * @returns {Promise<void>}\n     */\n    async disconnect() {\n        await this._sender?.disconnect();\n\n        await Promise.all(\n            Object.values(this._exportedSenderPromises)\n                .map((promises) => {\n                    return Object.values(promises).map((promise) => {\n                        return promise?.then((sender) => {\n                            return sender?.disconnect();\n                        });\n                    });\n                }).flat(),\n        );\n\n        Object.values(this._exportedSenderReleaseTimeouts).forEach((timeouts) => {\n            Object.values(timeouts).forEach((releaseTimeout) => {\n                clearTimeout(releaseTimeout);\n            });\n        });\n\n        this._exportedSenderRefCounter = {};\n        this._exportedSenderPromises = {};\n        this._waitingForAuthKey = {};\n    }\n\n    /**\n     * Disconnects all senders and removes all handlers\n     * @returns {Promise<void>}\n     */\n    async destroy() {\n        this._destroyed = true;\n\n        try {\n            await this.disconnect();\n            this._sender?.destroy();\n        } catch (err) {\n            // Do nothing\n        }\n\n        this.session.delete();\n        this._eventBuilders = [];\n    }\n\n    async _switchDC(newDc: number) {\n        if (!this._sender) {\n            throw new Error('Sender is not initialized');\n        }\n\n        this._log.info(`Reconnecting to new data center ${newDc}`);\n        const DC = getDC(newDc);\n        const isTestServer = this.session.isTestServer || this._args.isTestServerRequested;\n        this.session.setDC(newDc, DC.ipAddress, DC.port, isTestServer);\n        // authKey's are associated with a server, which has now changed\n        // so it's not valid anymore. Set to None to force recreating it.\n        await this._sender.authKey.setKey(undefined);\n        this.session.setAuthKey(undefined);\n        this._isSwitchingDc = true;\n        await this.disconnect();\n        this._sender = undefined;\n        return this.connect();\n    }\n\n    _authKeyCallback(authKey: AuthKey, dcId: number) {\n        this.session.setAuthKey(authKey, dcId);\n    }\n\n    // endregion\n    // export region\n\n    async _cleanupExportedSender(dcId: number, index: number) {\n        if (this.session.dcId !== dcId) {\n            this.session.setAuthKey(undefined, dcId);\n        }\n        // eslint-disable-next-line no-console\n        if (this._shouldDebugExportedSenders) console.log(`🧹 Cleanup idx=${index} dcId=${dcId}`);\n        const sender = await this._exportedSenderPromises[dcId][index];\n        delete this._exportedSenderPromises[dcId][index];\n        delete this._exportedSenderRefCounter[dcId][index];\n        await sender?.disconnect();\n    }\n\n    async _cleanupExportedSenders(dcId: number) {\n        const promises = Object.values(this._exportedSenderPromises[dcId]);\n        if (!promises.length) {\n            return;\n        }\n\n        if (this.session.dcId !== dcId) {\n            this.session.setAuthKey(undefined, dcId);\n        }\n\n        this._exportedSenderPromises[dcId] = {};\n        this._exportedSenderRefCounter[dcId] = {};\n\n        await Promise.all(promises.map(async (promise) => {\n            const sender = await promise;\n            await sender?.disconnect();\n        }));\n    }\n\n    async _connectSender(sender: MTProtoSender, dcId: number, index?: number, isPremium = false) {\n        // if we don't already have an auth key we want to use normal DCs not -1\n        let hasAuthKey = Boolean(sender.authKey.getKey());\n        let firstConnectResolver: (() => void) | undefined;\n\n        if (!hasAuthKey) {\n            if (this._waitingForAuthKey[dcId]) {\n                await this._waitingForAuthKey[dcId];\n\n                const authKey = this.session.getAuthKey(dcId);\n\n                hasAuthKey = Boolean(sender.authKey?.getKey());\n                if (hasAuthKey) {\n                    await sender.authKey.setKey(authKey.getKey());\n                }\n            } else {\n                this._waitingForAuthKey[dcId] = new Promise((resolve) => {\n                    firstConnectResolver = resolve;\n                });\n            }\n        }\n\n        const dc = getDC(dcId, hasAuthKey);\n\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                await sender.connect(new this._connection({\n                    ip: dc.ipAddress,\n                    port: dc.port,\n                    dcId,\n                    loggers: this._log,\n                    isTestServer: this.session.isTestServer,\n                    // Premium DCs are not stable for obtaining auth keys, so need to we first connect to regular ones\n                    isPremium: hasAuthKey ? isPremium : false,\n                }), false, new this._fallbackConnection({\n                    ip: dc.ipAddress,\n                    port: dc.port,\n                    dcId,\n                    loggers: this._log,\n                    isTestServer: this.session.isTestServer,\n                    isPremium: hasAuthKey ? isPremium : false,\n                }));\n\n                if (this.session.dcId !== dcId && !sender._authenticated) {\n                    // Prevent another connection from trying to export the auth key while we're doing it\n                    await navigator.locks.request('GRAMJS_AUTH_EXPORT', async () => {\n                        this._log.info(`Exporting authorization for data center ${dc.ipAddress}`);\n                        const auth = await this.invoke(new Api.auth.ExportAuthorization({ dcId }));\n\n                        const req = this._initWith(new Api.auth.ImportAuthorization({\n                            id: auth.id,\n                            bytes: auth.bytes,\n                        }));\n                        await sender.send(req);\n                        sender._authenticated = true;\n                    });\n                }\n\n                sender._dcId = dcId;\n                sender.userDisconnected = false;\n\n                if (firstConnectResolver) {\n                    firstConnectResolver();\n                    delete this._waitingForAuthKey[dcId];\n                }\n\n                if (this._shouldDebugExportedSenders) {\n                    // eslint-disable-next-line no-console\n                    console.warn(`✅ Connected to exported sender idx=${index} dc=${dcId}`);\n                }\n\n                return sender;\n            } catch (err: any) {\n                if (this._shouldDebugExportedSenders) {\n                    // eslint-disable-next-line no-console\n                    console.error(`☠️ ERROR! idx=${index} dcId=${dcId} ${err.message}`);\n                }\n                // eslint-disable-next-line no-console\n                console.error(err);\n\n                await sleep(1000);\n                await sender.disconnect();\n            }\n        }\n    }\n\n    releaseExportedSender(sender: MTProtoSender) {\n        const dcId = sender._dcId;\n        const index = sender._senderIndex;\n\n        if (!this._exportedSenderRefCounter[dcId]) return;\n        if (!this._exportedSenderRefCounter[dcId][index]) return;\n\n        this._exportedSenderRefCounter[dcId][index] -= 1;\n\n        if (this._exportedSenderRefCounter[dcId][index] <= 0) {\n            if (!this._exportedSenderReleaseTimeouts[dcId]) this._exportedSenderReleaseTimeouts[dcId] = {};\n\n            this._exportedSenderReleaseTimeouts[dcId][index] = setTimeout(() => {\n                // eslint-disable-next-line no-console\n                if (this._shouldDebugExportedSenders) console.log(`[CC] [idx=${index} dcId=${dcId}] 🚪 Release`);\n                sender.disconnect();\n                this._exportedSenderReleaseTimeouts[dcId][index] = undefined;\n                this._exportedSenderPromises[dcId][index] = undefined;\n            }, EXPORTED_SENDER_RELEASE_TIMEOUT);\n        }\n    }\n\n    async _borrowExportedSender(\n        dcId: number, shouldReconnect?: boolean, existingSender?: MTProtoSender, index?: number, isPremium?: boolean,\n    ): Promise<MTProtoSender> {\n        const i = index || 0;\n\n        if (!this._exportedSenderPromises[dcId]) this._exportedSenderPromises[dcId] = {};\n        if (!this._exportedSenderRefCounter[dcId]) this._exportedSenderRefCounter[dcId] = {};\n\n        if (!this._exportedSenderPromises[dcId][i] || shouldReconnect) {\n            if (this._shouldDebugExportedSenders) {\n                // eslint-disable-next-line no-console\n                console.warn(`🕒 Connecting to exported sender idx=${i} dc=${dcId}`\n                    + ` ${shouldReconnect ? '(reconnect)' : ''}`);\n            }\n            this._exportedSenderRefCounter[dcId][i] = 0;\n            this._exportedSenderPromises[dcId][i] = this._connectSender(\n                existingSender || this._createExportedSender(dcId, i),\n                dcId,\n                index,\n                isPremium,\n            );\n        }\n\n        let sender;\n        try {\n            sender = await this._exportedSenderPromises[dcId][i];\n\n            if (!sender?.isConnected()) {\n                if (sender?.isConnecting) {\n                    await sleep(EXPORTED_SENDER_RECONNECT_TIMEOUT);\n                    return this._borrowExportedSender(dcId, false, sender, i, isPremium);\n                } else {\n                    return this._borrowExportedSender(dcId, true, sender, i, isPremium);\n                }\n            }\n        } catch (err) {\n            // eslint-disable-next-line no-console\n            console.error(err);\n\n            return this._borrowExportedSender(dcId, true, undefined, i, isPremium);\n        }\n\n        this._exportedSenderRefCounter[dcId][i] += 1;\n        if (!this._exportedSenderReleaseTimeouts[dcId]) this._exportedSenderReleaseTimeouts[dcId] = {};\n        if (this._exportedSenderReleaseTimeouts[dcId][i]) {\n            clearTimeout(this._exportedSenderReleaseTimeouts[dcId][i]);\n            this._exportedSenderReleaseTimeouts[dcId][i] = undefined;\n        }\n\n        return sender;\n    }\n\n    _createExportedSender(dcId: number, index: number) {\n        return new MTProtoSender(this.session.getAuthKey(dcId), {\n            logger: this._log,\n            dcId,\n            senderIndex: index,\n            retries: this._connectionRetries,\n            retriesToFallback: this._connectionRetriesToFallback,\n            delay: this._retryDelay,\n            retryMainConnectionDelay: this._retryMainConnectionDelay,\n            shouldForceHttpTransport: this._shouldForceHttpTransport,\n            shouldAllowHttpTransport: this._shouldAllowHttpTransport,\n            autoReconnect: this._autoReconnect,\n            connectTimeout: this._timeout,\n            authKeyCallback: this._authKeyCallback.bind(this),\n            isMainSender: dcId === this.session.dcId,\n            isExported: true,\n            updateCallback: this._handleUpdate.bind(this),\n            getShouldDebugExportedSenders: this.getShouldDebugExportedSenders.bind(this),\n            onConnectionBreak: () => this._cleanupExportedSender(dcId, index),\n        });\n    }\n\n    getSender(dcId: number, index?: number, isPremium?: boolean) {\n        return dcId\n            ? this._borrowExportedSender(dcId, undefined, undefined, index, isPremium)\n            : Promise.resolve(this._sender!);\n    }\n\n    // end region\n\n    // download region\n\n    /**\n     * Complete flow to download a file.\n     * @param inputLocation {Api.InputFileLocation}\n     * @param [args[partSizeKb] {number}]\n     * @param [args[fileSize] {number}]\n     * @param [args[progressCallback] {Function}]\n     * @param [args[start] {number}]\n     * @param [args[end] {number}]\n     * @param [args[dcId] {number}]\n     * @param [args[workers] {number}]\n     * @param [args[isPriority] {boolean}]\n     * @returns {Promise<Buffer>}\n     */\n    downloadFile(inputLocation: Api.TypeInputFileLocation, args: DownloadFileWithDcParams) {\n        return downloadFile(this, inputLocation, args, this._shouldDebugExportedSenders);\n    }\n\n    downloadMedia(\n        entityOrMedia: Api.Message | Api.TypeMessageMedia, args: DownloadMediaParams & Partial<DownloadFileParams>,\n    ) {\n        let media;\n        if (entityOrMedia instanceof Api.Message || entityOrMedia instanceof Api.StoryItem) {\n            media = entityOrMedia.media;\n        } else if (entityOrMedia instanceof Api.MessageService) {\n            const action = entityOrMedia.action;\n            if ('photo' in action) {\n                media = action.photo;\n            }\n        } else {\n            media = entityOrMedia;\n        }\n\n        if (media instanceof Api.MessageMediaWebPage) {\n            if (media.webpage instanceof Api.WebPage) {\n                media = media.webpage.document || media.webpage.photo;\n            }\n        }\n        if (media instanceof Api.MessageMediaPhoto || media instanceof Api.Photo) {\n            return this._downloadPhoto(media, args);\n        } else if (media instanceof Api.MessageMediaDocument || media instanceof Api.Document) {\n            return this._downloadDocument(media, args);\n        } else if (media instanceof Api.WebDocument || media instanceof Api.WebDocumentNoProxy) {\n            return this._downloadWebDocument(media);\n        }\n        return undefined;\n    }\n\n    downloadProfilePhoto(entity: Api.User | Api.Chat, isBig = false) {\n        const photo = entity.photo;\n\n        if (!(photo instanceof Api.UserProfilePhoto\n            || photo instanceof Api.ChatPhoto)) return undefined;\n\n        const dcId = photo.dcId;\n        const loc = new Api.InputPeerPhotoFileLocation({\n            peer: getInputPeer(entity),\n            photoId: photo.photoId,\n            big: isBig || undefined,\n        });\n\n        return this.downloadFile(loc, {\n            dcId,\n            isPriority: true,\n        }) as Promise<Buffer | undefined>; // Profile photo cannot be larger than 2GB, right?\n    }\n\n    downloadStickerSetThumb(stickerSet: Api.StickerSet) {\n        if (!stickerSet.thumbs?.length && !stickerSet.thumbDocumentId) {\n            return undefined;\n        }\n\n        const thumbVersion = stickerSet.thumbVersion!;\n\n        if (!stickerSet.thumbDocumentId) {\n            return this.downloadFile(\n                new Api.InputStickerSetThumb({\n                    stickerset: new Api.InputStickerSetID({\n                        id: stickerSet.id,\n                        accessHash: stickerSet.accessHash,\n                    }),\n                    thumbVersion,\n                }),\n                { dcId: stickerSet.thumbDcId! },\n            ) as Promise<Buffer | undefined>; // Sticker thumb cannot be larger than 2GB, right?\n        }\n\n        return this.invoke(new Api.messages.GetCustomEmojiDocuments({\n            documentId: [stickerSet.thumbDocumentId],\n        })).then((docs) => {\n            const doc = docs[0];\n            if (!doc || doc instanceof Api.DocumentEmpty) {\n                return undefined;\n            }\n\n            return this.downloadFile(new Api.InputDocumentFileLocation({\n                id: doc.id,\n                accessHash: doc.accessHash,\n                fileReference: doc.fileReference,\n                thumbSize: '',\n            }),\n            {\n                fileSize: doc.size.toJSNumber(),\n                dcId: doc.dcId,\n            }) as Promise<Buffer | undefined>; // Sticker thumb cannot be larger than 2GB, right?\n        });\n    }\n\n    pickFileSize(sizes: (Api.TypePhotoSize | Api.TypeVideoSize)[], sizeType?: SizeType) {\n        if (!sizes?.length) return undefined;\n        if (!sizeType) {\n            const maxSize = sizes.reduce((max, current) => {\n                if (!('w' in current)) return max;\n                if (!max || !('w' in max)) return current;\n                return max.w > current.w ? max : current;\n            }, undefined as Api.TypePhotoSize | Api.TypeVideoSize | undefined);\n            return maxSize;\n        }\n\n        const indexOfSize = sizeTypes.indexOf(sizeType);\n        let size;\n        for (let i = indexOfSize; i < sizeTypes.length; i++) {\n            size = sizes.find((s) => 'type' in s && s.type === sizeTypes[i]);\n            if (size) {\n                return size;\n            }\n        }\n        return undefined;\n    }\n\n    _downloadCachedPhotoSize(size: Api.PhotoCachedSize | Api.PhotoStrippedSize) {\n        // No need to download anything, simply write the bytes\n        let data;\n        if (size instanceof Api.PhotoStrippedSize) {\n            data = strippedPhotoToJpg(size.bytes);\n        } else {\n            data = size.bytes;\n        }\n        return data;\n    }\n\n    _downloadPhoto(media: Api.MessageMediaPhoto | Api.TypePhoto, args: DownloadMediaParams) {\n        let photo = media;\n        if (media instanceof Api.MessageMediaPhoto && media.photo instanceof Api.Photo) {\n            photo = media.photo;\n        }\n\n        if (!(photo instanceof Api.Photo)) {\n            return undefined;\n        }\n\n        const isVideoSize = args.sizeType === 'u' || args.sizeType === 'v';\n        const videoSizes = isVideoSize ? photo.videoSizes! : [];\n        const size = this.pickFileSize([...videoSizes, ...photo.sizes], args.sizeType);\n\n        if (!size\n            || size instanceof Api.PhotoSizeEmpty\n            || size instanceof Api.VideoSizeEmojiMarkup\n            || size instanceof Api.VideoSizeStickerMarkup) {\n            return undefined;\n        }\n\n        if (size instanceof Api.PhotoCachedSize || size instanceof Api.PhotoStrippedSize) {\n            return this._downloadCachedPhotoSize(size);\n        }\n\n        let fileSize: number;\n        if (size instanceof Api.PhotoSizeProgressive) {\n            fileSize = Math.max(...size.sizes);\n        } else {\n            fileSize = \"size\" in size ? size.size : 512;\n        }\n\n        return this.downloadFile(\n            new Api.InputPhotoFileLocation({\n                id: photo.id,\n                accessHash: photo.accessHash,\n                fileReference: photo.fileReference,\n                thumbSize: size.type,\n            }),\n            {\n                dcId: photo.dcId,\n                fileSize,\n                progressCallback: args.progressCallback,\n            },\n        );\n    }\n\n    _downloadDocument(\n        media: Api.MessageMediaDocument | Api.TypeDocument, args: DownloadMediaParams & DownloadFileParams,\n    ) {\n        let doc = media;\n        if (doc instanceof Api.MessageMediaDocument && doc.document instanceof Api.Document) {\n            doc = doc.document;\n        }\n        if (!(doc instanceof Api.Document)) {\n            return undefined;\n        }\n\n        let size;\n        if (args.sizeType) {\n            size = this.pickFileSize([...(doc.thumbs || []), ...(doc.videoThumbs || [])], args.sizeType);\n            if (!size && doc.mimeType.startsWith('video/')) {\n                return undefined;\n            }\n\n            if (size && (size instanceof Api.PhotoCachedSize\n                || size instanceof Api.PhotoStrippedSize)) {\n                return this._downloadCachedPhotoSize(size);\n            }\n        }\n\n        return this.downloadFile(\n            new Api.InputDocumentFileLocation({\n                id: doc.id,\n                accessHash: doc.accessHash,\n                fileReference: doc.fileReference,\n                thumbSize: size && \"type\" in size ? size.type : \"\",\n            }),\n            {\n                fileSize: size && \"size\" in size ? size.size : doc.size.toJSNumber(),\n                progressCallback: args.progressCallback,\n                start: args.start,\n                end: args.end,\n                dcId: doc.dcId,\n                workers: args.workers,\n            },\n        );\n    }\n\n    async _downloadWebDocument(media: Api.TypeWebDocument) {\n        if (media instanceof Api.WebDocumentNoProxy) {\n            const arrayBuff = await fetch(media.url).then((res) => res.arrayBuffer());\n            return Buffer.from(arrayBuff);\n        }\n\n        try {\n            const buff = [];\n            let offset = 0;\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                const downloaded = new Api.upload.GetWebFile({\n                    location: new Api.InputWebFileLocation({\n                        url: media.url,\n                        accessHash: media.accessHash,\n                    }),\n                    offset,\n                    limit: WEBDOCUMENT_REQUEST_PART_SIZE,\n                });\n\n                const sender = await this._borrowExportedSender(\n                    this._config?.webfileDcId || DEFAULT_WEBDOCUMENT_DC_ID,\n                );\n                if (!sender) {\n                    throw new Error('Failed to obtain sender');\n                }\n                const res = (await sender.send(downloaded))!;\n                this.releaseExportedSender(sender);\n                offset += WEBDOCUMENT_REQUEST_PART_SIZE;\n                if (res.bytes.length) {\n                    buff.push(res.bytes);\n                    if (res.bytes.length < WEBDOCUMENT_REQUEST_PART_SIZE) {\n                        break;\n                    }\n                } else {\n                    break;\n                }\n            }\n            return Buffer.concat(buff);\n        } catch (err: unknown) {\n            // the file is no longer saved in telegram's cache.\n            if (err instanceof RPCError && err.errorMessage === 'WEBFILE_NOT_AVAILABLE') {\n                return Buffer.alloc(0);\n            } else {\n                throw err;\n            }\n        }\n    }\n\n    async downloadStaticMap(\n        accessHash: bigInt.BigInteger,\n        long: number,\n        lat: number,\n        w: number,\n        h: number,\n        zoom: number,\n        scale: number,\n        accuracyRadius?: number,\n    ) {\n        try {\n            const buff = [];\n            let offset = 0;\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                try {\n                    const downloaded = new Api.upload.GetWebFile({\n                        location: new Api.InputWebFileGeoPointLocation({\n                            geoPoint: new Api.InputGeoPoint({\n                                lat,\n                                long,\n                                accuracyRadius,\n                            }),\n                            accessHash,\n                            w,\n                            h,\n                            zoom,\n                            scale,\n                        }),\n                        offset,\n                        limit: WEBDOCUMENT_REQUEST_PART_SIZE,\n                    });\n                    const sender = await this._borrowExportedSender(DEFAULT_WEBDOCUMENT_DC_ID);\n                    if (!sender) {\n                        throw new Error('Failed to obtain sender');\n                    }\n                    const res = (await sender.send(downloaded))!;\n                    this.releaseExportedSender(sender);\n                    offset += WEBDOCUMENT_REQUEST_PART_SIZE;\n                    if (res.bytes.length) {\n                        buff.push(res.bytes);\n                        if (res.bytes.length < WEBDOCUMENT_REQUEST_PART_SIZE) {\n                            break;\n                        }\n                    } else {\n                        break;\n                    }\n                } catch (err) {\n                    if (err instanceof FloodWaitError) {\n                        // eslint-disable-next-line no-console\n                        console.warn(`getWebFile: sleeping for ${err.seconds}s on flood wait`);\n                        await sleep(err.seconds * 1000);\n                        continue;\n                    }\n                }\n            }\n            return Buffer.concat(buff);\n        } catch (err: unknown) {\n            if (err instanceof RPCError && err.errorMessage === 'WEBFILE_NOT_AVAILABLE') {\n                return Buffer.alloc(0);\n            } else {\n                throw err;\n            }\n        }\n    }\n\n    // region Invoking Telegram request\n    /**\n     * Invokes a MTProtoRequest (sends and receives it) and returns its result\n     * @param request\n     * @param dcId Optional dcId to use when sending the request\n     * @param abortSignal Optional AbortSignal to cancel the request\n     * @param shouldRetryOnTimeout Whether to retry the request if it times out\n     * @returns {Promise}\n     */\n\n    async invoke<R extends Api.AnyRequest>(\n        request: R, dcId?: number, abortSignal?: AbortSignal, shouldRetryOnTimeout?: boolean,\n    ): Promise<R['__response']> {\n        if (request.classType !== 'request') {\n            throw new Error('You can only invoke MTProtoRequests');\n        }\n\n        const isExported = dcId !== undefined;\n        let sender = (!isExported ? this._sender : await this.getSender(dcId))!;\n        this._lastRequest = Date.now();\n\n        await this._connectedDeferred.promise;\n\n        const state = new RequestState(request, abortSignal);\n\n        let attempt = 0;\n        for (attempt = 0; attempt < this._requestRetries; attempt++) {\n            sender.addStateToQueue(state);\n            try {\n                const result = await state.promise;\n                state.finished.resolve();\n                if (isExported) this.releaseExportedSender(sender);\n                return result;\n            } catch (e: unknown) {\n                if (e instanceof ServerError\n                    || (e instanceof RPCError && (\n                        e.errorMessage === 'RPC_CALL_FAIL'\n                        || e.errorMessage === 'RPC_MCGET_FAIL'\n                        || e.errorMessage.match(/INTERDC_\\d_CALL(_RICH)?_ERROR/)\n                    ))\n                ) {\n                    this._log.warn(`Telegram is having internal issues ${e.constructor.name}`);\n                    await sleep(2000);\n                } else if (e instanceof FloodWaitError || e instanceof FloodTestPhoneWaitError) {\n                    if (e.seconds <= this.floodSleepLimit) {\n                        this._log.info(`Sleeping for ${e.seconds}s on flood wait`);\n                        await sleep(e.seconds * 1000);\n                    } else {\n                        state.finished.resolve();\n                        if (isExported) this.releaseExportedSender(sender);\n                        throw e;\n                    }\n                } else if (e instanceof PhoneMigrateError || e instanceof NetworkMigrateError\n                    || e instanceof UserMigrateError) {\n                    this._log.info(`Phone migrated to ${e.newDc}`);\n                    const shouldRaise = e instanceof PhoneMigrateError\n                        || e instanceof NetworkMigrateError;\n                    if (shouldRaise && await checkAuthorization(this)) {\n                        state.finished.resolve();\n                        if (isExported) this.releaseExportedSender(sender);\n                        throw e;\n                    }\n                    await this._switchDC(e.newDc);\n                    if (isExported) this.releaseExportedSender(sender);\n                    sender = (dcId === undefined ? this._sender : await this.getSender(dcId))!;\n                } else if (e instanceof MsgWaitError) {\n                    // We need to resend this after the old one was confirmed.\n                    await state.isReady();\n\n                    state.after = undefined;\n                } else if (e instanceof RPCError && e.errorMessage === 'CONNECTION_NOT_INITED') {\n                    await this.disconnect();\n                    await sleep(2000);\n                    await this.connect();\n                } else if (e instanceof TimedOutError) {\n                    if (!shouldRetryOnTimeout) {\n                        state.finished.resolve();\n                        if (isExported) this.releaseExportedSender(sender);\n                        throw e;\n                    }\n                } else {\n                    state.finished.resolve();\n                    if (isExported) this.releaseExportedSender(sender);\n                    throw e;\n                }\n            }\n\n            state.resetPromise();\n        }\n        if (isExported) this.releaseExportedSender(sender);\n        throw new Error(`Request was unsuccessful ${attempt} time(s)`);\n    }\n\n    async invokeBeacon(request: Api.AnyRequest, dcId?: number) {\n        if (request.classType !== 'request') {\n            throw new Error('You can only invoke MTProtoRequests');\n        }\n\n        const isExported = dcId !== undefined;\n        const sender = (!isExported ? this._sender : await this.getSender(dcId))!;\n\n        sender.sendBeacon(request);\n\n        if (isExported) this.releaseExportedSender(sender);\n    }\n\n    setIsPremium(isPremium: boolean) {\n        this.isPremium = isPremium;\n    }\n\n    async getMe() {\n        try {\n            return (await this.invoke(\n                new Api.users.GetUsers({\n                    id: [new Api.InputUserSelf()],\n                })\n            ))[0];\n        } catch (e: any) {\n            this._log.warn('error while getting me');\n            this._log.warn(e);\n        }\n        return undefined;\n    }\n\n    async loadConfig() {\n        if (!this._config) {\n            this._config = await this.invoke(new Api.help.GetConfig());\n        }\n    }\n\n    async start(authParams: UserAuthParams) {\n        if (!this.isConnected()) {\n            await this.connect();\n        }\n\n        this.loadConfig();\n\n        if (await checkAuthorization(this, authParams.shouldThrowIfUnauthorized)) {\n            return;\n        }\n\n        const apiCredentials = {\n            apiId: this.apiId,\n            apiHash: this.apiHash,\n        };\n\n        await authFlow(this, apiCredentials, authParams);\n    }\n\n    uploadFile(fileParams: UploadFileParams) {\n        return uploadFile(this, fileParams, this._shouldDebugExportedSenders);\n    }\n\n    updateTwoFaSettings(params: TwoFaParams) {\n        return updateTwoFaSettings(this, params);\n    }\n\n    getTmpPassword(currentPassword: string, ttl?: number): Promise<TmpPasswordResult> {\n        return getTmpPassword(this, currentPassword, ttl);\n    }\n\n    getCurrentPassword(currentPassword?: string): Promise<PasswordResult | undefined> {\n        return getCurrentPassword(this, currentPassword);\n    }\n\n    // event region\n    addEventHandler(callback: CallableFunction, event: EventBuilder) {\n        this._eventBuilders.push([event, callback]);\n    }\n\n    _handleUpdate(update: Update) {\n        // this.session.processEntities(update)\n        // this._entityCache.add(update)\n\n        if (update instanceof Api.Updates || update instanceof Api.UpdatesCombined) {\n            // TODO deal with entities\n            const entities = [];\n            for (const x of [...update.users, ...update.chats]) {\n                entities.push(x);\n            }\n            this._processUpdate(update, entities);\n        } else if (update instanceof Api.UpdateShort) {\n            this._processUpdate(update.update, undefined);\n        } else {\n            this._processUpdate(update, undefined);\n        }\n    }\n\n    _processUpdate(update: Update, entities: (Api.TypeUser | Api.TypeChat)[] | undefined) {\n        update._entities = entities || [];\n        const args = {\n            update,\n        };\n        this._dispatchUpdate(args);\n    }\n\n    // endregion\n\n    async _dispatchUpdate(args: {\n        update: Update,\n    }) {\n        for (const [builder, callback] of this._eventBuilders) {\n            const event = builder.build(args.update);\n            if (event) {\n                await callback(event);\n            }\n        }\n    }\n\n    isConnected() {\n        if (this._sender) {\n            if (this._sender.isConnected()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\nfunction timeout(cb: () => void, ms: number) {\n    let isResolved = false;\n\n    return Promise.race([\n        cb(),\n        sleep(ms).then(() => (isResolved ? undefined : Promise.reject(new Error('TIMEOUT')))),\n    ]).finally(() => {\n        isResolved = true;\n    });\n}\n\nasync function attempts(cb: () => void, times: number, pause: number) {\n    for (let i = 0; i < times; i++) {\n        try {\n            // We need to `return await` here so it can be caught locally\n            // eslint-disable-next-line @typescript-eslint/return-await\n            return await cb();\n        } catch (err) {\n            if (i === times - 1) {\n                throw err;\n            }\n\n            await sleep(pause);\n        }\n    }\n    return undefined;\n}\n\nexport default TelegramClient;\n","import type TelegramClient from './TelegramClient';\nimport type { WrappedError } from '../../../api/gramjs/helpers/misc';\n\nimport { EmailUnconfirmedError } from '../errors';\nimport Api from '../tl/api';\n\nimport { generateRandomBytes } from '../Helpers';\nimport { computeCheck, computeDigest } from '../Password';\n\nexport interface TwoFaParams {\n    isCheckPassword?: boolean;\n    currentPassword?: string;\n    newPassword?: string;\n    hint?: string;\n    email?: string;\n    emailCodeCallback?: (length: number) => Promise<string>;\n    onEmailCodeError?: (err: Error) => void;\n}\n\nexport type TmpPasswordResult = Api.account.TmpPassword | WrappedError | undefined;\nexport type PasswordResult = Api.TypeInputCheckPasswordSRP | WrappedError | undefined;\n\n/**\n * Changes the 2FA settings of the logged in user.\n Note that this method may be *incredibly* slow depending on the\n prime numbers that must be used during the process to make sure\n that everything is safe.\n\n Has no effect if both current and new password are omitted.\n\n * @param client: The telegram client instance\n * @param isCheckPassword: Must be ``true`` if you want to check the current password\n * @param currentPassword: The current password, to authorize changing to ``new_password``.\n Must be set if changing existing 2FA settings.\n Must **not** be set if 2FA is currently disabled.\n Passing this by itself will remove 2FA (if correct).\n * @param newPassword: The password to set as 2FA.\n If 2FA was already enabled, ``currentPassword`` **must** be set.\n Leaving this blank or `undefined` will remove the password.\n * @param hint: Hint to be displayed by Telegram when it asks for 2FA.\n Must be set when changing or creating a new password.\n Has no effect if ``newPassword`` is not set.\n * @param email: Recovery and verification email. If present, you must also\n set `emailCodeCallback`, else it raises an Error.\n * @param emailCodeCallback: If an email is provided, a callback that returns the code sent\n to it must also be set. This callback may be asynchronous.\n It should return a string with the code. The length of the\n code will be passed to the callback as an input parameter.\n\n If the callback returns an invalid code, it will raise an rpc error with the message\n ``CODE_INVALID``\n\n * @returns Promise<void>\n * @throws this method can throw:\n \"PASSWORD_HASH_INVALID\" if you entered a wrong password (or set it to undefined).\n \"EMAIL_INVALID\" if the entered email is wrong\n \"EMAIL_HASH_EXPIRED\" if the user took too long to verify their email\n */\nexport async function updateTwoFaSettings(\n    client: TelegramClient,\n    {\n        isCheckPassword,\n        currentPassword,\n        newPassword,\n        hint = '',\n        email,\n        emailCodeCallback,\n        onEmailCodeError,\n    }: TwoFaParams,\n) {\n    if (!newPassword && !currentPassword) {\n        throw new Error('Neither `currentPassword` nor `newPassword` is present');\n    }\n\n    if (email && !(emailCodeCallback && onEmailCodeError)) {\n        throw new Error('`email` present without `emailCodeCallback` and `onEmailCodeError`');\n    }\n\n    const pwd = await client.invoke(new Api.account.GetPassword());\n\n    const newAlgo = pwd.newAlgo;\n\n    if (newAlgo instanceof Api.PasswordKdfAlgoUnknown) {\n        throw new Error('Password algorithm is unknown');\n    }\n\n    newAlgo.salt1 = Buffer.concat([newAlgo.salt1, generateRandomBytes(32)]);\n    if (!pwd.hasPassword && currentPassword) {\n        currentPassword = undefined;\n    }\n\n    const password = currentPassword ? await computeCheck(pwd, currentPassword!) : new Api.InputCheckPasswordEmpty();\n\n    if (isCheckPassword) {\n        await client.invoke(new Api.auth.CheckPassword({ password }));\n        return;\n    }\n\n    try {\n        await client.invoke(new Api.account.UpdatePasswordSettings({\n            password,\n            newSettings: new Api.account.PasswordInputSettings({\n                newAlgo,\n                newPasswordHash: newPassword ? await computeDigest(newAlgo, newPassword) : Buffer.alloc(0),\n                hint,\n                email,\n                // not explained what it does and it seems to always be set to empty in tdesktop\n                newSecureSettings: undefined,\n            }),\n        }));\n    } catch (e) {\n        if (e instanceof EmailUnconfirmedError) {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                try {\n                    const code = await emailCodeCallback!(e.codeLength);\n\n                    if (!code) {\n                        throw new Error('Code is empty');\n                    }\n\n                    await client.invoke(new Api.account.ConfirmPasswordEmail({ code }));\n                    break;\n                } catch (err: any) {\n                    onEmailCodeError!(err);\n                }\n            }\n        } else {\n            throw e;\n        }\n    }\n}\n\nexport async function getTmpPassword(client: TelegramClient, currentPassword: string, ttl = 60) {\n    const pwd = await client.invoke(new Api.account.GetPassword());\n\n    if (!pwd) {\n        return undefined;\n    }\n\n    const inputPassword = await computeCheck(pwd, currentPassword);\n    const result = await client.invoke(new Api.account.GetTmpPassword({\n        password: inputPassword,\n        period: ttl,\n    }));\n\n    return result;\n}\n\nexport async function getCurrentPassword(\n    client: TelegramClient,\n    currentPassword?: string,\n): Promise<PasswordResult> {\n    const pwd = await client.invoke(new Api.account.GetPassword());\n\n    if (!pwd) {\n        return undefined;\n    }\n\n    return currentPassword ? await computeCheck(pwd, currentPassword!) : new Api.InputCheckPasswordEmpty();\n}\n","/// In seconds\nexport const MINUTE = 60;\nexport const HOUR = 3600;\nexport const DAY = 86400;\n\nexport function getMinutes(seconds: number, roundDown?: boolean) {\n  const roundFunc = roundDown ? Math.floor : Math.ceil;\n  return roundFunc(seconds / MINUTE);\n}\n\nexport function getHours(seconds: number, roundDown?: boolean) {\n  const roundFunc = roundDown ? Math.floor : Math.ceil;\n  return roundFunc(seconds / HOUR);\n}\n\nexport function getDays(seconds: number, roundDown?: boolean) {\n  const roundFunc = roundDown ? Math.floor : Math.ceil;\n  return roundFunc(seconds / DAY);\n}\n","import type BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiEmojiStatus, ApiPeerColor } from '../../types';\n\nimport { CHANNEL_ID_LENGTH } from '../../../config';\n\nexport function isPeerUser(peer: GramJs.TypePeer | GramJs.TypeInputPeer): peer is GramJs.PeerUser {\n  return peer.hasOwnProperty('userId');\n}\n\nexport function isPeerChat(peer: GramJs.TypePeer | GramJs.TypeInputPeer): peer is GramJs.PeerChat {\n  return peer.hasOwnProperty('chatId');\n}\n\nexport function isPeerChannel(peer: GramJs.TypePeer | GramJs.TypeInputPeer): peer is GramJs.PeerChannel {\n  return peer.hasOwnProperty('channelId');\n}\n\nexport function buildApiPeerId(id: BigInt.BigInteger, type: 'user' | 'chat' | 'channel') {\n  if (type === 'user') {\n    return id.toString();\n  }\n\n  if (type === 'channel') {\n    // Simulates TDLib https://github.com/tdlib/td/blob/d7203eb719304866a7eb7033ef03d421459335b8/td/telegram/DialogId.cpp#L54\n    // But using only string operations. Should be fine until channel ids reach 10^12\n    // Example: 12345678 -> -1000012345678\n    return `-1${id.toString().padStart(CHANNEL_ID_LENGTH - 2, '0')}`;\n  }\n\n  return `-${id}`;\n}\n\nexport function getApiChatIdFromMtpPeer(peer: GramJs.TypePeer | GramJs.TypeInputPeer) {\n  if (isPeerUser(peer)) {\n    return buildApiPeerId(peer.userId, 'user');\n  } else if (isPeerChat(peer)) {\n    return buildApiPeerId(peer.chatId, 'chat');\n  } else {\n    return buildApiPeerId((peer as GramJs.InputPeerChannel).channelId, 'channel');\n  }\n}\n\nexport function buildApiPeerColor(peerColor: GramJs.TypePeerColor): ApiPeerColor {\n  const { color, backgroundEmojiId } = peerColor;\n  return {\n    color,\n    backgroundEmojiId: backgroundEmojiId?.toString(),\n  };\n}\n\nexport function buildApiEmojiStatus(mtpEmojiStatus: GramJs.TypeEmojiStatus): ApiEmojiStatus | undefined {\n  if (mtpEmojiStatus instanceof GramJs.EmojiStatus) {\n    return { documentId: mtpEmojiStatus.documentId.toString(), until: mtpEmojiStatus.until };\n  }\n\n  // TODO: Support other parameters\n  if (mtpEmojiStatus instanceof GramJs.EmojiStatusCollectible) {\n    return { documentId: mtpEmojiStatus.documentId.toString(), until: mtpEmojiStatus.until };\n  }\n\n  return undefined;\n}\n","import { Api as GramJs, errors } from '../../../lib/gramjs';\n\nimport type { RegularLangKey } from '../../../types/language';\nimport type { RegularLangFnParameters } from '../../../util/localization';\n\nimport { DEBUG } from '../../../config';\nimport {\n  DAY, getDays, getHours, getMinutes, HOUR, MINUTE,\n} from '../../../util/dates/units';\nimport { getApiChatIdFromMtpPeer } from '../apiBuilders/peers';\n\nconst LOG_BACKGROUND = '#111111DD';\nconst LOG_PREFIX_COLOR = '#E4D00A';\nconst LOG_SUFFIX = {\n  INVOKE: '#49DBF5',\n  BEACON: '#F549DB',\n  RESPONSE: '#6887F7',\n  CONNECTING: '#E4D00A',\n  CONNECTED: '#26D907',\n  'CONNECTING ERROR': '#D1191C',\n  'INVOKE ERROR': '#D1191C',\n  UPDATE: '#0DD151',\n  'UNEXPECTED UPDATE': '#9C9C9C',\n  'UNEXPECTED RESPONSE': '#D1191C',\n};\n\nconst ERROR_KEYS: Record<string, RegularLangKey> = {\n  PHONE_NUMBER_INVALID: 'ErrorPhoneNumberInvalid',\n  PHONE_CODE_INVALID: 'ErrorCodeInvalid',\n  PASSWORD_HASH_INVALID: 'ErrorIncorrectPassword',\n  PHONE_PASSWORD_FLOOD: 'ErrorPasswordFlood',\n  PHONE_NUMBER_BANNED: 'ErrorPhoneBanned',\n  EMAIL_UNCONFIRMED: 'ErrorEmailUnconfirmed',\n  EMAIL_HASH_EXPIRED: 'ErrorEmailHashExpired',\n  NEW_SALT_INVALID: 'ErrorNewSaltInvalid',\n  SRP_PASSWORD_CHANGED: 'ErrorPasswordChanged',\n  CODE_INVALID: 'ErrorEmailCodeInvalid',\n  PASSWORD_MISSING: 'ErrorPasswordMissing',\n};\n\nexport type MessageRepairContext = Pick<GramJs.TypeMessage, 'peerId' | 'id'>;\nexport type MediaRepairContext = MessageRepairContext;\n\nexport type WrappedError<T extends Error = Error> = {\n  messageKey: RegularLangFnParameters;\n  errorMessage?: string;\n  error: T;\n};\n\nexport function resolveMessageApiChatId(mtpMessage: GramJs.TypeMessage) {\n  if (!(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return getApiChatIdFromMtpPeer(mtpMessage.peerId);\n}\n\nexport function isChatFolder(\n  filter?: GramJs.TypeDialogFilter,\n): filter is GramJs.DialogFilter | GramJs.DialogFilterChatlist {\n  return filter instanceof GramJs.DialogFilter || filter instanceof GramJs.DialogFilterChatlist;\n}\n\nexport function serializeBytes(value: Buffer) {\n  return String.fromCharCode(...value);\n}\n\nexport function deserializeBytes(value: string) {\n  return Buffer.from(value, 'binary');\n}\n\nexport function log(suffix: keyof typeof LOG_SUFFIX, ...data: any) {\n  /* eslint-disable max-len */\n  /* eslint-disable no-console */\n  const func = suffix === 'UNEXPECTED RESPONSE' ? console.error\n    : suffix === 'INVOKE ERROR' || suffix === 'UNEXPECTED UPDATE' ? console.warn : console.log;\n  /* eslint-enable no-console */\n  func(\n    `%cGramJS%c${suffix}`,\n    `color: ${LOG_PREFIX_COLOR}; background: ${LOG_BACKGROUND}; padding: 0.25rem; border-radius: 0.25rem;`,\n    `color: ${LOG_SUFFIX[suffix]}; background: ${LOG_BACKGROUND}; padding: 0.25rem; border-radius: 0.25rem; margin-left: 0.25rem;`,\n    ...data,\n  );\n  /* eslint-enable max-len */\n}\n\nexport function isResponseUpdate<T extends GramJs.AnyRequest>(result: T['__response']): result is GramJs.TypeUpdate {\n  return result instanceof GramJs.UpdatesTooLong || result instanceof GramJs.UpdateShortMessage\n    || result instanceof GramJs.UpdateShortChatMessage || result instanceof GramJs.UpdateShort\n    || result instanceof GramJs.UpdatesCombined || result instanceof GramJs.Updates\n    || result instanceof GramJs.UpdateShortSentMessage;\n}\n\nexport function checkErrorType(error: unknown): error is Error {\n  if (!(error instanceof Error)) {\n    // eslint-disable-next-line no-console\n    if (DEBUG) console.warn('Unexpected error type', error);\n    return false;\n  }\n\n  return true;\n}\n\nexport function wrapError<T extends Error>(error: T): WrappedError<T> {\n  let messageKey: RegularLangFnParameters | undefined;\n\n  const errorMessage = error instanceof errors.RPCError ? error.errorMessage : undefined;\n\n  if (error instanceof errors.FloodWaitError) {\n    messageKey = {\n      key: 'ErrorFloodTime',\n      variables: { time: formatWait(error.seconds) },\n    };\n  } else if (error instanceof errors.PasswordFreshError) {\n    messageKey = {\n      key: 'ErrorPasswordFresh',\n      variables: { time: formatWait(error.seconds) },\n    };\n  } else if (error instanceof errors.RPCError) {\n    messageKey = {\n      key: ERROR_KEYS[error.errorMessage],\n    };\n  }\n\n  if (!messageKey) {\n    if (error.message) {\n      messageKey = {\n        key: 'ErrorUnexpectedMessage',\n        variables: { error: error.message },\n      };\n    } else {\n      messageKey = {\n        key: 'ErrorUnexpected',\n      };\n    }\n  }\n\n  return {\n    messageKey,\n    errorMessage,\n    error,\n  };\n}\n\nfunction formatWait(seconds: number): RegularLangFnParameters {\n  if (seconds < MINUTE) {\n    return {\n      key: 'Seconds',\n      variables: { count: seconds },\n      options: { pluralValue: seconds },\n    };\n  }\n\n  if (seconds < HOUR) {\n    const minutes = getMinutes(seconds);\n    return {\n      key: 'Minutes',\n      variables: { count: minutes },\n      options: { pluralValue: minutes },\n    };\n  }\n\n  if (seconds < DAY) {\n    const hours = getHours(seconds);\n    return {\n      key: 'Hours',\n      variables: { count: hours },\n      options: { pluralValue: hours },\n    };\n  }\n\n  const days = getDays(seconds);\n\n  return {\n    key: 'Days',\n    variables: { count: days },\n    options: { pluralValue: days },\n  };\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport type OmitVirtualFields<T> = Omit<T, VirtualFields>;\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): OmitVirtualFields<T> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../lib/gramjs';\n\nimport { DATA_BROADCAST_CHANNEL_NAME, DEBUG } from '../../config';\nimport { throttle } from '../../util/schedulers';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\n\n// eslint-disable-next-line no-restricted-globals\nconst IS_MULTITAB_SUPPORTED = 'BroadcastChannel' in self;\n\nexport type StoryRepairInfo = {\n  type: 'story';\n  peerId: string;\n  id: number;\n};\n\nexport type MessageRepairInfo = {\n  type: 'message';\n  peerId: string;\n  id: number;\n};\n\nexport type RepairInfo = {\n  localRepairInfo?: StoryRepairInfo | MessageRepairInfo;\n};\n\nexport interface LocalDb {\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  documents: Record<string, GramJs.Document & RepairInfo>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo & RepairInfo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n  commonBoxState: Record<string, number>;\n  channelPtsById: Record<string, number>;\n}\n\nconst channel = IS_MULTITAB_SUPPORTED ? new BroadcastChannel(DATA_BROADCAST_CHANNEL_NAME) : undefined;\n\nlet batchedUpdates: {\n  name: string;\n  prop: string;\n  value: any;\n}[] = [];\nconst throttledLocalDbUpdate = throttle(() => {\n  channel!.postMessage({\n    type: 'localDbUpdate',\n    batchedUpdates,\n  });\n  batchedUpdates = [];\n}, 100);\n\nfunction createProxy(name: string, object: any) {\n  return new Proxy(object, {\n    get(target, prop: string, value: any) {\n      return Reflect.get(target, prop, value);\n    },\n    set(target, prop: string, value: any) {\n      batchedUpdates.push({ name, prop, value });\n      throttledLocalDbUpdate();\n      return Reflect.set(target, prop, value);\n    },\n  });\n}\n\nfunction convertToVirtualClass(value: any): any {\n  if (value instanceof Uint8Array) return Buffer.from(value);\n  if (typeof value === 'object' && Object.keys(value).length === 1 && Object.keys(value)[0] === 'value') {\n    return BigInt(value.value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(convertToVirtualClass);\n  }\n\n  if (typeof value !== 'object' || !('CONSTRUCTOR_ID' in value)) {\n    return value;\n  }\n  const path = value.className.split('.');\n  const VirtualClass = path.reduce((acc: any, field: string) => {\n    return acc[field];\n  }, GramJs);\n\n  const valueOmited = omitVirtualClassFields(value);\n  const valueConverted = Object.keys(valueOmited).reduce((acc, key) => {\n    acc[key] = convertToVirtualClass(valueOmited[key]);\n    return acc;\n  }, {} as Record<string, any>);\n\n  return new VirtualClass(valueConverted);\n}\n\nfunction createLocalDbInitial(initial?: LocalDb): LocalDb {\n  return [\n    'localMessages', 'chats', 'users', 'messages', 'documents', 'stickerSets', 'photos', 'webDocuments', 'stories',\n    'commonBoxState', 'channelPtsById',\n  ]\n    .reduce((acc: Record<string, any>, key) => {\n      const value = initial?.[key as keyof LocalDb] ?? {};\n      const convertedValue = Object.keys(value).reduce((acc2, key2) => {\n        if (key === 'commonBoxState' || key === 'channelPtsById') {\n          const typedValue = value as Record<string, number>;\n          acc2[key2] = typedValue[key2];\n          return acc2;\n        }\n\n        acc2[key2] = convertToVirtualClass(value[key2]);\n        return acc2;\n      }, {} as Record<string, any>);\n\n      acc[key] = IS_MULTITAB_SUPPORTED\n        ? createProxy(key, convertedValue)\n        : convertedValue;\n      return acc;\n    }, {} as LocalDb) as LocalDb;\n}\n\nconst localDb: LocalDb = createLocalDbInitial();\n\nexport default localDb;\n\nexport function broadcastLocalDbUpdateFull() {\n  if (!channel) return;\n\n  channel.postMessage({\n    type: 'localDbUpdateFull',\n    localDb: Object.keys(localDb).reduce((acc: Record<string, any>, key) => {\n      acc[key] = { ...localDb[key as keyof LocalDb] };\n      return acc;\n    }, {} as Record<string, any>),\n  });\n}\n\nexport function updateFullLocalDb(initial: LocalDb) {\n  Object.assign(localDb, createLocalDbInitial(initial));\n}\n\nexport function clearLocalDb() {\n  Object.assign(localDb, createLocalDbInitial());\n}\n\nif (DEBUG) {\n  (globalThis as any).getLocalDb = () => localDb;\n}\n","import type { ApiUpdate, OnApiUpdate } from '../../types';\n\nimport { API_THROTTLE_RESET_UPDATES, API_UPDATE_THROTTLE } from '../../../config';\nimport { throttle, throttleWithTickEnd } from '../../../util/schedulers';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport function sendApiUpdate(update: ApiUpdate) {\n  queueUpdate(update);\n}\n\nexport function sendImmediateApiUpdate(update: ApiUpdate) {\n  onUpdate(update);\n}\n\nconst flushUpdatesOnTickEnd = throttleWithTickEnd(flushUpdates);\n\nlet flushUpdatesThrottled: typeof flushUpdatesOnTickEnd | undefined;\nlet currentThrottleId: number | undefined;\n\nlet pendingUpdates: ApiUpdate[] | undefined;\n\nfunction queueUpdate(update: ApiUpdate) {\n  if (!pendingUpdates) {\n    pendingUpdates = [update];\n  } else {\n    pendingUpdates.push(update);\n  }\n\n  if (!flushUpdatesThrottled || API_THROTTLE_RESET_UPDATES.has(update['@type'])) {\n    flushUpdatesThrottled = throttle(flushUpdatesOnTickEnd, API_UPDATE_THROTTLE, true);\n    currentThrottleId = Math.random();\n  }\n\n  flushUpdatesThrottled(currentThrottleId!);\n}\n\nfunction flushUpdates(throttleId: number) {\n  if (!pendingUpdates || throttleId !== currentThrottleId) {\n    return;\n  }\n\n  const currentUpdates = pendingUpdates!;\n  pendingUpdates = undefined;\n  currentUpdates.forEach(onUpdate);\n}\n","import type { ThreadId, WebPageMediaSize } from '../../types';\nimport type { ApiWebDocument } from './bots';\nimport type { ApiGroupCall, PhoneCallAction } from './calls';\nimport type { ApiPeerColor } from './chats';\nimport type {\n  ApiInputSavedStarGift,\n  ApiLabeledPrice,\n  ApiStarGiftRegular,\n  ApiStarGiftUnique,\n} from './payments';\nimport type {\n  ApiMessageStoryData, ApiStory, ApiWebPageStickerData, ApiWebPageStoryData,\n} from './stories';\n\nexport interface ApiDimensions {\n  width: number;\n  height: number;\n}\n\nexport interface ApiPhotoSize extends ApiDimensions {\n  type: 's' | 'm' | 'x' | 'y' | 'w';\n}\n\nexport interface ApiVideoSize extends ApiDimensions {\n  type: 'u' | 'v';\n  videoStartTs?: number;\n  size: number;\n}\n\nexport interface ApiThumbnail extends ApiDimensions {\n  dataUri: string;\n}\n\nexport interface ApiPhoto {\n  mediaType: 'photo';\n  id: string;\n  date: number;\n  thumbnail?: ApiThumbnail;\n  isVideo?: boolean;\n  sizes: ApiPhotoSize[];\n  videoSizes?: ApiVideoSize[];\n  blobUrl?: string;\n  isSpoiler?: boolean;\n}\n\nexport interface ApiSticker {\n  mediaType: 'sticker';\n  id: string;\n  stickerSetInfo: ApiStickerSetInfo;\n  emoji?: string;\n  isCustomEmoji?: boolean;\n  isLottie: boolean;\n  isVideo: boolean;\n  width?: number;\n  height?: number;\n  thumbnail?: ApiThumbnail;\n  previewPhotoSizes?: ApiPhotoSize[];\n  isPreloadedGlobally?: boolean;\n  hasEffect?: boolean;\n  isFree?: boolean;\n  shouldUseTextColor?: boolean;\n}\n\nexport interface ApiStickerSet {\n  isArchived?: true;\n  isEmoji?: true;\n  installedDate?: number;\n  id: string;\n  accessHash: string;\n  title: string;\n  hasThumbnail?: boolean;\n  hasStaticThumb?: boolean;\n  hasAnimatedThumb?: boolean;\n  hasVideoThumb?: boolean;\n  thumbCustomEmojiId?: string;\n  count: number;\n  stickers?: ApiSticker[];\n  packs?: Record<string, ApiSticker[]>;\n  covers?: ApiSticker[];\n  shortName: string;\n}\n\ntype ApiStickerSetInfoShortName = {\n  shortName: string;\n};\n\ntype ApiStickerSetInfoId = {\n  id: string;\n  accessHash: string;\n};\n\ntype ApiStickerSetInfoMissing = {\n  isMissing: true;\n};\n\nexport type ApiStickerSetInfo = ApiStickerSetInfoShortName | ApiStickerSetInfoId | ApiStickerSetInfoMissing;\n\nexport interface ApiVideo {\n  mediaType: 'video';\n  id: string;\n  mimeType: string;\n  duration: number;\n  fileName: string;\n  width?: number;\n  height?: number;\n  supportsStreaming?: boolean;\n  isRound?: boolean;\n  isGif?: boolean;\n  hasVideoPreview?: boolean;\n  isSpoiler?: boolean;\n  thumbnail?: ApiThumbnail;\n  previewPhotoSizes?: ApiPhotoSize[];\n  blobUrl?: string;\n  previewBlobUrl?: string;\n  size: number;\n  noSound?: boolean;\n  waveform?: number[];\n}\n\nexport interface ApiAudio {\n  mediaType: 'audio';\n  id: string;\n  size: number;\n  mimeType: string;\n  fileName: string;\n  duration: number;\n  performer?: string;\n  title?: string;\n  thumbnailSizes?: ApiPhotoSize[];\n}\n\nexport interface ApiVoice {\n  mediaType: 'voice';\n  id: string;\n  duration: number;\n  waveform?: number[];\n  size: number;\n}\n\nexport interface ApiDocument {\n  mediaType: 'document';\n  id?: string;\n  fileName: string;\n  size: number;\n  timestamp?: number;\n  mimeType: string;\n  thumbnail?: ApiThumbnail;\n  previewPhotoSizes?: ApiPhotoSize[];\n  previewBlobUrl?: string;\n  innerMediaType?: 'photo' | 'video';\n  mediaSize?: ApiDimensions;\n}\n\nexport interface ApiContact {\n  mediaType: 'contact';\n  firstName: string;\n  lastName: string;\n  phoneNumber: string;\n  userId: string;\n}\n\nexport type ApiPaidMedia = {\n  mediaType: 'paidMedia';\n  starsAmount: number;\n} & ({\n  isBought?: true;\n  extendedMedia: BoughtPaidMedia[];\n} | {\n  isBought?: undefined;\n  extendedMedia: ApiMediaExtendedPreview[];\n});\n\nexport interface ApiPollAnswer {\n  text: ApiFormattedText;\n  option: string;\n}\n\nexport interface ApiPollResult {\n  isChosen?: true;\n  isCorrect?: true;\n  option: string;\n  votersCount: number;\n}\n\nexport interface ApiPoll {\n  mediaType: 'poll';\n  id: string;\n  summary: {\n    closed?: true;\n    isPublic?: true;\n    multipleChoice?: true;\n    quiz?: true;\n    question: ApiFormattedText;\n    answers: ApiPollAnswer[];\n    closePeriod?: number;\n    closeDate?: number;\n  };\n  results: {\n    isMin?: true;\n    results?: ApiPollResult[];\n    totalVoters?: number;\n    recentVoterIds?: string[];\n    solution?: string;\n    solutionEntities?: ApiMessageEntity[];\n  };\n}\n\nexport interface ApiInvoice {\n  prices: ApiLabeledPrice[];\n  totalAmount: number;\n  currency: string;\n  isTest?: boolean;\n  isRecurring?: boolean;\n  subscriptionPeriod?: number;\n  termsUrl?: string;\n  maxTipAmount?: number;\n  suggestedTipAmounts?: number[];\n  isNameRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isFlexible?: boolean;\n  isPhoneSentToProvider?: boolean;\n  isEmailSentToProvider?: boolean;\n}\n\nexport interface ApiMediaInvoice {\n  mediaType: 'invoice';\n  title: string;\n  description: string;\n  photo?: ApiWebDocument;\n  isTest?: boolean;\n  receiptMessageId?: number;\n  currency: string;\n  amount: number;\n  extendedMedia?: ApiMediaExtendedPreview;\n}\n\nexport interface ApiMediaExtendedPreview {\n  mediaType: 'extendedMediaPreview';\n  width?: number;\n  height?: number;\n  thumbnail?: ApiThumbnail;\n  duration?: number;\n}\n\nexport interface ApiPaymentCredentials {\n  id: string;\n  title: string;\n}\n\nexport interface ApiGeoPoint {\n  long: number;\n  lat: number;\n  accessHash: string;\n  accuracyRadius?: number;\n}\n\ninterface ApiGeo {\n  mediaType: 'geo';\n  geo: ApiGeoPoint;\n}\n\ninterface ApiVenue {\n  mediaType: 'venue';\n  geo: ApiGeoPoint;\n  title: string;\n  address: string;\n  provider: string;\n  venueId: string;\n  venueType: string;\n}\n\ninterface ApiGeoLive {\n  mediaType: 'geoLive';\n  geo: ApiGeoPoint;\n  heading?: number;\n  period: number;\n}\n\nexport type ApiLocation = ApiGeo | ApiVenue | ApiGeoLive;\n\nexport type ApiGame = {\n  mediaType: 'game';\n  title: string;\n  description: string;\n  photo?: ApiPhoto;\n  shortName: string;\n  id: string;\n  accessHash: string;\n  document?: ApiDocument;\n};\n\nexport type ApiGiveaway = {\n  mediaType: 'giveaway';\n  quantity: number;\n  months?: number;\n  stars?: number;\n  untilDate: number;\n  isOnlyForNewSubscribers?: true;\n  countries?: string[];\n  channelIds: string[];\n  prizeDescription?: string;\n};\n\nexport type ApiGiveawayResults = {\n  mediaType: 'giveawayResults';\n  months?: number;\n  stars?: number;\n  untilDate: number;\n  isRefunded?: true;\n  isOnlyForNewSubscribers?: true;\n  channelId: string;\n  prizeDescription?: string;\n  winnersCount?: number;\n  winnerIds: string[];\n  additionalPeersCount?: number;\n  launchMessageId: number;\n  unclaimedCount: number;\n};\n\nexport type ApiNewPoll = {\n  summary: ApiPoll['summary'];\n  quiz?: {\n    correctAnswers: string[];\n    solution?: string;\n    solutionEntities?: ApiMessageEntity[];\n  };\n};\n\nexport interface ApiMessageActionStarGift {\n  type: 'starGift';\n  isNameHidden: boolean;\n  isSaved: boolean;\n  isConverted?: true;\n  gift: ApiStarGiftRegular;\n  message?: ApiFormattedText;\n  starsToConvert?: number;\n  canUpgrade?: true;\n  isUpgraded?: true;\n  upgradeMsgId?: number;\n  alreadyPaidUpgradeStars?: number;\n  fromId?: string;\n  peerId?: string;\n  savedId?: string;\n  inputSavedGift?: ApiInputSavedStarGift;\n}\n\nexport interface ApiMessageActionStarGiftUnique {\n  type: 'starGiftUnique';\n  isUpgrade?: true;\n  isTransferred?: true;\n  isSaved?: true;\n  isRefunded?: true;\n  gift: ApiStarGiftUnique;\n  canExportAt?: number;\n  transferStars?: number;\n  fromId?: string;\n  peerId?: string;\n  savedId?: string;\n  inputSavedGift?: ApiInputSavedStarGift;\n}\n\nexport interface ApiAction {\n  mediaType: 'action';\n  text: string;\n  targetUserIds?: string[];\n  targetChatId?: string;\n  type:\n  | 'historyClear'\n  | 'contactSignUp'\n  | 'chatCreate'\n  | 'topicCreate'\n  | 'suggestProfilePhoto'\n  | 'updateProfilePhoto'\n  | 'joinedChannel'\n  | 'chatBoost'\n  | 'receipt'\n  | 'giftStars'\n  | 'giftPremium'\n  | 'giftCode'\n  | 'prizeStars'\n  | 'starGift'\n  | 'starGiftUnique'\n  | 'other';\n  photo?: ApiPhoto;\n  amount?: number;\n  stars?: number;\n  transactionId?: string;\n  currency?: string;\n  giftCryptoInfo?: {\n    currency: string;\n    amount: number;\n  };\n  starGift?: ApiMessageActionStarGift | ApiMessageActionStarGiftUnique;\n  translationValues: string[];\n  call?: Partial<ApiGroupCall>;\n  phoneCall?: PhoneCallAction;\n  score?: number;\n  months?: number;\n  topicEmojiIconId?: string;\n  isTopicAction?: boolean;\n  slug?: string;\n  isGiveaway?: boolean;\n  isUnclaimed?: boolean;\n  pluralValue?: number;\n  message?: ApiFormattedText;\n}\n\nexport interface ApiWebPage {\n  mediaType: 'webpage';\n  id: number;\n  url: string;\n  displayUrl: string;\n  type?: string;\n  siteName?: string;\n  title?: string;\n  description?: string;\n  photo?: ApiPhoto;\n  audio?: ApiAudio;\n  duration?: number;\n  document?: ApiDocument;\n  video?: ApiVideo;\n  story?: ApiWebPageStoryData;\n  gift?: ApiStarGiftUnique;\n  stickers?: ApiWebPageStickerData;\n  mediaSize?: WebPageMediaSize;\n  hasLargeMedia?: boolean;\n}\n\nexport type ApiReplyInfo = ApiMessageReplyInfo | ApiStoryReplyInfo;\n\nexport interface ApiMessageReplyInfo {\n  type: 'message';\n  replyToMsgId?: number;\n  replyToPeerId?: string;\n  replyFrom?: ApiMessageForwardInfo;\n  replyMedia?: MediaContent;\n  replyToTopId?: number;\n  isForumTopic?: true;\n  isQuote?: true;\n  quoteText?: ApiFormattedText;\n}\n\nexport interface ApiStoryReplyInfo {\n  type: 'story';\n  peerId: string;\n  storyId: number;\n}\n\nexport interface ApiInputMessageReplyInfo {\n  type: 'message';\n  replyToMsgId: number;\n  replyToTopId?: number;\n  replyToPeerId?: string;\n  quoteText?: ApiFormattedText;\n}\n\nexport interface ApiInputStoryReplyInfo {\n  type: 'story';\n  peerId: string;\n  storyId: number;\n}\n\nexport type ApiInputReplyInfo = ApiInputMessageReplyInfo | ApiInputStoryReplyInfo;\n\nexport interface ApiMessageForwardInfo {\n  date: number;\n  savedDate?: number;\n  isImported?: boolean;\n  isChannelPost: boolean;\n  channelPostId?: number;\n  isLinkedChannelPost?: boolean;\n  fromChatId?: string;\n  fromId?: string;\n  savedFromPeerId?: string;\n  isSavedOutgoing?: boolean;\n  fromMessageId?: number;\n  hiddenUserName?: string;\n  postAuthorTitle?: string;\n}\n\nexport interface ApiStoryForwardInfo {\n  fromPeerId?: string;\n  fromName?: string;\n  storyId?: number;\n  isModified?: boolean;\n}\n\nexport type ApiMessageEntityDefault = {\n  type: Exclude<\n  `${ApiMessageEntityTypes}`,\n  `${ApiMessageEntityTypes.Pre}` | `${ApiMessageEntityTypes.TextUrl}` | `${ApiMessageEntityTypes.MentionName}` |\n  `${ApiMessageEntityTypes.CustomEmoji}` | `${ApiMessageEntityTypes.Blockquote}`\n  >;\n  offset: number;\n  length: number;\n};\n\nexport type ApiMessageEntityPre = {\n  type: ApiMessageEntityTypes.Pre;\n  offset: number;\n  length: number;\n  language?: string;\n};\n\nexport type ApiMessageEntityTextUrl = {\n  type: ApiMessageEntityTypes.TextUrl;\n  offset: number;\n  length: number;\n  url: string;\n};\n\nexport type ApiMessageEntityMentionName = {\n  type: ApiMessageEntityTypes.MentionName;\n  offset: number;\n  length: number;\n  userId: string;\n};\n\nexport type ApiMessageEntityBlockquote = {\n  type: ApiMessageEntityTypes.Blockquote;\n  offset: number;\n  length: number;\n  canCollapse?: boolean;\n};\n\nexport type ApiMessageEntityCustomEmoji = {\n  type: ApiMessageEntityTypes.CustomEmoji;\n  offset: number;\n  length: number;\n  documentId: string;\n};\n\nexport type ApiMessageEntity = ApiMessageEntityDefault | ApiMessageEntityPre | ApiMessageEntityTextUrl |\nApiMessageEntityMentionName | ApiMessageEntityCustomEmoji | ApiMessageEntityBlockquote;\n\nexport enum ApiMessageEntityTypes {\n  Bold = 'MessageEntityBold',\n  Blockquote = 'MessageEntityBlockquote',\n  BotCommand = 'MessageEntityBotCommand',\n  Cashtag = 'MessageEntityCashtag',\n  Code = 'MessageEntityCode',\n  Email = 'MessageEntityEmail',\n  Hashtag = 'MessageEntityHashtag',\n  Italic = 'MessageEntityItalic',\n  MentionName = 'MessageEntityMentionName',\n  Mention = 'MessageEntityMention',\n  Phone = 'MessageEntityPhone',\n  Pre = 'MessageEntityPre',\n  Strike = 'MessageEntityStrike',\n  TextUrl = 'MessageEntityTextUrl',\n  Url = 'MessageEntityUrl',\n  Underline = 'MessageEntityUnderline',\n  Spoiler = 'MessageEntitySpoiler',\n  CustomEmoji = 'MessageEntityCustomEmoji',\n  Unknown = 'MessageEntityUnknown',\n}\n\nexport interface ApiFormattedText {\n  text: string;\n  entities?: ApiMessageEntity[];\n}\n\nexport type MediaContent = {\n  text?: ApiFormattedText;\n  photo?: ApiPhoto;\n  video?: ApiVideo;\n  altVideos?: ApiVideo[];\n  document?: ApiDocument;\n  sticker?: ApiSticker;\n  contact?: ApiContact;\n  pollId?: string;\n  action?: ApiAction;\n  webPage?: ApiWebPage;\n  audio?: ApiAudio;\n  voice?: ApiVoice;\n  invoice?: ApiMediaInvoice;\n  location?: ApiLocation;\n  game?: ApiGame;\n  storyData?: ApiMessageStoryData;\n  giveaway?: ApiGiveaway;\n  giveawayResults?: ApiGiveawayResults;\n  paidMedia?: ApiPaidMedia;\n  isExpiredVoice?: boolean;\n  isExpiredRoundVideo?: boolean;\n  ttlSeconds?: number;\n};\nexport type MediaContainer = {\n  content: MediaContent;\n};\n\nexport type StatefulMediaContent = {\n  poll?: ApiPoll;\n  story?: ApiStory;\n};\n\nexport type BoughtPaidMedia = Pick<MediaContent, 'photo' | 'video'>;\n\nexport interface ApiMessage {\n  id: number;\n  chatId: string;\n  content: MediaContent;\n  date: number;\n  isOutgoing: boolean;\n  senderId?: string;\n  replyInfo?: ApiReplyInfo;\n  sendingState?: 'messageSendingStatePending' | 'messageSendingStateFailed';\n  forwardInfo?: ApiMessageForwardInfo;\n  isDeleting?: boolean;\n  previousLocalId?: number;\n  viewsCount?: number;\n  forwardsCount?: number;\n  isEdited?: boolean;\n  editDate?: number;\n  isMentioned?: boolean;\n  isMediaUnread?: boolean;\n  groupedId?: string;\n  isInAlbum?: boolean;\n  hasUnreadMention?: boolean;\n  inlineButtons?: ApiKeyboardButtons;\n  keyboardButtons?: ApiKeyboardButtons;\n  keyboardPlaceholder?: string;\n  isKeyboardSingleUse?: boolean;\n  isKeyboardSelective?: boolean;\n  viaBotId?: string;\n  viaBusinessBotId?: string;\n  postAuthorTitle?: string;\n  isScheduled?: boolean;\n  shouldHideKeyboardButtons?: boolean;\n  isHideKeyboardSelective?: boolean;\n  isFromScheduled?: boolean;\n  isSilent?: boolean;\n  isPinned?: boolean;\n  seenByDates?: Record<string, number>;\n  isProtected?: boolean;\n  isForwardingAllowed?: boolean;\n  transcriptionId?: string;\n  isTranscriptionError?: boolean;\n  emojiOnlyCount?: number;\n  reactors?: {\n    nextOffset?: string;\n    count: number;\n    reactions: ApiPeerReaction[];\n  };\n  reactions?: ApiReactions;\n  hasComments?: boolean;\n  readDate?: number;\n  savedPeerId?: string;\n  senderBoosts?: number;\n  factCheck?: ApiFactCheck;\n  effectId?: string;\n  isInvertedMedia?: true;\n  isVideoProcessingPending?: true;\n  areReactionsPossible?: true;\n  reportDeliveryUntilDate?: number;\n}\n\nexport interface ApiReactions {\n  canSeeList?: boolean;\n  areTags?: boolean;\n  results: ApiReactionCount[];\n  recentReactions?: ApiPeerReaction[];\n  topReactors?: ApiMessageReactor[];\n}\n\nexport interface ApiPeerReaction {\n  peerId: string;\n  reaction: ApiReaction;\n  isOwn?: boolean;\n  isBig?: boolean;\n  isUnread?: boolean;\n  addedDate: number;\n}\n\nexport interface ApiMessageReactor {\n  isTop?: true;\n  isMe?: true;\n  count: number;\n  isAnonymous?: true;\n  peerId?: string;\n}\n\nexport interface ApiReactionCount {\n  chosenOrder?: number;\n  count: number;\n  reaction: ApiReactionWithPaid;\n  localAmount?: number;\n  localIsPrivate?: boolean;\n  localPreviousChosenOrder?: number;\n}\n\nexport interface ApiAvailableReaction {\n  selectAnimation?: ApiDocument;\n  appearAnimation?: ApiDocument;\n  activateAnimation?: ApiDocument;\n  effectAnimation?: ApiDocument;\n  staticIcon?: ApiDocument;\n  centerIcon?: ApiDocument;\n  aroundAnimation?: ApiDocument;\n  reaction: ApiReactionEmoji;\n  title: string;\n  isInactive?: boolean;\n  isPremium?: boolean;\n}\n\nexport interface ApiAvailableEffect {\n  id: string;\n  emoticon: string;\n  staticIconId?: string;\n  effectAnimationId?: string;\n  effectStickerId: string;\n  isPremium?: boolean;\n}\n\ntype ApiChatReactionsAll = {\n  type: 'all';\n  areCustomAllowed?: true;\n};\n\ntype ApiChatReactionsSome = {\n  type: 'some';\n  allowed: ApiReaction[];\n};\n\nexport type ApiChatReactions = ApiChatReactionsAll | ApiChatReactionsSome;\n\nexport type ApiReactionEmoji = {\n  type: 'emoji';\n  emoticon: string;\n};\n\nexport type ApiReactionCustomEmoji = {\n  type: 'custom';\n  documentId: string;\n};\n\nexport type ApiReactionPaid = {\n  type: 'paid';\n};\n\nexport type ApiReaction = ApiReactionEmoji | ApiReactionCustomEmoji;\nexport type ApiReactionWithPaid = ApiReaction | ApiReactionPaid;\n\nexport type ApiReactionKey = `${string}-${string}` | 'paid' | 'unsupported';\n\nexport type ApiSavedReactionTag = {\n  reaction: ApiReaction;\n  title?: string;\n  count: number;\n};\n\ninterface ApiBaseThreadInfo {\n  chatId: string;\n  messagesCount: number;\n  lastMessageId?: number;\n  lastReadInboxMessageId?: number;\n  recentReplierIds?: string[];\n}\n\nexport interface ApiCommentsInfo extends ApiBaseThreadInfo {\n  isCommentsInfo: true;\n  threadId?: never;\n  originChannelId: string;\n  originMessageId: number;\n}\n\nexport interface ApiMessageThreadInfo extends ApiBaseThreadInfo {\n  isCommentsInfo: false;\n  threadId: ThreadId;\n  // For linked messages in discussion\n  fromChannelId?: string;\n  fromMessageId?: number;\n}\n\nexport type ApiThreadInfo = ApiCommentsInfo | ApiMessageThreadInfo;\n\nexport type ApiMessageReportResult = {\n  type: 'reported';\n} | {\n  type: 'comment';\n  isOptional?: boolean;\n  option: string;\n} | {\n  type: 'selectOption';\n  title: string;\n  options: {\n    text: string;\n    option: string;\n  }[];\n};\n\nexport type ApiMessageOutgoingStatus = 'read' | 'succeeded' | 'pending' | 'failed';\n\nexport type ApiSponsoredMessage = {\n  chatId: string;\n  randomId: string;\n  isRecommended?: true;\n  expiresAt: number;\n  sponsorInfo?: string;\n  additionalInfo?: string;\n  buttonText?: string;\n  canReport?: true;\n  title: string;\n  url: string;\n  photo?: ApiPhoto;\n  content: MediaContent;\n  peerColor?: ApiPeerColor;\n};\n\n// KeyboardButtons\n\ninterface ApiKeyboardButtonSimple {\n  type: 'unsupported' | 'buy' | 'command' | 'requestPhone' | 'game';\n  text: string;\n}\n\ninterface ApiKeyboardButtonReceipt {\n  type: 'receipt';\n  receiptMessageId: number;\n}\n\ninterface ApiKeyboardButtonUrl {\n  type: 'url';\n  text: string;\n  url: string;\n}\n\ninterface ApiKeyboardButtonSimpleWebView {\n  type: 'simpleWebView';\n  text: string;\n  url: string;\n}\n\ninterface ApiKeyboardButtonWebView {\n  type: 'webView';\n  text: string;\n  url: string;\n}\n\ninterface ApiKeyboardButtonCallback {\n  type: 'callback';\n  text: string;\n  data: string;\n}\n\ninterface ApiKeyboardButtonRequestPoll {\n  type: 'requestPoll';\n  text: string;\n  isQuiz?: boolean;\n}\n\ninterface ApiKeyboardButtonSwitchBotInline {\n  type: 'switchBotInline';\n  text: string;\n  query: string;\n  isSamePeer?: boolean;\n}\n\ninterface ApiKeyboardButtonUserProfile {\n  type: 'userProfile';\n  text: string;\n  userId: string;\n}\n\ninterface ApiKeyboardButtonUrlAuth {\n  type: 'urlAuth';\n  text: string;\n  url: string;\n  buttonId: number;\n}\n\ninterface ApiKeyboardButtonCopy {\n  type: 'copy';\n  text: string;\n  copyText: string;\n}\n\nexport type ApiKeyboardButton = (\n  ApiKeyboardButtonSimple\n  | ApiKeyboardButtonReceipt\n  | ApiKeyboardButtonUrl\n  | ApiKeyboardButtonCallback\n  | ApiKeyboardButtonRequestPoll\n  | ApiKeyboardButtonSwitchBotInline\n  | ApiKeyboardButtonUserProfile\n  | ApiKeyboardButtonWebView\n  | ApiKeyboardButtonSimpleWebView\n  | ApiKeyboardButtonUrlAuth\n  | ApiKeyboardButtonCopy\n);\n\nexport type ApiKeyboardButtons = ApiKeyboardButton[][];\nexport type ApiReplyKeyboard = {\n  keyboardPlaceholder?: string;\n  isKeyboardSingleUse?: boolean;\n  isKeyboardSelective?: boolean;\n} & {\n  [K in 'inlineButtons' | 'keyboardButtons']?: ApiKeyboardButtons;\n};\n\nexport type ApiTranscription = {\n  text: string;\n  isPending?: boolean;\n  transcriptionId: string;\n};\n\nexport type ApiMessageSearchType = 'text' | 'media' | 'documents' | 'links' | 'audio' | 'voice' | 'profilePhoto';\nexport type ApiGlobalMessageSearchType = 'text' | 'channels' | 'media' | 'documents' | 'links' | 'audio' | 'voice';\nexport type ApiMessageSearchContext = 'all' | 'users' | 'groups' | 'channels';\n\nexport type ApiReportReason = 'spam' | 'violence' | 'pornography' | 'childAbuse'\n| 'copyright' | 'geoIrrelevant' | 'fake' | 'illegalDrugs' | 'personalDetails' | 'other';\n\nexport type ApiSendMessageAction = {\n  type: 'cancel' | 'typing' | 'recordAudio' | 'chooseSticker' | 'playingGame';\n};\n\nexport type ApiThemeParameters = {\n  bg_color: string;\n  text_color: string;\n  hint_color: string;\n  link_color: string;\n  button_color: string;\n  button_text_color: string;\n  secondary_bg_color: string;\n  header_bg_color: string;\n  accent_text_color: string;\n  section_bg_color: string;\n  section_header_text_color: string;\n  subtitle_text_color: string;\n  destructive_text_color: string;\n  section_separator_color: string;\n};\n\nexport type ApiBotApp = {\n  id: string;\n  accessHash: string;\n  title: string;\n  shortName: string;\n  description: string;\n  photo?: ApiPhoto;\n  document?: ApiDocument;\n};\n\nexport type ApiMessagesBotApp = ApiBotApp & {\n  isInactive?: boolean;\n  shouldRequestWriteAccess?: boolean;\n};\n\nexport type ApiQuickReply = {\n  id: number;\n  shortcut: string;\n  topMessageId: number;\n};\n\nexport type ApiFactCheck = {\n  shouldFetch?: true;\n  hash: string;\n  countryCode?: string;\n  text?: ApiFormattedText;\n};\n\nexport type ApiSponsoredMessageReportResult = {\n  type: 'reported' | 'hidden' | 'premiumRequired';\n} | {\n  type: 'selectOption';\n  title: string;\n  options: {\n    text: string;\n    option: string;\n  }[];\n};\n\nexport const MAIN_THREAD_ID = -1;\n\n// `Symbol` can not be transferred from worker\nexport const MESSAGE_DELETED = 'MESSAGE_DELETED';\n","// We cache avatars as Data URI for faster initial load\n// and messages media as Blob for smaller size.\n\nexport enum ApiMediaFormat {\n  BlobUrl,\n  Progressive,\n  DownloadUrl,\n  Text,\n}\n\nexport type ApiParsedMedia = string | Blob | ArrayBuffer;\nexport type ApiPreparedMedia = string;\n","// Copyright Twitter Inc. Licensed under MIT\n// https://github.com/twitter/twemoji-parser/blob/master/LICENSE.md\n// Emoji 15.0.2 support was taken here https://github.com/mei23/twemoji-parser\n// Version 3d4dedc 15.12.2023\n\nconst vs16RegExp = /\\uFE0F/g;\n// avoid using a string literal like `\\u200D` here because minifiers expand it inline\nconst zeroWidthJoiner = String.fromCharCode(0x200d);\n\nexport function removeVS16s(rawEmoji) {\n  return rawEmoji.indexOf(zeroWidthJoiner) < 0 ? rawEmoji.replace(vs16RegExp, '') : rawEmoji;\n}\n\n// Default Twemoji regex was modified here.\n// An exception for ascii emoji has been added to the beginning of the regular string: 🅰🅱🅾🅿.\n// UTF-16 endcoding are `\\ud83c\\udd70`, `\\ud83c\\udd71`, `\\ud83c\\udd7e` and `\\ud83c\\udd7f`.\n// These emojis in the graphic version must end with the `\\ufe0f` symbol.\n// Therefore, they should be excluded from the regular expression.\n// You must remove next substring `\\udd70\\udd71\\udd7e\\udd7f` from the middle of the regex on every update.\n\n// This file is generated by source/emoji/scripts/generate.sh\n// eslint-disable-next-line max-len\nexport default /(?:\\ud83c[\\udd70\\udd71\\udd7e\\udd7f]\\ufe0f)|(?:\\ud83d\\udc68\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffc-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83e\\uddd1\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83e\\uddd1\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc68\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc68\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc68\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc68\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc68\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udffe]|\\ud83e\\uddd1\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffc-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83e\\uddd1\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83e\\uddd1\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffe]|\\ud83e\\uddd1\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68|\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d[\\udc68\\udc69]|\\ud83e\\udef1\\ud83c\\udffb\\u200d\\ud83e\\udef2\\ud83c[\\udffc-\\udfff]|\\ud83e\\udef1\\ud83c\\udffc\\u200d\\ud83e\\udef2\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83e\\udef1\\ud83c\\udffd\\u200d\\ud83e\\udef2\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83e\\udef1\\ud83c\\udffe\\u200d\\ud83e\\udef2\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83e\\udef1\\ud83c\\udfff\\u200d\\ud83e\\udef2\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68|\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d[\\udc68\\udc69]|\\ud83e\\uddd1\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1|\\ud83d\\udc6b\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc6c\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc6d\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc8f\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc91\\ud83c[\\udffb-\\udfff]|\\ud83e\\udd1d\\ud83c[\\udffb-\\udfff]|\\ud83d[\\udc6b-\\udc6d\\udc8f\\udc91]|\\ud83e\\udd1d)|(?:\\ud83c\\udfc3|\\ud83d\\udeb6|\\ud83e\\uddce)(?:\\ud83c[\\udffb-\\udfff])?(?:\\u200d[\\u2640\\u2642]\\ufe0f)?(?:\\u200d\\u27a1\\ufe0f)|(?:\\ud83d[\\udc68\\udc69]|\\ud83e\\uddd1)(?:\\ud83c[\\udffb-\\udfff])?\\u200d(?:\\ud83e[\\uddaf\\uddbc\\uddbd])(?:\\u200d\\u27a1\\ufe0f)|(?:\\ud83d[\\udc68\\udc69]|\\ud83e\\uddd1)(?:\\ud83c[\\udffb-\\udfff])?\\u200d(?:\\u2695\\ufe0f|\\u2696\\ufe0f|\\u2708\\ufe0f|\\ud83c[\\udf3e\\udf73\\udf7c\\udf84\\udf93\\udfa4\\udfa8\\udfeb\\udfed]|\\ud83d[\\udcbb\\udcbc\\udd27\\udd2c\\ude80\\ude92]|\\ud83e[\\uddaf\\uddaf-\\uddb3\\uddbc\\uddbc\\uddbd\\uddbd])|(?:\\ud83c[\\udfcb\\udfcc]|\\ud83d[\\udd74\\udd75]|\\u26f9)((?:\\ud83c[\\udffb-\\udfff]|\\ufe0f)\\u200d[\\u2640\\u2642]\\ufe0f)|(?:\\ud83c[\\udfc3\\udfc3\\udfc4\\udfca]|\\ud83d[\\udc6e\\udc70\\udc71\\udc73\\udc77\\udc81\\udc82\\udc86\\udc87\\ude45-\\ude47\\ude4b\\ude4d\\ude4e\\udea3\\udeb4-\\udeb6\\udeb6]|\\ud83e[\\udd26\\udd35\\udd37-\\udd39\\udd3d\\udd3e\\uddb8\\uddb9\\uddcd\\uddce\\uddce\\uddcf\\uddd4\\uddd6-\\udddd])(?:\\ud83c[\\udffb-\\udfff])?\\u200d[\\u2640\\u2642]\\ufe0f|(?:\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83e\\uddd1\\u200d\\ud83e\\uddd1\\u200d\\ud83e\\uddd2\\u200d\\ud83e\\uddd2|\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83e\\uddd1\\u200d\\ud83e\\uddd1\\u200d\\ud83e\\uddd2|\\ud83e\\uddd1\\u200d\\ud83e\\uddd2\\u200d\\ud83e\\uddd2|\\ud83c\\udff3\\ufe0f\\u200d\\u26a7\\ufe0f|\\ud83c\\udff3\\ufe0f\\u200d\\ud83c\\udf08|\\ud83d\\ude36\\u200d\\ud83c\\udf2b\\ufe0f|\\u26d3\\ufe0f\\u200d\\ud83d\\udca5|\\u2764\\ufe0f\\u200d\\ud83d\\udd25|\\u2764\\ufe0f\\u200d\\ud83e\\ude79|\\ud83c\\udf44\\u200d\\ud83d\\udfeb|\\ud83c\\udf4b\\u200d\\ud83d\\udfe9|\\ud83c\\udff4\\u200d\\u2620\\ufe0f|\\ud83d\\udc15\\u200d\\ud83e\\uddba|\\ud83d\\udc26\\u200d\\ud83d\\udd25|\\ud83d\\udc3b\\u200d\\u2744\\ufe0f|\\ud83d\\udc41\\u200d\\ud83d\\udde8|\\ud83d\\udc68\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc6f\\u200d\\u2640\\ufe0f|\\ud83d\\udc6f\\u200d\\u2642\\ufe0f|\\ud83d\\ude2e\\u200d\\ud83d\\udca8|\\ud83d\\ude35\\u200d\\ud83d\\udcab|\\ud83d\\ude42\\u200d\\u2194\\ufe0f|\\ud83d\\ude42\\u200d\\u2195\\ufe0f|\\ud83e\\udd3c\\u200d\\u2640\\ufe0f|\\ud83e\\udd3c\\u200d\\u2642\\ufe0f|\\ud83e\\uddd1\\u200d\\ud83e\\uddd2|\\ud83e\\uddde\\u200d\\u2640\\ufe0f|\\ud83e\\uddde\\u200d\\u2642\\ufe0f|\\ud83e\\udddf\\u200d\\u2640\\ufe0f|\\ud83e\\udddf\\u200d\\u2642\\ufe0f|\\ud83d\\udc08\\u200d\\u2b1b|\\ud83d\\udc26\\u200d\\u2b1b)|[#*0-9]\\ufe0f?\\u20e3|(?:[©®\\u2122\\u265f]\\ufe0f)|(?:\\ud83c[\\udc04\\ude02\\ude1a\\ude2f\\ude37\\udf21\\udf24-\\udf2c\\udf36\\udf7d\\udf96\\udf97\\udf99-\\udf9b\\udf9e\\udf9f\\udfcd\\udfce\\udfd4-\\udfdf\\udff3\\udff5\\udff7]|\\ud83d[\\udc3f\\udc41\\udcfd\\udd49\\udd4a\\udd6f\\udd70\\udd73\\udd76-\\udd79\\udd87\\udd8a-\\udd8d\\udda5\\udda8\\uddb1\\uddb2\\uddbc\\uddc2-\\uddc4\\uddd1-\\uddd3\\udddc-\\uddde\\udde1\\udde3\\udde8\\uddef\\uddf3\\uddfa\\udecb\\udecd-\\udecf\\udee0-\\udee5\\udee9\\udef0\\udef3]|[\\u203c\\u2049\\u2139\\u2194-\\u2199\\u21a9\\u21aa\\u231a\\u231b\\u2328\\u23cf\\u23ed-\\u23ef\\u23f1\\u23f2\\u23f8-\\u23fa\\u24c2\\u25aa\\u25ab\\u25b6\\u25c0\\u25fb-\\u25fe\\u2600-\\u2604\\u260e\\u2611\\u2614\\u2615\\u2618\\u2620\\u2622\\u2623\\u2626\\u262a\\u262e\\u262f\\u2638-\\u263a\\u2640\\u2642\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267b\\u267f\\u2692-\\u2697\\u2699\\u269b\\u269c\\u26a0\\u26a1\\u26a7\\u26aa\\u26ab\\u26b0\\u26b1\\u26bd\\u26be\\u26c4\\u26c5\\u26c8\\u26cf\\u26d1\\u26d3\\u26d4\\u26e9\\u26ea\\u26f0-\\u26f5\\u26f8\\u26fa\\u26fd\\u2702\\u2708\\u2709\\u270f\\u2712\\u2714\\u2716\\u271d\\u2721\\u2733\\u2734\\u2744\\u2747\\u2757\\u2763\\u2764\\u27a1\\u2934\\u2935\\u2b05-\\u2b07\\u2b1b\\u2b1c\\u2b50\\u2b55\\u3030\\u303d\\u3297\\u3299])(?:\\ufe0f|(?!\\ufe0e))|(?:(?:\\ud83c[\\udfcb\\udfcc]|\\ud83d[\\udd74\\udd75\\udd90]|\\ud83e\\udef0|[\\u261d\\u26f7\\u26f9\\u270c\\u270d])(?:\\ufe0f|(?!\\ufe0e))|(?:\\ud83c[\\udf85\\udfc2-\\udfc4\\udfc7\\udfca]|\\ud83d[\\udc42\\udc43\\udc46-\\udc50\\udc66-\\udc69\\udc6e\\udc70-\\udc78\\udc7c\\udc81-\\udc83\\udc85-\\udc87\\udcaa\\udd7a\\udd95\\udd96\\ude45-\\ude47\\ude4b-\\ude4f\\udea3\\udeb4-\\udeb6\\udec0\\udecc]|\\ud83e[\\udd0c\\udd0f\\udd18-\\udd1c\\udd1e\\udd1f\\udd26\\udd30-\\udd39\\udd3d\\udd3e\\udd77\\uddb5\\uddb6\\uddb8\\uddb9\\uddbb\\uddcd-\\uddcf\\uddd1-\\udddd\\udec3-\\udec5\\udef1-\\udef8]|[\\u270a\\u270b]))(?:\\ud83c[\\udffb-\\udfff])?|(?:\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc65\\udb40\\udc6e\\udb40\\udc67\\udb40\\udc7f|\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc73\\udb40\\udc63\\udb40\\udc74\\udb40\\udc7f|\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc77\\udb40\\udc6c\\udb40\\udc73\\udb40\\udc7f|\\ud83c\\udde6\\ud83c[\\udde8-\\uddec\\uddee\\uddf1\\uddf2\\uddf4\\uddf6-\\uddfa\\uddfc\\uddfd\\uddff]|\\ud83c\\udde7\\ud83c[\\udde6\\udde7\\udde9-\\uddef\\uddf1-\\uddf4\\uddf6-\\uddf9\\uddfb\\uddfc\\uddfe\\uddff]|\\ud83c\\udde8\\ud83c[\\udde6\\udde8\\udde9\\uddeb-\\uddee\\uddf0-\\uddf5\\uddf7\\uddfa-\\uddff]|\\ud83c\\udde9\\ud83c[\\uddea\\uddec\\uddef\\uddf0\\uddf2\\uddf4\\uddff]|\\ud83c\\uddea\\ud83c[\\udde6\\udde8\\uddea\\uddec\\udded\\uddf7-\\uddfa]|\\ud83c\\uddeb\\ud83c[\\uddee-\\uddf0\\uddf2\\uddf4\\uddf7]|\\ud83c\\uddec\\ud83c[\\udde6\\udde7\\udde9-\\uddee\\uddf1-\\uddf3\\uddf5-\\uddfa\\uddfc\\uddfe]|\\ud83c\\udded\\ud83c[\\uddf0\\uddf2\\uddf3\\uddf7\\uddf9\\uddfa]|\\ud83c\\uddee\\ud83c[\\udde8-\\uddea\\uddf1-\\uddf4\\uddf6-\\uddf9]|\\ud83c\\uddef\\ud83c[\\uddea\\uddf2\\uddf4\\uddf5]|\\ud83c\\uddf0\\ud83c[\\uddea\\uddec-\\uddee\\uddf2\\uddf3\\uddf5\\uddf7\\uddfc\\uddfe\\uddff]|\\ud83c\\uddf1\\ud83c[\\udde6-\\udde8\\uddee\\uddf0\\uddf7-\\uddfb\\uddfe]|\\ud83c\\uddf2\\ud83c[\\udde6\\udde8-\\udded\\uddf0-\\uddff]|\\ud83c\\uddf3\\ud83c[\\udde6\\udde8\\uddea-\\uddec\\uddee\\uddf1\\uddf4\\uddf5\\uddf7\\uddfa\\uddff]|\\ud83c\\uddf4\\ud83c\\uddf2|\\ud83c\\uddf5\\ud83c[\\udde6\\uddea-\\udded\\uddf0-\\uddf3\\uddf7-\\uddf9\\uddfc\\uddfe]|\\ud83c\\uddf6\\ud83c\\udde6|\\ud83c\\uddf7\\ud83c[\\uddea\\uddf4\\uddf8\\uddfa\\uddfc]|\\ud83c\\uddf8\\ud83c[\\udde6-\\uddea\\uddec-\\uddf4\\uddf7-\\uddf9\\uddfb\\uddfd-\\uddff]|\\ud83c\\uddf9\\ud83c[\\udde6\\udde8\\udde9\\uddeb-\\udded\\uddef-\\uddf4\\uddf7\\uddf9\\uddfb\\uddfc\\uddff]|\\ud83c\\uddfa\\ud83c[\\udde6\\uddec\\uddf2\\uddf3\\uddf8\\uddfe\\uddff]|\\ud83c\\uddfb\\ud83c[\\udde6\\udde8\\uddea\\uddec\\uddee\\uddf3\\uddfa]|\\ud83c\\uddfc\\ud83c[\\uddeb\\uddf8]|\\ud83c\\uddfd\\ud83c\\uddf0|\\ud83c\\uddfe\\ud83c[\\uddea\\uddf9]|\\ud83c\\uddff\\ud83c[\\udde6\\uddf2\\uddfc]|\\ud83c[\\udccf\\udd8e\\udd91-\\udd9a\\udde6-\\uddff\\ude01\\ude32-\\ude36\\ude38-\\ude3a\\ude50\\ude51\\udf00-\\udf20\\udf2d-\\udf35\\udf37-\\udf7c\\udf7e-\\udf84\\udf86-\\udf93\\udfa0-\\udfc1\\udfc5\\udfc6\\udfc8\\udfc9\\udfcf-\\udfd3\\udfe0-\\udff0\\udff4\\udff8-\\udfff]|\\ud83d[\\udc00-\\udc3e\\udc40\\udc44\\udc45\\udc51-\\udc65\\udc6a\\udc6f\\udc79-\\udc7b\\udc7d-\\udc80\\udc84\\udc88-\\udc8e\\udc90\\udc92-\\udca9\\udcab-\\udcfc\\udcff-\\udd3d\\udd4b-\\udd4e\\udd50-\\udd67\\udda4\\uddfb-\\ude44\\ude48-\\ude4a\\ude80-\\udea2\\udea4-\\udeb3\\udeb7-\\udebf\\udec1-\\udec5\\uded0-\\uded2\\uded5-\\uded7\\udedc-\\udedf\\udeeb\\udeec\\udef4-\\udefc\\udfe0-\\udfeb\\udff0]|\\ud83e[\\udd0d\\udd0e\\udd10-\\udd17\\udd20-\\udd25\\udd27-\\udd2f\\udd3a\\udd3c\\udd3f-\\udd45\\udd47-\\udd76\\udd78-\\uddb4\\uddb7\\uddba\\uddbc-\\uddcc\\uddd0\\uddde-\\uddff\\ude70-\\ude7c\\ude80-\\ude88\\ude90-\\udebd\\udebf-\\udec2\\udece-\\udedb\\udee0-\\udee8]|[\\u23e9-\\u23ec\\u23f0\\u23f3\\u267e\\u26ce\\u2705\\u2728\\u274c\\u274e\\u2753-\\u2755\\u2795-\\u2797\\u27b0\\u27bf\\ue50a])|\\ufe0f/g;\n","import EMOJI_REGEX from '../../lib/twemojiRegex';\n\n// Non-standard variations of emojis, used on some devices\nconst EMOJI_EXCEPTIONS: [string | RegExp, string][] = [\n  [/\\u{1f3f3}\\u200d\\u{1f308}/gu, '\\u{1f3f3}\\ufe0f\\u200d\\u{1f308}'], // 🏳‍🌈\n  [/\\u{1f3f3}\\u200d\\u26a7\\ufe0f?/gu, '\\u{1f3f3}\\ufe0f\\u200d\\u26a7\\ufe0f'], // 🏳️‍⚧️\n  [/\\u26d3\\u200d\\u{1f4a5}/gu, '\\u26d3\\ufe0f\\u200d\\u{1f4a5}'], // ⛓‍💥\n  [/\\u200d([\\u2640\\u2642])(?!\\ufe0f)/gu, '\\u200d$1\\ufe0f'], // Gender variation without 0xFE0F\n];\n\nexport default function fixNonStandardEmoji(text: string) {\n  // Non-standard sequences typically parsed as separate emojis, so no need to fix text without any\n  if (!text.match(EMOJI_REGEX)) return text;\n  // eslint-disable-next-line no-restricted-syntax\n  for (const [regex, replacement] of EMOJI_EXCEPTIONS) {\n    text = text.replace(regex, replacement);\n  }\n\n  return text;\n}\n","import EMOJI_REGEX from '../../lib/twemojiRegex';\nimport fixNonStandardEmoji from './fixNonStandardEmoji';\n\nconst DETECT_UP_TO = 100;\nconst MAX_LENGTH = DETECT_UP_TO * 8; // Maximum 8 code points per one emoji.\n\nexport default function parseEmojiOnlyString(text: string): number | false {\n  const standardizedText = fixNonStandardEmoji(text);\n  const lines = standardizedText.split('\\n');\n  const textWithoutNewlines = lines.join('');\n  if (textWithoutNewlines.length > MAX_LENGTH) {\n    return false;\n  }\n\n  const totalCount = countIfEmojiOnly(textWithoutNewlines);\n  if (!totalCount || totalCount > DETECT_UP_TO) {\n    return false;\n  }\n\n  // Calculate max emoji count per column or line. Used in UI to determine the size of the emoji.\n  let max = lines.length;\n  for (const line of lines) {\n    const count = countIfEmojiOnly(line);\n    if (count === false) {\n      return false;\n    }\n    if (count > max) {\n      max = count;\n    }\n  }\n\n  return max;\n}\n\nfunction countIfEmojiOnly(line: string): false | number {\n  const iterator = line.matchAll(EMOJI_REGEX);\n  let count = 0;\n  let currentIndex = 0;\n\n  for (const match of iterator) {\n    if (match.index !== currentIndex) {\n      return false;\n    }\n\n    count++;\n    currentIndex = match.index + match[0].length;\n  }\n\n  if (currentIndex !== line.length) {\n    return false;\n  }\n\n  return count;\n}\n","import type { MediaContent } from '../../api/types';\nimport { ApiMessageEntityTypes } from '../../api/types';\n\nimport parseEmojiOnlyString from '../../util/emoji/parseEmojiOnlyString';\n\nexport function getEmojiOnlyCountForMessage(content: MediaContent, groupedId?: string): number | undefined {\n  if (!content.text) return undefined;\n  return (\n    !groupedId\n    && Object.keys(content).length === 1 // Only text is present\n    && !content.text.entities?.some((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji)\n    && parseEmojiOnlyString(content.text.text)\n  ) || undefined;\n}\n","type CollectionByKey<Member> = Record<number | string, Member>;\n\ntype OrderDirection =\n  'asc'\n  | 'desc';\n\ninterface OrderCallback<T> {\n  (member: T): any;\n}\n\nexport function buildCollectionByKey<T extends AnyLiteral>(collection: T[], key: keyof T) {\n  return collection.reduce((byKey: CollectionByKey<T>, member: T) => {\n    byKey[member[key]] = member;\n\n    return byKey;\n  }, {});\n}\n\nexport function buildCollectionByCallback<T extends AnyLiteral, K extends number | string, R extends unknown>(\n  collection: T[],\n  callback: (member: T) => [K, R],\n) {\n  return collection.reduce((byKey: Record<K, R>, member: T) => {\n    const [key, value] = callback(member);\n    byKey[key] = value;\n\n    return byKey;\n  }, {} as Record<K, R>);\n}\n\nexport function mapValues<R extends any, M extends any>(\n  byKey: CollectionByKey<M>,\n  callback: (member: M, key: string, index: number, originalByKey: CollectionByKey<M>) => R,\n): CollectionByKey<R> {\n  return Object.keys(byKey).reduce((newByKey: CollectionByKey<R>, key, index) => {\n    newByKey[key] = callback(byKey[key], key, index, byKey);\n    return newByKey;\n  }, {});\n}\n\nexport function pick<T, K extends keyof T>(object: T, keys: K[]) {\n  return keys.reduce((result, key) => {\n    result[key] = object[key];\n    return result;\n  }, {} as Pick<T, K>);\n}\n\nexport function pickTruthy<T, K extends keyof T>(object: T, keys: K[]) {\n  return keys.reduce((result, key) => {\n    if (object[key]) {\n      result[key] = object[key];\n    }\n\n    return result;\n  }, {} as Pick<T, K>);\n}\n\nexport function omit<T extends object, K extends keyof T>(object: T, keys: K[]): Omit<T, K> {\n  const stringKeys = new Set(keys.map(String));\n  const savedKeys = Object.keys(object)\n    .filter((key) => !stringKeys.has(key)) as Array<Exclude<keyof T, K>>;\n\n  return pick(object, savedKeys);\n}\n\nexport function omitUndefined<T extends object>(object: T): T {\n  return Object.keys(object).reduce((result, stringKey) => {\n    const key = stringKey as keyof T;\n    if (object[key] !== undefined) {\n      result[key as keyof T] = object[key];\n    }\n    return result;\n  }, {} as T);\n}\n\nexport function orderBy<T>(\n  collection: T[],\n  orderRule: (keyof T) | OrderCallback<T> | ((keyof T) | OrderCallback<T>)[],\n  mode: OrderDirection | [OrderDirection, OrderDirection] = 'asc',\n): T[] {\n  function compareValues(a: T, b: T, currentOrderRule: (keyof T) | OrderCallback<T>, isAsc: boolean) {\n    const aValue = (typeof currentOrderRule === 'function' ? currentOrderRule(a) : a[currentOrderRule]) || 0;\n    const bValue = (typeof currentOrderRule === 'function' ? currentOrderRule(b) : b[currentOrderRule]) || 0;\n\n    return isAsc ? aValue - bValue : bValue - aValue;\n  }\n\n  if (Array.isArray(orderRule)) {\n    const [mode1, mode2] = Array.isArray(mode) ? mode : [mode, mode];\n    const [orderRule1, orderRule2] = orderRule;\n    const isAsc1 = mode1 === 'asc';\n    const isAsc2 = mode2 === 'asc';\n\n    return collection.sort((a, b) => {\n      return compareValues(a, b, orderRule1, isAsc1) || compareValues(a, b, orderRule2, isAsc2);\n    });\n  }\n\n  const isAsc = mode === 'asc';\n  return collection.sort((a, b) => {\n    return compareValues(a, b, orderRule, isAsc);\n  });\n}\n\nexport function unique<T extends any>(array: T[]): T[] {\n  return Array.from(new Set(array));\n}\n\nexport function uniqueByField<T extends any>(array: T[], field: keyof T): T[] {\n  return [...new Map(array.map((item) => [item[field], item])).values()];\n}\n\nexport function compact<T extends any>(array: T[]) {\n  return array.filter(Boolean);\n}\n\nexport function areSortedArraysEqual(array1: any[], array2: any[]) {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n\n  return array1.every((item, i) => item === array2[i]);\n}\n\nexport function areSortedArraysIntersecting(array1: any[], array2: any[]) {\n  return array1[0] <= array2[array2.length - 1] && array1[array1.length - 1] >= array2[0];\n}\nexport function isInsideSortedArrayRange(value:any, array: any[]) {\n  return array[0] <= value && value <= array[array.length - 1];\n}\n\nexport function findIntersectionWithSet<T>(array: T[], set: Set<T>): T[] {\n  return array.filter((a) => set.has(a));\n}\n/**\n * Exlude elements from base array. Both arrays should be sorted in same order\n * @param base\n * @param toExclude\n * @returns New array without excluded elements\n */\nexport function excludeSortedArray<T extends any>(base: T[], toExclude: T[]) {\n  if (!base?.length) return base;\n\n  const result: T[] = [];\n\n  let excludeIndex = 0;\n\n  for (let i = 0; i < base.length; i++) {\n    if (toExclude[excludeIndex] === base[i]) {\n      excludeIndex += 1;\n    } else {\n      result.push(base[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function split<T extends any>(array: T[], chunkSize: number) {\n  const result: T[][] = [];\n  for (let i = 0; i < array.length; i += chunkSize) {\n    result.push(array.slice(i, i + chunkSize));\n  }\n\n  return result;\n}\n\nexport function partition<T extends unknown>(\n  array: T[], filter: (value: T, index: number, array: T[]) => boolean | undefined,\n): [T[], T[]] {\n  const pass: T[] = [];\n  const fail: T[] = [];\n\n  array.forEach((e, idx, arr) => (filter(e, idx, arr) ? pass : fail).push(e));\n\n  return [pass, fail];\n}\n\nexport function cloneDeep<T>(value: T): T {\n  if (!isObject(value)) {\n    return value;\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(cloneDeep) as typeof value;\n  }\n\n  return Object.keys(value).reduce((acc, key) => {\n    acc[key as keyof T] = cloneDeep(value[key as keyof T]);\n    return acc;\n  }, {} as T);\n}\n\nexport function isLiteralObject(value: any): value is AnyLiteral {\n  return isObject(value) && !Array.isArray(value);\n}\n\nfunction isObject(value: any): value is object {\n  // eslint-disable-next-line no-null/no-null\n  return typeof value === 'object' && value !== null;\n}\n\nexport function findLast<T>(array: Array<T>, predicate: (value: T, index: number, obj: T[]) => boolean): T | undefined {\n  let cursor = array.length;\n\n  while (cursor--) {\n    if (predicate(array[cursor], cursor, array)) {\n      return array[cursor];\n    }\n  }\n\n  return undefined;\n}\n\nexport function compareFields<T>(a: T, b: T) {\n  return Number(b) - Number(a);\n}\n","/* eslint-disable no-bitwise */\n\n// Ref: https://github.com/telegramdesktop/tdesktop/blob/0743e71ab6b928d2ee5bae1aed991849b1e2b291/Telegram/SourceFiles/data/data_document.cpp#L1018\nexport function decodeWaveform(encoded5bit: Uint8Array) {\n  const bitsCount = encoded5bit.length * 8;\n  const valuesCount = Math.floor(bitsCount / 5);\n  if (!valuesCount) {\n    return [];\n  }\n\n  // Read each 5 bit of encoded5bit as 0-31 unsigned char.\n  // We count the index of the byte in which the desired 5-bit sequence starts.\n  // And then we read a uint16 starting from that byte to guarantee to get all of those 5 bits.\n  //\n  // BUT! if it is the last byte we have, we're not allowed to read a uint16 starting with it.\n  // Because it will be an overflow (we'll access one byte after the available memory).\n  // We see, that only the last 5 bits could start in the last available byte and be problematic.\n  // So we read in a general way all the entries in a general way except the last one.\n  const result = Array(valuesCount);\n  const bitsData = encoded5bit;\n  for (let i = 0, l = valuesCount - 1; i !== l; ++i) {\n    const byteIndex = Math.floor((i * 5) / 8);\n    const bitShift = Math.floor((i * 5) % 8);\n    const value = bitsData[byteIndex] + (bitsData[byteIndex + 1] << 8);\n    result[i] = ((value >> bitShift) & 0x1F);\n  }\n  const lastByteIndex = Math.floor(((valuesCount - 1) * 5) / 8);\n  const lastBitShift = Math.floor(((valuesCount - 1) * 5) % 8);\n  const lastValue = bitsData[lastByteIndex] + (bitsData[lastByteIndex + 1] << 8);\n  result[valuesCount - 1] = (lastValue >> lastBitShift) & 0x1F;\n\n  return result;\n}\n\nexport function interpolateArray(data: number[], fitCount: number) {\n  let peak = 0;\n  const newData = new Array(fitCount);\n  const springFactor = data.length / fitCount;\n  const leftFiller = data[0];\n  const rightFiller = data[data.length - 1];\n  for (let i = 0; i < fitCount; i++) {\n    const idx = Math.floor(i * springFactor);\n    const val = ((data[idx - 1] ?? leftFiller) + (data[idx] ?? leftFiller) + (data[idx + 1] ?? rightFiller)) / 3;\n    newData[i] = val;\n    if (peak < val) {\n      peak = val;\n    }\n  }\n  return { data: newData, peak };\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport { generateRandomBytes, readBigIntFromBuffer } from '../../../lib/gramjs/Helpers';\n\nimport type {\n  ApiBotApp,\n  ApiChatAdminRights,\n  ApiChatBannedRights,\n  ApiChatFolder,\n  ApiChatReactions,\n  ApiFormattedText,\n  ApiGroupCall,\n  ApiInputPrivacyRules,\n  ApiInputReplyInfo,\n  ApiInputStorePaymentPurpose,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiPhoneCall,\n  ApiPhoto,\n  ApiPoll,\n  ApiPremiumGiftCodeOption,\n  ApiPrivacyKey,\n  ApiReactionWithPaid,\n  ApiReportReason,\n  ApiRequestInputInvoice,\n  ApiRequestInputSavedStarGift,\n  ApiSendMessageAction,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiThemeParameters,\n  ApiVideo,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes,\n} from '../../types';\n\nimport { CHANNEL_ID_LENGTH, DEFAULT_STATUS_ICON_ID } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { deserializeBytes } from '../helpers/misc';\nimport localDb from '../localDb';\n\nfunction checkIfChannelId(id: string) {\n  return id.length === CHANNEL_ID_LENGTH && id.startsWith('-1');\n}\n\nexport function getEntityTypeById(chatOrUserId: string) {\n  if (!chatOrUserId.startsWith('-')) {\n    return 'user';\n  } else if (checkIfChannelId(chatOrUserId)) {\n    return 'channel';\n  } else {\n    return 'chat';\n  }\n}\n\nexport function buildPeer(chatOrUserId: string): GramJs.TypePeer {\n  const type = getEntityTypeById(chatOrUserId);\n\n  if (type === 'user') {\n    return new GramJs.PeerUser({\n      userId: buildMtpPeerId(chatOrUserId, 'user'),\n    });\n  } else if (type === 'channel') {\n    return new GramJs.PeerChannel({\n      channelId: buildMtpPeerId(chatOrUserId, 'channel'),\n    });\n  } else {\n    return new GramJs.PeerChat({\n      chatId: buildMtpPeerId(chatOrUserId, 'chat'),\n    });\n  }\n}\n\nexport function buildInputPeer(chatOrUserId: string, accessHash?: string): GramJs.TypeInputPeer {\n  const type = getEntityTypeById(chatOrUserId);\n\n  if (type === 'user') {\n    return new GramJs.InputPeerUser({\n      userId: buildMtpPeerId(chatOrUserId, 'user'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else if (type === 'channel') {\n    return new GramJs.InputPeerChannel({\n      channelId: buildMtpPeerId(chatOrUserId, 'channel'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else {\n    return new GramJs.InputPeerChat({\n      chatId: buildMtpPeerId(chatOrUserId, 'chat'),\n    });\n  }\n}\n\nexport function buildInputPeerFromLocalDb(chatOrUserId: string): GramJs.TypeInputPeer | undefined {\n  const type = getEntityTypeById(chatOrUserId);\n  let accessHash: BigInt.BigInteger | undefined;\n\n  if (type === 'user') {\n    accessHash = localDb.users[chatOrUserId]?.accessHash;\n    if (!accessHash) {\n      return undefined;\n    }\n  } else if (type === 'channel') {\n    accessHash = (localDb.chats[chatOrUserId] as GramJs.Channel)?.accessHash;\n    if (!accessHash) {\n      return undefined;\n    }\n  }\n\n  return buildInputPeer(chatOrUserId, String(accessHash));\n}\n\nexport function buildInputEntity(chatOrUserId: string, accessHash?: string) {\n  const type = getEntityTypeById(chatOrUserId);\n\n  if (type === 'user') {\n    return new GramJs.InputUser({\n      userId: buildMtpPeerId(chatOrUserId, 'user'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else if (type === 'channel') {\n    return new GramJs.InputChannel({\n      channelId: buildMtpPeerId(chatOrUserId, 'channel'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else {\n    return buildMtpPeerId(chatOrUserId, 'chat');\n  }\n}\n\nexport function buildInputStickerSet(id: string, accessHash: string) {\n  return new GramJs.InputStickerSetID({\n    id: BigInt(id),\n    accessHash: BigInt(accessHash),\n  });\n}\n\nexport function buildInputStickerSetShortName(shortName: string) {\n  return new GramJs.InputStickerSetShortName({\n    shortName,\n  });\n}\n\nexport function buildInputDocument(media: ApiSticker | ApiVideo) {\n  const document = localDb.documents[media.id];\n\n  if (!document) {\n    return undefined;\n  }\n\n  return new GramJs.InputDocument(pick(document, [\n    'id',\n    'accessHash',\n    'fileReference',\n  ]));\n}\n\nexport function buildInputMediaDocument(media: ApiSticker | ApiVideo) {\n  const inputDocument = buildInputDocument(media);\n\n  if (!inputDocument) {\n    return undefined;\n  }\n\n  return new GramJs.InputMediaDocument({ id: inputDocument });\n}\n\nexport function buildInputPoll(pollParams: ApiNewPoll, randomId: BigInt.BigInteger) {\n  const { summary, quiz } = pollParams;\n\n  const poll = new GramJs.Poll({\n    id: randomId,\n    publicVoters: summary.isPublic,\n    question: buildInputTextWithEntities(summary.question),\n    answers: summary.answers.map(({ text, option }) => {\n      return new GramJs.PollAnswer({\n        text: buildInputTextWithEntities(text),\n        option: deserializeBytes(option),\n      });\n    }),\n    quiz: summary.quiz,\n    multipleChoice: summary.multipleChoice,\n  });\n\n  if (!quiz) {\n    return new GramJs.InputMediaPoll({ poll });\n  }\n\n  const correctAnswers = quiz.correctAnswers.map(deserializeBytes);\n  const { solution } = quiz;\n  const solutionEntities = quiz.solutionEntities ? quiz.solutionEntities.map(buildMtpMessageEntity) : [];\n\n  return new GramJs.InputMediaPoll({\n    poll,\n    correctAnswers,\n    ...(solution && {\n      solution,\n      solutionEntities,\n    }),\n  });\n}\n\nexport function buildInputPollFromExisting(poll: ApiPoll, shouldClose = false) {\n  return new GramJs.InputMediaPoll({\n    poll: new GramJs.Poll({\n      id: BigInt(poll.id),\n      publicVoters: poll.summary.isPublic,\n      question: buildInputTextWithEntities(poll.summary.question),\n      answers: poll.summary.answers.map(({ text, option }) => {\n        return new GramJs.PollAnswer({\n          text: buildInputTextWithEntities(text),\n          option: deserializeBytes(option),\n        });\n      }),\n      quiz: poll.summary.quiz,\n      multipleChoice: poll.summary.multipleChoice,\n      closeDate: poll.summary.closeDate,\n      closePeriod: poll.summary.closePeriod,\n      closed: shouldClose ? true : poll.summary.closed,\n    }),\n    correctAnswers: poll.results.results?.filter((o) => o.isCorrect).map((o) => deserializeBytes(o.option)),\n    solution: poll.results.solution,\n    solutionEntities: poll.results.solutionEntities?.map(buildMtpMessageEntity),\n  });\n}\n\nexport function buildFilterFromApiFolder(folder: ApiChatFolder): GramJs.DialogFilter | GramJs.DialogFilterChatlist {\n  const {\n    emoticon,\n    contacts,\n    nonContacts,\n    groups,\n    channels,\n    bots,\n    excludeArchived,\n    excludeMuted,\n    excludeRead,\n    pinnedChatIds,\n    includedChatIds,\n    excludedChatIds,\n    noTitleAnimations,\n  } = folder;\n\n  const pinnedPeers = pinnedChatIds\n    ? pinnedChatIds.map(buildInputPeerFromLocalDb).filter(Boolean)\n    : [];\n\n  const includePeers = includedChatIds\n    ? includedChatIds.map(buildInputPeerFromLocalDb).filter(Boolean)\n    : [];\n\n  const excludePeers = excludedChatIds\n    ? excludedChatIds.map(buildInputPeerFromLocalDb).filter(Boolean)\n    : [];\n\n  if (folder.isChatList) {\n    return new GramJs.DialogFilterChatlist({\n      id: folder.id,\n      title: buildInputTextWithEntities(folder.title),\n      emoticon: emoticon || undefined,\n      pinnedPeers,\n      includePeers,\n      hasMyInvites: folder.hasMyInvites,\n      titleNoanimate: noTitleAnimations,\n    });\n  }\n\n  return new GramJs.DialogFilter({\n    id: folder.id,\n    title: buildInputTextWithEntities(folder.title),\n    emoticon: emoticon || undefined,\n    contacts: contacts || undefined,\n    nonContacts: nonContacts || undefined,\n    groups: groups || undefined,\n    bots: bots || undefined,\n    excludeArchived: excludeArchived || undefined,\n    excludeMuted: excludeMuted || undefined,\n    excludeRead: excludeRead || undefined,\n    broadcasts: channels || undefined,\n    pinnedPeers,\n    includePeers,\n    excludePeers,\n    titleNoanimate: noTitleAnimations,\n  });\n}\n\nexport function buildInputStory(story: ApiStory | ApiStorySkipped) {\n  const peer = buildInputPeerFromLocalDb(story.peerId)!;\n  return new GramJs.InputMediaStory({\n    peer,\n    id: story.id,\n  });\n}\n\nexport function generateRandomBigInt() {\n  return readBigIntFromBuffer(generateRandomBytes(8), true, true);\n}\n\nexport function generateRandomTimestampedBigInt() {\n  // 32 bits for timestamp, 32 bits are random\n  const buffer = generateRandomBytes(8);\n  const timestampBuffer = Buffer.alloc(4);\n  timestampBuffer.writeUInt32LE(Math.floor(Date.now() / 1000), 0);\n  buffer.set(timestampBuffer, 4);\n  return readBigIntFromBuffer(buffer, true, true);\n}\n\nexport function generateRandomInt() {\n  return readBigIntFromBuffer(generateRandomBytes(4), true, true).toJSNumber();\n}\n\nexport function buildMessageFromUpdate(\n  id: number,\n  chatId: string,\n  update: GramJs.UpdateShortSentMessage | GramJs.UpdateServiceNotification,\n) {\n  // This is not a proper message, but we only need these fields for downloading media through `localDb`.\n  return new GramJs.Message({\n    id,\n    peerId: buildPeer(chatId),\n    fromId: buildPeer(chatId),\n    media: update.media,\n  } as GramJs.Message);\n}\n\nexport function buildMtpMessageEntity(entity: ApiMessageEntity): GramJs.TypeMessageEntity {\n  const {\n    type, offset, length,\n  } = entity;\n\n  const user = 'userId' in entity ? localDb.users[entity.userId] : undefined;\n\n  switch (type) {\n    case ApiMessageEntityTypes.Bold:\n      return new GramJs.MessageEntityBold({ offset, length });\n    case ApiMessageEntityTypes.Italic:\n      return new GramJs.MessageEntityItalic({ offset, length });\n    case ApiMessageEntityTypes.Underline:\n      return new GramJs.MessageEntityUnderline({ offset, length });\n    case ApiMessageEntityTypes.Strike:\n      return new GramJs.MessageEntityStrike({ offset, length });\n    case ApiMessageEntityTypes.Code:\n      return new GramJs.MessageEntityCode({ offset, length });\n    case ApiMessageEntityTypes.Pre:\n      return new GramJs.MessageEntityPre({ offset, length, language: entity.language || '' });\n    case ApiMessageEntityTypes.Blockquote:\n      return new GramJs.MessageEntityBlockquote({ offset, length, collapsed: entity.canCollapse ? true : undefined });\n    case ApiMessageEntityTypes.TextUrl:\n      return new GramJs.MessageEntityTextUrl({ offset, length, url: entity.url });\n    case ApiMessageEntityTypes.Url:\n      return new GramJs.MessageEntityUrl({ offset, length });\n    case ApiMessageEntityTypes.Hashtag:\n      return new GramJs.MessageEntityHashtag({ offset, length });\n    case ApiMessageEntityTypes.MentionName:\n      return new GramJs.InputMessageEntityMentionName({\n        offset,\n        length,\n        userId: new GramJs.InputUser({ userId: BigInt(user!.id), accessHash: user!.accessHash! }),\n      });\n    case ApiMessageEntityTypes.Spoiler:\n      return new GramJs.MessageEntitySpoiler({ offset, length });\n    case ApiMessageEntityTypes.CustomEmoji:\n      return new GramJs.MessageEntityCustomEmoji({ offset, length, documentId: BigInt(entity.documentId) });\n    default:\n      return new GramJs.MessageEntityUnknown({ offset, length });\n  }\n}\n\nexport function buildChatPhotoForLocalDb(photo: GramJs.TypePhoto) {\n  if (photo instanceof GramJs.PhotoEmpty) {\n    return new GramJs.ChatPhotoEmpty();\n  }\n\n  const { dcId, id: photoId } = photo;\n\n  return new GramJs.ChatPhoto({\n    dcId,\n    photoId,\n  });\n}\n\nexport function buildInputPhoto(photo: ApiPhoto) {\n  const localPhoto = localDb.photos[photo?.id];\n\n  if (!localPhoto) {\n    return undefined;\n  }\n\n  return new GramJs.InputPhoto(pick(localPhoto, [\n    'id',\n    'accessHash',\n    'fileReference',\n  ]));\n}\n\nexport function buildInputContact({\n  phone,\n  firstName,\n  lastName,\n}: {\n  phone: string;\n  firstName: string;\n  lastName: string;\n}) {\n  return new GramJs.InputPhoneContact({\n    clientId: BigInt(1),\n    phone,\n    firstName,\n    lastName,\n  });\n}\n\nexport function buildChatBannedRights(\n  bannedRights: ApiChatBannedRights,\n  untilDate = 0,\n) {\n  return new GramJs.ChatBannedRights({\n    ...bannedRights,\n    untilDate,\n  });\n}\n\nexport function buildChatAdminRights(\n  adminRights: ApiChatAdminRights,\n) {\n  return new GramJs.ChatAdminRights(adminRights);\n}\n\nexport function buildShippingInfo(info: GramJs.PaymentRequestedInfo) {\n  const { shippingAddress } = info;\n  return new GramJs.PaymentRequestedInfo({\n    ...info,\n    shippingAddress: shippingAddress\n      ? new GramJs.PostAddress(shippingAddress)\n      : undefined,\n  });\n}\n\nexport function buildInputPrivacyKey(privacyKey: ApiPrivacyKey) {\n  switch (privacyKey) {\n    case 'phoneNumber':\n      return new GramJs.InputPrivacyKeyPhoneNumber();\n\n    case 'addByPhone':\n      return new GramJs.InputPrivacyKeyAddedByPhone();\n\n    case 'lastSeen':\n      return new GramJs.InputPrivacyKeyStatusTimestamp();\n\n    case 'profilePhoto':\n      return new GramJs.InputPrivacyKeyProfilePhoto();\n\n    case 'forwards':\n      return new GramJs.InputPrivacyKeyForwards();\n\n    case 'chatInvite':\n      return new GramJs.InputPrivacyKeyChatInvite();\n\n    case 'phoneCall':\n      return new GramJs.InputPrivacyKeyPhoneCall();\n\n    case 'phoneP2P':\n      return new GramJs.InputPrivacyKeyPhoneP2P();\n\n    case 'voiceMessages':\n      return new GramJs.InputPrivacyKeyVoiceMessages();\n\n    case 'bio':\n      return new GramJs.InputPrivacyKeyAbout();\n\n    case 'birthday':\n      return new GramJs.InputPrivacyKeyBirthday();\n\n    case 'gifts':\n      return new GramJs.InputPrivacyKeyStarGiftsAutoSave();\n  }\n\n  return undefined;\n}\n\nexport function buildInputReportReason(reason: ApiReportReason) {\n  switch (reason) {\n    case 'spam':\n      return new GramJs.InputReportReasonSpam();\n    case 'violence':\n      return new GramJs.InputReportReasonViolence();\n    case 'childAbuse':\n      return new GramJs.InputReportReasonChildAbuse();\n    case 'pornography':\n      return new GramJs.InputReportReasonPornography();\n    case 'copyright':\n      return new GramJs.InputReportReasonCopyright();\n    case 'fake':\n      return new GramJs.InputReportReasonFake();\n    case 'geoIrrelevant':\n      return new GramJs.InputReportReasonGeoIrrelevant();\n    case 'illegalDrugs':\n      return new GramJs.InputReportReasonIllegalDrugs();\n    case 'personalDetails':\n      return new GramJs.InputReportReasonPersonalDetails();\n    case 'other':\n      return new GramJs.InputReportReasonOther();\n  }\n\n  return undefined;\n}\n\nexport function buildSendMessageAction(action: ApiSendMessageAction) {\n  switch (action.type) {\n    case 'cancel':\n      return new GramJs.SendMessageCancelAction();\n    case 'typing':\n      return new GramJs.SendMessageTypingAction();\n    case 'recordAudio':\n      return new GramJs.SendMessageRecordAudioAction();\n    case 'chooseSticker':\n      return new GramJs.SendMessageChooseStickerAction();\n    case 'playingGame':\n      return new GramJs.SendMessageGamePlayAction();\n  }\n  return undefined;\n}\n\nexport function buildInputThemeParams(params: ApiThemeParameters) {\n  return new GramJs.DataJSON({\n    data: JSON.stringify(params),\n  });\n}\n\nexport function buildMtpPeerId(id: string, type: 'user' | 'chat' | 'channel') {\n  if (type === 'user') {\n    return BigInt(id);\n  }\n\n  if (type === 'channel') {\n    return BigInt(id.slice(2)); // Slice \"-1\", zeroes are trimmed when converting to BigInt\n  }\n\n  return BigInt(id.slice(1));\n}\n\nexport function buildInputGroupCall(groupCall: Partial<ApiGroupCall>) {\n  return new GramJs.InputGroupCall({\n    id: BigInt(groupCall.id!),\n    accessHash: BigInt(groupCall.accessHash!),\n  });\n}\n\nexport function buildInputPhoneCall({ id, accessHash }: ApiPhoneCall) {\n  return new GramJs.InputPhoneCall({\n    id: BigInt(id),\n    accessHash: BigInt(accessHash!),\n  });\n}\n\nexport function buildInputStorePaymentPurpose(purpose: ApiInputStorePaymentPurpose):\nGramJs.TypeInputStorePaymentPurpose {\n  if (purpose.type === 'stars') {\n    return new GramJs.InputStorePaymentStarsTopup({\n      stars: BigInt(purpose.stars),\n      currency: purpose.currency,\n      amount: BigInt(purpose.amount),\n    });\n  }\n\n  if (purpose.type === 'starsgift') {\n    return new GramJs.InputStorePaymentStarsGift({\n      userId: buildInputEntity(purpose.user.id, purpose.user.accessHash) as GramJs.InputUser,\n      stars: BigInt(purpose.stars),\n      currency: purpose.currency,\n      amount: BigInt(purpose.amount),\n    });\n  }\n\n  if (purpose.type === 'giftcode') {\n    return new GramJs.InputStorePaymentPremiumGiftCode({\n      users: purpose.users.map((user) => buildInputEntity(user.id, user.accessHash) as GramJs.InputUser),\n      boostPeer: purpose.boostChannel\n        ? buildInputPeer(purpose.boostChannel.id, purpose.boostChannel.accessHash)\n        : undefined,\n      currency: purpose.currency,\n      amount: BigInt(purpose.amount),\n      message: purpose.message && buildInputTextWithEntities(purpose.message),\n    });\n  }\n\n  const randomId = generateRandomBigInt();\n\n  if (purpose.type === 'starsgiveaway') {\n    return new GramJs.InputStorePaymentStarsGiveaway({\n      boostPeer: buildInputPeer(purpose.chat.id, purpose.chat.accessHash),\n      additionalPeers: purpose.additionalChannels?.map((chat) => buildInputPeer(chat.id, chat.accessHash)),\n      stars: BigInt(purpose.stars!),\n      countriesIso2: purpose.countries,\n      prizeDescription: purpose.prizeDescription,\n      onlyNewSubscribers: purpose.isOnlyForNewSubscribers || undefined,\n      winnersAreVisible: purpose.areWinnersVisible || undefined,\n      untilDate: purpose.untilDate,\n      currency: purpose.currency,\n      amount: BigInt(purpose.amount),\n      users: purpose.users,\n      randomId,\n    });\n  }\n\n  return new GramJs.InputStorePaymentPremiumGiveaway({\n    boostPeer: buildInputPeer(purpose.chat.id, purpose.chat.accessHash),\n    additionalPeers: purpose.additionalChannels?.map((chat) => buildInputPeer(chat.id, chat.accessHash)),\n    countriesIso2: purpose.countries,\n    prizeDescription: purpose.prizeDescription,\n    onlyNewSubscribers: purpose.isOnlyForNewSubscribers || undefined,\n    winnersAreVisible: purpose.areWinnersVisible || undefined,\n    untilDate: purpose.untilDate,\n    currency: purpose.currency,\n    amount: BigInt(purpose.amount),\n    randomId,\n  });\n}\n\nfunction buildPremiumGiftCodeOption(optionData: ApiPremiumGiftCodeOption) {\n  return new GramJs.PremiumGiftCodeOption({\n    users: optionData.users,\n    months: optionData.months,\n    currency: optionData.currency,\n    amount: BigInt(optionData.amount),\n  });\n}\n\nexport function buildInputInvoice(invoice: ApiRequestInputInvoice) {\n  switch (invoice.type) {\n    case 'message': {\n      return new GramJs.InputInvoiceMessage({\n        peer: buildInputPeer(invoice.chat.id, invoice.chat.accessHash),\n        msgId: invoice.messageId,\n      });\n    }\n\n    case 'slug': {\n      return new GramJs.InputInvoiceSlug({\n        slug: invoice.slug,\n      });\n    }\n\n    case 'stargift': {\n      const {\n        peer, shouldHideName, giftId, message, shouldUpgrade,\n      } = invoice;\n      return new GramJs.InputInvoiceStarGift({\n        peer: buildInputPeer(peer.id, peer.accessHash),\n        hideName: shouldHideName || undefined,\n        giftId: BigInt(giftId),\n        message: message && buildInputTextWithEntities(message),\n        includeUpgrade: shouldUpgrade,\n      });\n    }\n\n    case 'stars': {\n      const purpose = buildInputStorePaymentPurpose(invoice.purpose);\n      return new GramJs.InputInvoiceStars({\n        purpose,\n      });\n    }\n\n    case 'starsgiveaway': {\n      const purpose = buildInputStorePaymentPurpose(invoice.purpose);\n      return new GramJs.InputInvoiceStars({\n        purpose,\n      });\n    }\n\n    case 'chatInviteSubscription': {\n      return new GramJs.InputInvoiceChatInviteSubscription({\n        hash: invoice.hash,\n      });\n    }\n\n    case 'stargiftUpgrade': {\n      return new GramJs.InputInvoiceStarGiftUpgrade({\n        stargift: buildInputSavedStarGift(invoice.inputSavedGift),\n        keepOriginalDetails: invoice.shouldKeepOriginalDetails,\n      });\n    }\n\n    case 'giveaway':\n    default: {\n      const purpose = buildInputStorePaymentPurpose(invoice.purpose);\n      const option = buildPremiumGiftCodeOption(invoice.option);\n\n      return new GramJs.InputInvoicePremiumGiftCode({\n        purpose,\n        option,\n      });\n    }\n  }\n}\n\nexport function buildInputReaction(reaction?: ApiReactionWithPaid) {\n  switch (reaction?.type) {\n    case 'emoji':\n      return new GramJs.ReactionEmoji({\n        emoticon: reaction.emoticon,\n      });\n    case 'custom':\n      return new GramJs.ReactionCustomEmoji({\n        documentId: BigInt(reaction.documentId),\n      });\n    case 'paid':\n      return new GramJs.ReactionPaid();\n    default:\n      return new GramJs.ReactionEmpty();\n  }\n}\n\nexport function buildInputChatReactions(chatReactions?: ApiChatReactions) {\n  if (chatReactions?.type === 'all') {\n    return new GramJs.ChatReactionsAll({\n      allowCustom: chatReactions.areCustomAllowed,\n    });\n  }\n\n  if (chatReactions?.type === 'some') {\n    return new GramJs.ChatReactionsSome({\n      reactions: chatReactions.allowed.map(buildInputReaction),\n    });\n  }\n\n  return new GramJs.ChatReactionsNone();\n}\n\nexport function buildInputEmojiStatus(emojiStatusId: string, expires?: number) {\n  if (emojiStatusId === DEFAULT_STATUS_ICON_ID) {\n    return new GramJs.EmojiStatusEmpty();\n  }\n\n  return new GramJs.EmojiStatus({\n    documentId: BigInt(emojiStatusId),\n    until: expires,\n  });\n}\n\nexport function buildInputTextWithEntities(formatted: ApiFormattedText) {\n  return new GramJs.TextWithEntities({\n    text: formatted.text,\n    entities: formatted.entities?.map(buildMtpMessageEntity) || [],\n  });\n}\n\nexport function buildInputBotApp(app: ApiBotApp) {\n  return new GramJs.InputBotAppID({\n    id: BigInt(app.id),\n    accessHash: BigInt(app.accessHash),\n  });\n}\n\nexport function buildInputReplyTo(replyInfo: ApiInputReplyInfo) {\n  if (replyInfo.type === 'story') {\n    return new GramJs.InputReplyToStory({\n      peer: buildInputPeerFromLocalDb(replyInfo.peerId)!,\n      storyId: replyInfo.storyId,\n    });\n  }\n\n  if (replyInfo.type === 'message') {\n    const {\n      replyToMsgId, replyToTopId, replyToPeerId, quoteText,\n    } = replyInfo;\n    return new GramJs.InputReplyToMessage({\n      replyToMsgId,\n      topMsgId: replyToTopId,\n      replyToPeerId: replyToPeerId ? buildInputPeerFromLocalDb(replyToPeerId)! : undefined,\n      quoteText: quoteText?.text,\n      quoteEntities: quoteText?.entities?.map(buildMtpMessageEntity),\n    });\n  }\n\n  return undefined;\n}\n\nexport function buildInputPrivacyRules(\n  rules: ApiInputPrivacyRules,\n) {\n  const privacyRules: GramJs.TypeInputPrivacyRule[] = [];\n\n  if (rules.allowedUsers?.length) {\n    privacyRules.push(new GramJs.InputPrivacyValueAllowUsers({\n      users: rules.allowedUsers.map(({ id, accessHash }) => buildInputEntity(id, accessHash) as GramJs.InputUser),\n    }));\n  }\n  if (rules.allowedChats?.length) {\n    privacyRules.push(new GramJs.InputPrivacyValueAllowChatParticipants({\n      chats: rules.allowedChats.map(({ id, type }) => (\n        buildMtpPeerId(id, type === 'chatTypeBasicGroup' ? 'chat' : 'channel')\n      )),\n    }));\n  }\n  if (rules.blockedUsers?.length) {\n    privacyRules.push(new GramJs.InputPrivacyValueDisallowUsers({\n      users: rules.blockedUsers.map(({ id, accessHash }) => buildInputEntity(id, accessHash) as GramJs.InputUser),\n    }));\n  }\n  if (rules.blockedChats?.length) {\n    privacyRules.push(new GramJs.InputPrivacyValueDisallowChatParticipants({\n      chats: rules.blockedChats.map(({ id, type }) => (\n        buildMtpPeerId(id, type === 'chatTypeBasicGroup' ? 'chat' : 'channel')\n      )),\n    }));\n  }\n  if (rules.shouldAllowPremium) {\n    privacyRules.push(new GramJs.InputPrivacyValueAllowPremium());\n  }\n\n  if (rules.botsPrivacy === 'allow') {\n    privacyRules.push(new GramJs.InputPrivacyValueAllowBots());\n  }\n\n  if (rules.botsPrivacy === 'disallow') {\n    privacyRules.push(new GramJs.InputPrivacyValueDisallowBots());\n  }\n\n  if (!rules.isUnspecified) {\n    switch (rules.visibility) {\n      case 'everybody':\n        privacyRules.push(new GramJs.InputPrivacyValueAllowAll());\n        break;\n\n      case 'contacts':\n        privacyRules.push(new GramJs.InputPrivacyValueAllowContacts());\n        break;\n\n      case 'nonContacts':\n        privacyRules.push(new GramJs.InputPrivacyValueDisallowContacts());\n        break;\n\n      case 'nobody':\n        privacyRules.push(new GramJs.InputPrivacyValueDisallowAll());\n        break;\n    }\n  }\n\n  return privacyRules;\n}\n\nexport function buildInputSavedStarGift(inputGift: ApiRequestInputSavedStarGift) {\n  if (inputGift.type === 'user') {\n    return new GramJs.InputSavedStarGiftUser({\n      msgId: inputGift.messageId,\n    });\n  }\n\n  return new GramJs.InputSavedStarGiftChat({\n    peer: buildInputPeer(inputGift.chat.id, inputGift.chat.accessHash),\n    savedId: BigInt(inputGift.savedId),\n  });\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from '../apiBuilders/peers';\nimport localDb, { type RepairInfo } from '../localDb';\n\nexport type MessageRepairContext = Pick<GramJs.TypeMessage, 'peerId' | 'id'>;\nexport type MediaRepairContext = MessageRepairContext;\n\nexport function addMessageToLocalDb(message: GramJs.TypeMessage | GramJs.TypeSponsoredMessage) {\n  if (message instanceof GramJs.Message) {\n    if (message.media) addMediaToLocalDb(message.media, message);\n\n    if (message.replyTo instanceof GramJs.MessageReplyHeader && message.replyTo.replyMedia) {\n      addMediaToLocalDb(message.replyTo.replyMedia, message);\n    }\n  }\n\n  if (message instanceof GramJs.MessageService && 'photo' in message.action) {\n    const photo = addMessageRepairInfo(message.action.photo, message);\n    addPhotoToLocalDb(photo);\n  }\n\n  if (message instanceof GramJs.SponsoredMessage && message.photo) {\n    addPhotoToLocalDb(message.photo);\n  }\n}\n\nexport function addMediaToLocalDb(media: GramJs.TypeMessageMedia, context?: MediaRepairContext) {\n  if (media instanceof GramJs.MessageMediaDocument && media.document) {\n    const document = addMessageRepairInfo(media.document, context);\n    addDocumentToLocalDb(document);\n  }\n\n  if (media instanceof GramJs.MessageMediaWebPage\n    && media.webpage instanceof GramJs.WebPage\n  ) {\n    if (media.webpage.document) {\n      const document = addMessageRepairInfo(media.webpage.document, context);\n      addDocumentToLocalDb(document);\n    }\n    if (media.webpage.photo) {\n      const photo = addMessageRepairInfo(media.webpage.photo, context);\n      addPhotoToLocalDb(photo);\n    }\n  }\n\n  if (media instanceof GramJs.MessageMediaGame) {\n    if (media.game.document) {\n      const document = addMessageRepairInfo(media.game.document, context);\n      addDocumentToLocalDb(document);\n    }\n\n    const photo = addMessageRepairInfo(media.game.photo, context);\n    addPhotoToLocalDb(photo);\n  }\n\n  if (media instanceof GramJs.MessageMediaPhoto && media.photo) {\n    const photo = addMessageRepairInfo(media.photo, context);\n    addPhotoToLocalDb(photo);\n  }\n\n  if (media instanceof GramJs.MessageMediaInvoice) {\n    if (media.photo) {\n      const photo = addMessageRepairInfo(media.photo, context);\n      addWebDocumentToLocalDb(photo);\n    }\n\n    if (media.extendedMedia instanceof GramJs.MessageExtendedMedia) {\n      addMediaToLocalDb(media.extendedMedia.media, context);\n    }\n  }\n\n  if (media instanceof GramJs.MessageMediaPaidMedia) {\n    media.extendedMedia.forEach((extendedMedia) => {\n      if (extendedMedia instanceof GramJs.MessageExtendedMedia) {\n        addMediaToLocalDb(extendedMedia.media, context);\n      }\n    });\n  }\n}\n\nexport function addStoryToLocalDb(story: GramJs.TypeStoryItem, peerId: string) {\n  if (!(story instanceof GramJs.StoryItem)) {\n    return;\n  }\n\n  if (story.media instanceof GramJs.MessageMediaPhoto && story.media.photo) {\n    const photo = addStoryRepairInfo(story.media.photo, peerId, story);\n    addPhotoToLocalDb(photo);\n  }\n\n  if (story.media instanceof GramJs.MessageMediaDocument) {\n    if (story.media.document instanceof GramJs.Document) {\n      const doc = addStoryRepairInfo(story.media.document, peerId, story);\n      addDocumentToLocalDb(doc);\n    }\n\n    if (story.media.altDocuments) {\n      for (const altDocument of story.media.altDocuments) {\n        const doc = addStoryRepairInfo(altDocument, peerId, story);\n        addDocumentToLocalDb(doc);\n      }\n    }\n  }\n}\n\nexport function addPhotoToLocalDb(photo: GramJs.TypePhoto) {\n  if (photo instanceof GramJs.Photo) {\n    localDb.photos[String(photo.id)] = photo;\n  }\n}\n\nexport function addDocumentToLocalDb(document: GramJs.TypeDocument) {\n  if (document instanceof GramJs.Document) {\n    localDb.documents[String(document.id)] = document;\n  }\n}\n\nexport function addStoryRepairInfo<T extends GramJs.TypeDocument | GramJs.TypeWebDocument | GramJs.TypePhoto>(\n  media: T, peerId: string, story: GramJs.TypeStoryItem,\n) : T & RepairInfo {\n  if (!(media instanceof GramJs.Document && media instanceof GramJs.Photo)) return media;\n  const repairableMedia = media as T & RepairInfo;\n  repairableMedia.localRepairInfo = {\n    type: 'story',\n    peerId,\n    id: story.id,\n  };\n  return repairableMedia;\n}\n\nexport function addMessageRepairInfo<T extends GramJs.TypeDocument | GramJs.TypeWebDocument | GramJs.TypePhoto>(\n  media: T, context?: MediaRepairContext,\n) : T & RepairInfo {\n  if (!context?.peerId) return media;\n  if (!(media instanceof GramJs.Document || media instanceof GramJs.Photo || media instanceof GramJs.WebDocument)) {\n    return media;\n  }\n\n  const repairableMedia = media as T & RepairInfo;\n  repairableMedia.localRepairInfo = {\n    type: 'message',\n    peerId: getApiChatIdFromMtpPeer(context.peerId),\n    id: context.id,\n  };\n  return repairableMedia;\n}\n\nexport function addChatToLocalDb(chat: GramJs.Chat | GramJs.Channel) {\n  const id = buildApiPeerId(chat.id, chat instanceof GramJs.Chat ? 'chat' : 'channel');\n  const storedChat = localDb.chats[id];\n\n  const isStoredMin = storedChat && 'min' in storedChat && storedChat.min;\n  const isChatMin = 'min' in chat && chat.min;\n  if (storedChat && !isStoredMin && isChatMin) return;\n\n  localDb.chats[id] = chat;\n}\n\nexport function addUserToLocalDb(user: GramJs.User) {\n  const id = buildApiPeerId(user.id, 'user');\n  const storedUser = localDb.users[id];\n\n  if (user.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(user.photo);\n  }\n\n  if (storedUser && !storedUser.min && user.min) return;\n\n  localDb.users[id] = user;\n}\n\nexport function addWebDocumentToLocalDb(webDocument: GramJs.TypeWebDocument) {\n  localDb.webDocuments[webDocument.url] = webDocument;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiCallProtocol,\n  ApiPhoneCallConnection,\n  GroupCallParticipant,\n  GroupCallParticipantVideo,\n  SsrcGroup,\n} from '../../../lib/secret-sauce';\nimport type { ApiGroupCall, ApiPhoneCall } from '../../types';\n\nimport { getApiChatIdFromMtpPeer, isPeerUser } from './peers';\n\nexport function buildApiGroupCallParticipant(participant: GramJs.GroupCallParticipant): GroupCallParticipant {\n  const {\n    self, min, about, date, versioned, canSelfUnmute, justJoined, left, muted, mutedByYou, source, volume,\n    volumeByAdmin, videoJoined, peer, video, presentation, raiseHandRating,\n  } = participant;\n\n  return {\n    isSelf: self,\n    isMin: min,\n    canSelfUnmute,\n    isLeft: left,\n    isMuted: muted,\n    isMutedByMe: mutedByYou,\n    hasJustJoined: justJoined,\n    isVolumeByAdmin: volumeByAdmin,\n    isVersioned: versioned,\n    isVideoJoined: videoJoined,\n    about,\n    source,\n    raiseHandRating: raiseHandRating?.toString(),\n    volume,\n    date: new Date(date),\n    isUser: isPeerUser(peer),\n    id: getApiChatIdFromMtpPeer(peer),\n    video: video ? buildApiGroupCallParticipantVideo(video) : undefined,\n    presentation: presentation ? buildApiGroupCallParticipantVideo(presentation) : undefined,\n  };\n}\n\nfunction buildApiGroupCallParticipantVideo(\n  participantVideo: GramJs.GroupCallParticipantVideo,\n): GroupCallParticipantVideo {\n  const {\n    audioSource, endpoint, paused, sourceGroups,\n  } = participantVideo;\n  return {\n    audioSource,\n    endpoint,\n    isPaused: paused,\n    sourceGroups: sourceGroups.map(buildApiGroupCallParticipantVideoSourceGroup),\n  };\n}\n\nfunction buildApiGroupCallParticipantVideoSourceGroup(\n  participantVideoSourceGroup: GramJs.GroupCallParticipantVideoSourceGroup,\n): SsrcGroup {\n  return {\n    semantics: participantVideoSourceGroup.semantics,\n    sources: participantVideoSourceGroup.sources,\n  };\n}\n\nexport function buildApiGroupCall(groupCall: GramJs.TypeGroupCall): ApiGroupCall {\n  const {\n    id, accessHash,\n  } = groupCall;\n\n  if (groupCall instanceof GramJs.GroupCallDiscarded) {\n    return {\n      connectionState: 'discarded',\n      id: id.toString(),\n      accessHash: accessHash.toString(),\n      participantsCount: 0,\n      version: 0,\n      participants: {},\n    };\n  }\n\n  const {\n    version, participantsCount, streamDcId, scheduleDate, canChangeJoinMuted, joinMuted, canStartVideo,\n    scheduleStartSubscribed,\n  } = groupCall;\n\n  return {\n    connectionState: 'disconnected',\n    isLoaded: true,\n    id: id.toString(),\n    accessHash: accessHash.toString(),\n    version,\n    participantsCount,\n    streamDcId,\n    scheduleDate,\n    canChangeJoinMuted,\n    joinMuted,\n    canStartVideo,\n    scheduleStartSubscribed,\n    participants: {},\n  };\n}\n\nexport function getGroupCallId(groupCall: GramJs.TypeInputGroupCall) {\n  return groupCall.id.toString();\n}\n\nexport function buildPhoneCall(call: GramJs.TypePhoneCall): ApiPhoneCall {\n  const { id } = call;\n\n  let phoneCall: ApiPhoneCall = {\n    id: id.toString(),\n  };\n\n  if (call instanceof GramJs.PhoneCallAccepted\n    || call instanceof GramJs.PhoneCallWaiting\n    || call instanceof GramJs.PhoneCall\n    || call instanceof GramJs.PhoneCallRequested) {\n    const {\n      accessHash, adminId, date, video, participantId, protocol,\n    } = call;\n\n    phoneCall = {\n      ...phoneCall,\n      accessHash: accessHash.toString(),\n      adminId: adminId.toString(),\n      participantId: participantId.toString(),\n      date,\n      isVideo: video,\n      protocol: buildApiCallProtocol(protocol),\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCall) {\n    const {\n      p2pAllowed, gAOrB, keyFingerprint, connections, startDate,\n    } = call;\n\n    phoneCall = {\n      ...phoneCall,\n      state: 'active',\n      gAOrB: Array.from(gAOrB),\n      keyFingerprint: keyFingerprint.toString(),\n      startDate,\n      isP2pAllowed: Boolean(p2pAllowed),\n      connections: connections.map(buildApiCallConnection).filter(Boolean) as ApiPhoneCallConnection[],\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallDiscarded) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'discarded',\n      duration: call.duration,\n      reason: buildApiCallDiscardReason(call.reason),\n      needRating: call.needRating,\n      needDebug: call.needDebug,\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallWaiting) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'waiting',\n      receiveDate: call.receiveDate,\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallAccepted) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'accepted',\n      gB: Array.from(call.gB),\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallRequested) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'requested',\n      gAHash: Array.from(call.gAHash),\n    };\n  }\n\n  return phoneCall;\n}\n\nexport function buildApiCallDiscardReason(discardReason?: GramJs.TypePhoneCallDiscardReason) {\n  if (discardReason instanceof GramJs.PhoneCallDiscardReasonMissed) {\n    return 'missed';\n  } else if (discardReason instanceof GramJs.PhoneCallDiscardReasonBusy) {\n    return 'busy';\n  } else if (discardReason instanceof GramJs.PhoneCallDiscardReasonHangup) {\n    return 'hangup';\n  } else {\n    return 'disconnect';\n  }\n}\n\nfunction buildApiCallConnection(connection: GramJs.TypePhoneConnection): ApiPhoneCallConnection | undefined {\n  if (connection instanceof GramJs.PhoneConnectionWebrtc) {\n    const {\n      username, password, turn, stun, ip, ipv6, port,\n    } = connection;\n\n    return {\n      username,\n      password,\n      isTurn: turn,\n      isStun: stun,\n      ip,\n      ipv6,\n      port,\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexport function buildApiCallProtocol(protocol: GramJs.PhoneCallProtocol): ApiCallProtocol {\n  const {\n    libraryVersions, minLayer, maxLayer, udpP2p, udpReflector,\n  } = protocol;\n\n  return {\n    libraryVersions,\n    minLayer,\n    maxLayer,\n    isUdpP2p: udpP2p,\n    isUdpReflector: udpReflector,\n  };\n}\n\nexport function buildCallProtocol() {\n  return new GramJs.PhoneCallProtocol({\n    libraryVersions: ['4.0.0'],\n    minLayer: 92,\n    maxLayer: 92,\n    udpReflector: true,\n    udpP2p: true,\n  });\n}\n","/* eslint-disable no-bitwise */\n\n// eslint-disable-next-line max-len\nconst TEMPLATE = '<?xml version=\"1.0\" encoding=\"utf-8\"?><svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 {{width}} {{height}}\" xml:space=\"preserve\"><path fill-opacity=\"0.1\" d=\"{{path}}\" /></svg>';\nconst LOOKUP = 'AACAAAAHAAALMAAAQASTAVAAAZaacaaaahaaalmaaaqastava.az0123456789-,';\n\nexport function pathBytesToSvg(bytes: Buffer, width: number, height: number) {\n  return TEMPLATE\n    .replace('{{path}}', buildSvgPath(bytes))\n    .replace('{{width}}', String(width))\n    .replace('{{height}}', String(height));\n}\n\nexport function buildSvgPath(bytes: Buffer) {\n  let path = 'M';\n\n  const len = bytes.length;\n  for (let i = 0; i < len; i++) {\n    const num = bytes[i];\n    if (num >= 128 + 64) {\n      path += LOOKUP[num - 128 - 64];\n    } else {\n      if (num >= 128) {\n        path += ',';\n      } else if (num >= 64) {\n        path += '-';\n      }\n      path += String(num & 63);\n    }\n  }\n\n  path += 'z';\n\n  return path;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport { strippedPhotoToJpg } from '../../../lib/gramjs/Utils';\n\nimport type {\n  ApiBotVerification,\n  ApiFormattedText,\n  ApiMessageEntity,\n  ApiMessageEntityDefault,\n  ApiPhoto,\n  ApiPhotoSize,\n  ApiPrivacySettings,\n  ApiThumbnail,\n  ApiUsername,\n  ApiVideoSize,\n  BotsPrivacyType,\n  PrivacyVisibility,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes,\n} from '../../types';\n\nimport { compact } from '../../../util/iteratees';\nimport localDb from '../localDb';\nimport { bytesToDataUri } from './helpers';\nimport { pathBytesToSvg } from './pathBytesToSvg';\nimport { buildApiPeerId } from './peers';\n\nconst DEFAULT_THUMB_SIZE = { w: 100, h: 100 };\n\nexport function buildApiThumbnailFromStripped(\n  sizes?: GramJs.TypePhotoSize[], mimeType?: string,\n): ApiThumbnail | undefined {\n  if (!sizes || !sizes.length) {\n    return undefined;\n  }\n\n  const thumb = sizes.find((s: any): s is GramJs.PhotoStrippedSize => s instanceof GramJs.PhotoStrippedSize);\n  if (!thumb) {\n    return undefined;\n  }\n\n  const realSizes = sizes.filter((s): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize);\n  const { w, h } = realSizes.length ? realSizes[realSizes.length - 1] : DEFAULT_THUMB_SIZE;\n  const { bytes } = thumb;\n  const dataUri = bytesToDataUri(\n    !mimeType || mimeType === 'image/jpeg' ? strippedPhotoToJpg(bytes) : bytes,\n    undefined,\n    mimeType,\n  );\n\n  return {\n    dataUri,\n    width: w,\n    height: h,\n  };\n}\n\nexport function buildApiThumbnailFromCached(photoSize: GramJs.PhotoCachedSize): ApiThumbnail | undefined {\n  const { w, h, bytes } = photoSize;\n  const dataUri = bytesToDataUri(bytes, undefined, 'image/webp');\n\n  return {\n    dataUri,\n    width: w,\n    height: h,\n  };\n}\n\nexport function buildApiThumbnailFromPath(\n  photoSize: GramJs.PhotoPathSize,\n  sizeAttribute: GramJs.DocumentAttributeImageSize | GramJs.DocumentAttributeVideo,\n): ApiThumbnail | undefined {\n  const { w, h } = sizeAttribute;\n  const dataUri = `data:image/svg+xml;utf8,${pathBytesToSvg(photoSize.bytes, w, h)}`;\n\n  return {\n    dataUri,\n    width: w,\n    height: h,\n  };\n}\n\nexport function buildApiPhoto(photo: GramJs.Photo, isSpoiler?: boolean): ApiPhoto {\n  const sizes = photo.sizes\n    .filter((s: any): s is GramJs.PhotoSize => {\n      return s instanceof GramJs.PhotoSize || s instanceof GramJs.PhotoSizeProgressive;\n    })\n    .map(buildApiPhotoSize);\n\n  return {\n    mediaType: 'photo',\n    id: String(photo.id),\n    thumbnail: buildApiThumbnailFromStripped(photo.sizes),\n    sizes,\n    isSpoiler,\n    date: photo.date,\n    ...(photo.videoSizes && { videoSizes: compact(photo.videoSizes.map(buildApiVideoSize)), isVideo: true }),\n  };\n}\n\nexport function buildApiPhotoPreviewSizes(sizes: GramJs.TypePhotoSize[]): ApiPhotoSize[] {\n  return sizes.filter((s): s is GramJs.PhotoSize => (\n    s instanceof GramJs.PhotoSize || s instanceof GramJs.PhotoSizeProgressive\n  )).map(buildApiPhotoSize);\n}\n\nexport function buildApiVideoSize(videoSize: GramJs.TypeVideoSize): ApiVideoSize | undefined {\n  if (!(videoSize instanceof GramJs.VideoSize)) return undefined;\n\n  const {\n    videoStartTs, size, h, w, type,\n  } = videoSize;\n\n  return {\n    videoStartTs,\n    size,\n    height: h,\n    width: w,\n    type: type as ('u' | 'v'),\n  };\n}\n\nexport function buildApiPhotoSize(photoSize: GramJs.PhotoSize): ApiPhotoSize {\n  const { w, h, type } = photoSize;\n\n  return {\n    width: w,\n    height: h,\n    type: type as ('s' | 'm' | 'x' | 'y' | 'w'),\n  };\n}\n\nexport function buildApiUsernames(mtpPeer: GramJs.User | GramJs.Channel | GramJs.UpdateUserName) {\n  if (!mtpPeer.usernames && !('username' in mtpPeer && mtpPeer.username)) {\n    return undefined;\n  }\n\n  const usernames: ApiUsername[] = [];\n\n  if ('username' in mtpPeer && mtpPeer.username) {\n    usernames.push({\n      username: mtpPeer.username,\n      isActive: true,\n      isEditable: true,\n    });\n  }\n\n  if (mtpPeer.usernames) {\n    mtpPeer.usernames.forEach(({ username, active, editable }) => {\n      usernames.push({\n        username,\n        ...(active && { isActive: true }),\n        ...(editable && { isEditable: true }),\n      });\n    });\n  }\n\n  return usernames;\n}\n\nexport function buildPrivacyRules(rules: GramJs.TypePrivacyRule[]): ApiPrivacySettings {\n  let visibility: PrivacyVisibility | undefined;\n  let isUnspecified: boolean | undefined;\n  let allowUserIds: string[] | undefined;\n  let allowChatIds: string[] | undefined;\n  let blockUserIds: string[] | undefined;\n  let blockChatIds: string[] | undefined;\n  let shouldAllowPremium: true | undefined;\n  let botsPrivacy: BotsPrivacyType = 'none';\n\n  const localChats = localDb.chats;\n\n  rules.forEach((rule) => {\n    if (rule instanceof GramJs.PrivacyValueAllowAll) {\n      visibility ||= 'everybody';\n    } else if (rule instanceof GramJs.PrivacyValueAllowContacts) {\n      visibility ||= 'contacts';\n    } else if (rule instanceof GramJs.PrivacyValueAllowCloseFriends) {\n      visibility ||= 'closeFriends';\n    } else if (rule instanceof GramJs.PrivacyValueDisallowContacts) {\n      visibility ||= 'nonContacts';\n    } else if (rule instanceof GramJs.PrivacyValueDisallowAll) {\n      visibility ||= 'nobody';\n    } else if (rule instanceof GramJs.PrivacyValueAllowUsers) {\n      allowUserIds = rule.users.map((chatId) => buildApiPeerId(chatId, 'user'));\n    } else if (rule instanceof GramJs.PrivacyValueDisallowUsers) {\n      blockUserIds = rule.users.map((chatId) => buildApiPeerId(chatId, 'user'));\n    } else if (rule instanceof GramJs.PrivacyValueAllowChatParticipants) {\n      // Server allows channel ids here, so we need to check\n      allowChatIds = rule.chats.map((chatId) => {\n        const dialogId = buildApiPeerId(chatId, 'chat');\n        const channelId = buildApiPeerId(chatId, 'channel');\n        if (localChats[dialogId]) return dialogId;\n        return channelId;\n      });\n    } else if (rule instanceof GramJs.PrivacyValueDisallowChatParticipants) {\n      blockChatIds = rule.chats.map((chatId) => {\n        const dialogId = buildApiPeerId(chatId, 'chat');\n        const channelId = buildApiPeerId(chatId, 'channel');\n        if (localChats[dialogId]) return dialogId;\n        return channelId;\n      });\n    } else if (rule instanceof GramJs.PrivacyValueAllowPremium) {\n      shouldAllowPremium = true;\n    } else if (rule instanceof GramJs.PrivacyValueAllowBots) {\n      botsPrivacy = 'allow';\n    } else if (rule instanceof GramJs.PrivacyValueDisallowBots) {\n      botsPrivacy = 'disallow';\n    }\n  });\n\n  if (!visibility) {\n    // Disallow by default\n    visibility = 'nobody';\n    isUnspecified = true;\n  }\n\n  return {\n    visibility,\n    isUnspecified,\n    allowUserIds: allowUserIds || [],\n    allowChatIds: allowChatIds || [],\n    blockUserIds: blockUserIds || [],\n    blockChatIds: blockChatIds || [],\n    shouldAllowPremium,\n    botsPrivacy,\n  };\n}\n\nexport function buildApiFormattedText(textWithEntities: GramJs.TextWithEntities): ApiFormattedText {\n  const { text, entities } = textWithEntities;\n\n  return {\n    text,\n    entities: entities.map(buildApiMessageEntity),\n  };\n}\n\nexport function buildApiMessageEntity(entity: GramJs.TypeMessageEntity): ApiMessageEntity {\n  const {\n    className: type, offset, length,\n  } = entity;\n\n  if (entity instanceof GramJs.MessageEntityMentionName) {\n    return {\n      type: ApiMessageEntityTypes.MentionName,\n      offset,\n      length,\n      userId: buildApiPeerId(entity.userId, 'user'),\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityTextUrl) {\n    return {\n      type: ApiMessageEntityTypes.TextUrl,\n      offset,\n      length,\n      url: entity.url,\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityPre) {\n    return {\n      type: ApiMessageEntityTypes.Pre,\n      offset,\n      length,\n      language: entity.language,\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityCustomEmoji) {\n    return {\n      type: ApiMessageEntityTypes.CustomEmoji,\n      offset,\n      length,\n      documentId: entity.documentId.toString(),\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityBlockquote) {\n    return {\n      type: ApiMessageEntityTypes.Blockquote,\n      canCollapse: entity.collapsed,\n      offset,\n      length,\n    };\n  }\n\n  return {\n    type: type as `${ApiMessageEntityDefault['type']}`,\n    offset,\n    length,\n  };\n}\n\nexport function buildAvatarPhotoId(photo: GramJs.TypeUserProfilePhoto | GramJs.TypeChatPhoto) {\n  if ('photoId' in photo) {\n    return photo.photoId.toString();\n  }\n\n  return undefined;\n}\n\nexport function buildApiBotVerification(botVerification: GramJs.BotVerification): ApiBotVerification {\n  return {\n    botId: buildApiPeerId(botVerification.botId, 'user'),\n    iconId: botVerification.icon.toString(),\n    description: botVerification.description,\n  };\n}\n","import { CONTENT_TYPES_WITH_PREVIEW } from '../config';\nimport { pause } from './schedulers';\n\n// Polyfill for Safari: `File` is not available in web worker\nif (typeof File === 'undefined') {\n  // eslint-disable-next-line no-global-assign, no-restricted-globals, func-names\n  self.File = class extends Blob {\n    name: string;\n\n    constructor(fileBits: BlobPart[], fileName: string, options?: FilePropertyBag) {\n      if (options) {\n        const { type, ...rest } = options;\n        super(fileBits, { type });\n        Object.assign(this, rest);\n      } else {\n        super(fileBits);\n      }\n\n      this.name = fileName;\n    }\n  } as typeof File;\n}\n\nexport function blobToDataUri(blob: Blob): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = (e: ProgressEvent<FileReader>) => {\n      const { result } = e.target || {};\n      if (typeof result === 'string') {\n        resolve(result);\n      }\n\n      reject(new Error('Failed to read blob'));\n    };\n\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n}\n\nexport function blobToFile(blob: Blob, fileName: string) {\n  return new File([blob], fileName, {\n    lastModified: Date.now(),\n    type: blob.type,\n  });\n}\n\nexport function preloadImage(url: string): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n    img.src = url;\n  });\n}\n\nexport function preloadVideo(url: string): Promise<HTMLVideoElement> {\n  return new Promise((resolve, reject) => {\n    const video = document.createElement('video');\n    video.volume = 0;\n    video.onloadedmetadata = () => resolve(video);\n    video.onerror = reject;\n    video.src = url;\n  });\n}\n\nexport async function createPosterForVideo(url: string): Promise<string | undefined> {\n  try {\n    const video = await preloadVideo(url);\n\n    return await Promise.race([\n      pause(2000) as Promise<undefined>,\n      new Promise<string | undefined>((resolve, reject) => {\n        video.onseeked = () => {\n          if (!video.videoWidth || !video.videoHeight) {\n            resolve(undefined);\n          }\n\n          const canvas = document.createElement('canvas');\n          canvas.width = video.videoWidth;\n          canvas.height = video.videoHeight;\n          const ctx = canvas.getContext('2d')!;\n          ctx.drawImage(video, 0, 0);\n\n          canvas.toBlob((blob) => {\n            resolve(blob ? URL.createObjectURL(blob) : undefined);\n          });\n        };\n        video.onerror = reject;\n        video.currentTime = Math.min(video.duration, 1);\n      }),\n    ]);\n  } catch (e) {\n    return undefined;\n  }\n}\n\nexport async function fetchBlob(blobUrl: string) {\n  const response = await fetch(blobUrl);\n  return response.blob();\n}\n\nexport async function fetchFile(blobUrl: string, fileName: string) {\n  const blob = await fetchBlob(blobUrl);\n  return blobToFile(blob, fileName);\n}\n\nexport function imgToCanvas(img: HTMLImageElement) {\n  const canvas = document.createElement('canvas');\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  const ctx = canvas.getContext('2d')!;\n  ctx.drawImage(img, 0, 0);\n\n  return canvas;\n}\n\nexport function hasPreview(file: File) {\n  return CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n}\n\nexport function validateFiles(files: File[] | FileList | null): File[] | undefined {\n  if (!files?.length) {\n    return undefined;\n  }\n  return Array.from(files).map(fixMovMime).filter((file) => file.size);\n}\n\n// .mov MIME type not reported sometimes https://developer.mozilla.org/en-US/docs/Web/API/File/type#sect1\nfunction fixMovMime(file: File) {\n  const ext = file.name.split('.').pop()!;\n  if (!file.type && ext.toLowerCase() === 'mov') {\n    return new File([file], file.name, { type: 'video/quicktime' });\n  }\n  return file;\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\nconst LUMA_THRESHOLD = 128;\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    if (data.data[i + 3] === 0) continue; // Ignore fully transparent pixels\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\nexport function getColorLuma(rgbColor: [number, number, number]) {\n  const [r, g, b] = rgbColor;\n  const luma = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  return luma;\n}\n\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n\n/* eslint-disable no-bitwise */\nexport const convertToRGBA = (color: number): string => {\n  const alpha = (color >> 24) & 0xff;\n  const red = (color >> 16) & 0xff;\n  const green = (color >> 8) & 0xff;\n  const blue = color & 0xff;\n\n  const alphaFloat = alpha / 255;\n  return `rgba(${red}, ${green}, ${blue}, ${alphaFloat})`;\n};\n\nexport const numberToHexColor = (color: number): string => {\n  return `#${color.toString(16).padStart(6, '0')}`;\n};\n\nexport const getTextColor = (color: number): string => {\n  const r = (color >> 16) & 0xff;\n  const g = (color >> 8) & 0xff;\n  const b = color & 0xff;\n  const luma = getColorLuma([r, g, b]);\n  return luma > LUMA_THRESHOLD ? 'black' : 'white';\n};\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiEmojiInteraction, ApiSticker, ApiStickerSet, ApiStickerSetInfo, GramJsEmojiInteraction,\n} from '../../types';\n\nimport { LOTTIE_STICKER_MIME_TYPE, VIDEO_STICKER_MIME_TYPE } from '../../../config';\nimport { compact } from '../../../util/iteratees';\nimport localDb from '../localDb';\nimport { buildApiPhotoPreviewSizes, buildApiThumbnailFromCached, buildApiThumbnailFromPath } from './common';\n\nexport function buildStickerFromDocument(document: GramJs.TypeDocument,\n  isNoPremium?: boolean, isPremium?: boolean): ApiSticker | undefined {\n  if (document instanceof GramJs.DocumentEmpty) {\n    return undefined;\n  }\n\n  const { mimeType, videoThumbs } = document;\n  const stickerAttribute = document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeSticker => (\n      attr instanceof GramJs.DocumentAttributeSticker\n    ));\n  const customEmojiAttribute = document.attributes\n    .find((attr): attr is GramJs.DocumentAttributeCustomEmoji => attr instanceof GramJs.DocumentAttributeCustomEmoji);\n\n  if (!(stickerAttribute || customEmojiAttribute)) {\n    return undefined;\n  }\n\n  const isLottie = mimeType === LOTTIE_STICKER_MIME_TYPE;\n  const isVideo = mimeType === VIDEO_STICKER_MIME_TYPE;\n  const isCustomEmoji = Boolean(customEmojiAttribute);\n  const shouldUseTextColor = isCustomEmoji && customEmojiAttribute.textColor;\n\n  const imageSizeAttribute = document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeImageSize => (\n      attr instanceof GramJs.DocumentAttributeImageSize\n    ));\n\n  const videoSizeAttribute = document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeVideo => (\n      attr instanceof GramJs.DocumentAttributeVideo\n    ));\n\n  const sizeAttribute = imageSizeAttribute || videoSizeAttribute;\n\n  const stickerOrEmojiAttribute = (stickerAttribute || customEmojiAttribute)!;\n  const stickerSetInfo = buildApiStickerSetInfo(stickerOrEmojiAttribute?.stickerset);\n  const emoji = stickerOrEmojiAttribute?.alt;\n  const isFree = Boolean(customEmojiAttribute?.free ?? true) && !isPremium;\n\n  const cachedThumb = document.thumbs && document.thumbs.find(\n    (s): s is GramJs.PhotoCachedSize => s instanceof GramJs.PhotoCachedSize,\n  );\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_STICKER_MIME_TYPE && !(self as any).isWebmSupported && !cachedThumb) {\n    const staticThumb = document.thumbs && document.thumbs.find(\n      (s): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize,\n    );\n\n    if (!staticThumb) {\n      return undefined;\n    }\n  }\n\n  const pathThumb = document.thumbs && document.thumbs.find(\n    (s): s is GramJs.PhotoPathSize => s instanceof GramJs.PhotoPathSize,\n  );\n\n  const thumbnail = cachedThumb ? (\n    buildApiThumbnailFromCached(cachedThumb)\n  ) : pathThumb && sizeAttribute ? (\n    buildApiThumbnailFromPath(pathThumb, sizeAttribute)\n  ) : undefined;\n  const previewPhotoSizes = document.thumbs && buildApiPhotoPreviewSizes(document.thumbs);\n\n  const { w: width, h: height } = cachedThumb as GramJs.PhotoCachedSize || sizeAttribute || {};\n\n  const hasEffect = !isNoPremium && videoThumbs && compact(videoThumbs\n    ?.filter((thumb) => thumb instanceof GramJs.VideoSize) as GramJs.VideoSize[])\n    .some(({ type }) => type === 'f');\n\n  return {\n    mediaType: 'sticker',\n    id: String(document.id),\n    stickerSetInfo,\n    emoji,\n    isCustomEmoji,\n    isLottie,\n    isVideo,\n    width,\n    height,\n    thumbnail,\n    hasEffect,\n    isFree,\n    shouldUseTextColor,\n    previewPhotoSizes,\n  };\n}\n\nexport function buildStickerSet(set: GramJs.StickerSet): ApiStickerSet {\n  const {\n    archived,\n    installedDate,\n    id,\n    accessHash,\n    title,\n    thumbs,\n    count,\n    shortName,\n    emojis,\n    thumbDocumentId,\n  } = set;\n\n  const hasStaticThumb = thumbs?.some((thumb) => thumb.type === 's');\n  const hasAnimatedThumb = thumbs?.some((thumb) => thumb.type === 'a');\n  const hasVideoThumb = thumbs?.some((thumb) => thumb.type === 'v');\n  const thumbCustomEmojiId = thumbDocumentId && String(thumbDocumentId);\n\n  const hasThumbnail = hasStaticThumb || hasAnimatedThumb || hasVideoThumb || Boolean(thumbCustomEmojiId);\n\n  return {\n    isArchived: archived,\n    isEmoji: emojis,\n    installedDate,\n    id: String(id),\n    accessHash: String(accessHash),\n    title,\n    hasStaticThumb,\n    hasAnimatedThumb,\n    hasVideoThumb,\n    hasThumbnail,\n    thumbCustomEmojiId,\n    count,\n    shortName,\n  };\n}\n\nfunction buildApiStickerSetInfo(inputSet?: GramJs.TypeInputStickerSet): ApiStickerSetInfo {\n  if (inputSet instanceof GramJs.InputStickerSetID) {\n    return {\n      id: String(inputSet.id),\n      accessHash: String(inputSet.accessHash),\n    };\n  }\n  if (inputSet instanceof GramJs.InputStickerSetShortName) {\n    return {\n      shortName: inputSet.shortName,\n    };\n  }\n\n  return {\n    isMissing: true,\n  };\n}\n\nexport function buildStickerSetCovered(coveredStickerSet: GramJs.TypeStickerSetCovered): ApiStickerSet {\n  const stickerSet = buildStickerSet(coveredStickerSet.set);\n\n  if (coveredStickerSet instanceof GramJs.StickerSetNoCovered) {\n    return stickerSet;\n  }\n\n  const stickerSetCovers = (coveredStickerSet instanceof GramJs.StickerSetCovered) ? [coveredStickerSet.cover]\n    : (coveredStickerSet instanceof GramJs.StickerSetMultiCovered) ? coveredStickerSet.covers\n      : coveredStickerSet.documents;\n\n  const stickers = processStickerResult(stickerSetCovers);\n\n  if (coveredStickerSet instanceof GramJs.StickerSetFullCovered) {\n    return {\n      ...stickerSet,\n      stickers,\n      packs: processStickerPackResult(coveredStickerSet.packs),\n    };\n  }\n\n  return {\n    ...stickerSet,\n    covers: stickers,\n  };\n}\n\nexport function buildApiEmojiInteraction(json: GramJsEmojiInteraction): ApiEmojiInteraction {\n  return {\n    timestamps: json.a.map(({ t }) => t),\n  };\n}\n\nexport function processStickerPackResult(packs: GramJs.StickerPack[]) {\n  return packs.reduce((acc, { emoticon, documents }) => {\n    acc[emoticon] = documents.map((documentId) => {\n      const document = localDb.documents[String(documentId)];\n      if (!document) return undefined;\n      return buildStickerFromDocument(document);\n    }).filter(Boolean);\n    return acc;\n  }, {} as Record<string, ApiSticker[]>);\n}\n\nexport function processStickerResult(stickers: GramJs.TypeDocument[]) {\n  return stickers\n    .map((document) => {\n      if (document instanceof GramJs.Document) {\n        const sticker = buildStickerFromDocument(document);\n        if (sticker) {\n          localDb.documents[String(document.id)] = document;\n\n          return sticker;\n        }\n      }\n\n      return undefined;\n    })\n    .filter(Boolean);\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiInputSavedStarGift,\n  ApiSavedStarGift,\n  ApiStarGift,\n  ApiStarGiftAttribute,\n} from '../../types';\n\nimport { numberToHexColor } from '../../../util/colors';\nimport { addDocumentToLocalDb } from '../helpers/localDb';\nimport { buildApiFormattedText } from './common';\nimport { getApiChatIdFromMtpPeer } from './peers';\nimport { buildStickerFromDocument } from './symbols';\n\nexport function buildApiStarGift(starGift: GramJs.TypeStarGift): ApiStarGift {\n  if (starGift instanceof GramJs.StarGiftUnique) {\n    const {\n      id, num, ownerId, ownerName, title, attributes, availabilityIssued, availabilityTotal, slug, ownerAddress,\n    } = starGift;\n\n    return {\n      type: 'starGiftUnique',\n      id: id.toString(),\n      number: num,\n      ownerId: ownerId && getApiChatIdFromMtpPeer(ownerId),\n      ownerName,\n      ownerAddress,\n      attributes: attributes.map(buildApiStarGiftAttribute).filter(Boolean),\n      title,\n      totalCount: availabilityTotal,\n      issuedCount: availabilityIssued,\n      slug,\n    };\n  }\n\n  const {\n    id, limited, stars, availabilityRemains, availabilityTotal, convertStars, firstSaleDate, lastSaleDate, soldOut,\n    birthday, upgradeStars,\n  } = starGift;\n\n  addDocumentToLocalDb(starGift.sticker);\n\n  const sticker = buildStickerFromDocument(starGift.sticker)!;\n\n  return {\n    type: 'starGift',\n    id: id.toString(),\n    isLimited: limited,\n    sticker,\n    stars: stars.toJSNumber(),\n    availabilityRemains,\n    availabilityTotal,\n    starsToConvert: convertStars.toJSNumber(),\n    firstSaleDate,\n    lastSaleDate,\n    isSoldOut: soldOut,\n    isBirthday: birthday,\n    upgradeStars: upgradeStars?.toJSNumber(),\n  };\n}\n\nexport function buildApiStarGiftAttribute(attribute: GramJs.TypeStarGiftAttribute): ApiStarGiftAttribute | undefined {\n  if (attribute instanceof GramJs.StarGiftAttributeModel) {\n    const sticker = buildStickerFromDocument(attribute.document);\n    if (!sticker) {\n      return undefined;\n    }\n\n    addDocumentToLocalDb(attribute.document);\n\n    return {\n      type: 'model',\n      name: attribute.name,\n      rarityPercent: attribute.rarityPermille / 10,\n      sticker,\n    };\n  }\n\n  if (attribute instanceof GramJs.StarGiftAttributePattern) {\n    const sticker = buildStickerFromDocument(attribute.document);\n    if (!sticker) {\n      return undefined;\n    }\n\n    addDocumentToLocalDb(attribute.document);\n\n    return {\n      type: 'pattern',\n      name: attribute.name,\n      rarityPercent: attribute.rarityPermille / 10,\n      sticker,\n    };\n  }\n\n  if (attribute instanceof GramJs.StarGiftAttributeBackdrop) {\n    const {\n      name, rarityPermille, centerColor, edgeColor, patternColor, textColor,\n    } = attribute;\n\n    return {\n      type: 'backdrop',\n      name,\n      rarityPercent: rarityPermille / 10,\n      centerColor: numberToHexColor(centerColor),\n      edgeColor: numberToHexColor(edgeColor),\n      patternColor: numberToHexColor(patternColor),\n      textColor: numberToHexColor(textColor),\n    };\n  }\n\n  if (attribute instanceof GramJs.StarGiftAttributeOriginalDetails) {\n    const {\n      date, recipientId, message, senderId,\n    } = attribute;\n\n    return {\n      type: 'originalDetails',\n      date,\n      recipientId: recipientId && getApiChatIdFromMtpPeer(recipientId),\n      message: message && buildApiFormattedText(message),\n      senderId: senderId && getApiChatIdFromMtpPeer(senderId),\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiSavedStarGift(userStarGift: GramJs.SavedStarGift, peerId: string): ApiSavedStarGift {\n  const {\n    gift, date, convertStars, fromId, message, msgId, nameHidden, unsaved, upgradeStars, transferStars, canUpgrade,\n    savedId, canExportAt,\n  } = userStarGift;\n\n  const inputGift: ApiInputSavedStarGift | undefined = savedId && peerId\n    ? { type: 'chat', chatId: peerId, savedId: savedId.toString() }\n    : msgId ? { type: 'user', messageId: msgId } : undefined;\n\n  return {\n    gift: buildApiStarGift(gift),\n    date,\n    starsToConvert: convertStars?.toJSNumber(),\n    fromId: fromId && getApiChatIdFromMtpPeer(fromId),\n    message: message && buildApiFormattedText(message),\n    messageId: msgId,\n    isNameHidden: nameHidden,\n    isUnsaved: unsaved,\n    canUpgrade,\n    alreadyPaidUpgradeStars: upgradeStars?.toJSNumber(),\n    transferStars: transferStars?.toJSNumber(),\n    inputGift,\n    savedId: savedId?.toString(),\n    canExportAt,\n  };\n}\n","type IWaveformProps = {\n  peak: number;\n  fillStyle: string;\n  progressFillStyle: string;\n};\n\nexport const MAX_EMPTY_WAVEFORM_POINTS = 30;\nconst SPIKE_WIDTH = 2;\nconst SPIKE_STEP = 4;\nconst SPIKE_RADIUS = 1;\nconst HEIGHT = 23;\n\nexport function renderWaveform(\n  canvas: HTMLCanvasElement,\n  spikes: number[],\n  progress: number,\n  {\n    peak, fillStyle, progressFillStyle,\n  }: IWaveformProps,\n) {\n  const width = spikes.length * SPIKE_STEP;\n  const height = HEIGHT;\n\n  canvas.width = width * 2;\n  canvas.height = height * 2;\n  canvas.style.width = `${width}px`;\n  canvas.style.height = `${height}px`;\n\n  const ctx = canvas.getContext('2d')!;\n  ctx.scale(2, 2);\n\n  spikes.forEach((item, i) => {\n    ctx.globalAlpha = (i / spikes.length >= progress) ? 0.5 : 1;\n    ctx.fillStyle = progress > i / spikes.length ? progressFillStyle : fillStyle;\n    const spikeHeight = Math.max(2, HEIGHT * (item / Math.max(1, peak)));\n    roundedRectangle(ctx, i * SPIKE_STEP, (height + spikeHeight) / 2, SPIKE_WIDTH, spikeHeight, SPIKE_RADIUS);\n    ctx.fill();\n  });\n}\n\nfunction roundedRectangle(\n  ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number,\n) {\n  if (width < 2 * radius) {\n    radius = width / 2;\n  }\n  if (height < 2 * radius) {\n    radius = height / 2;\n  }\n\n  ctx.beginPath();\n  ctx.moveTo(x + radius, y);\n  ctx.arcTo(x + width, y, x + width, y - height, radius);\n  ctx.arcTo(x + width, y - height, x, y - height, radius);\n  ctx.arcTo(x, y - height, x, y, radius);\n  ctx.arcTo(x, y, x + width, y, radius);\n  ctx.closePath();\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiAudio,\n  ApiContact,\n  ApiDocument,\n  ApiFormattedText,\n  ApiGame,\n  ApiGiveaway,\n  ApiGiveawayResults,\n  ApiLocation,\n  ApiMediaExtendedPreview,\n  ApiMediaInvoice,\n  ApiMessageStoryData,\n  ApiPaidMedia,\n  ApiPhoto,\n  ApiPoll,\n  ApiStarGiftUnique,\n  ApiSticker,\n  ApiVideo,\n  ApiVoice,\n  ApiWebDocument,\n  ApiWebPage,\n  ApiWebPageStickerData,\n  ApiWebPageStoryData,\n  BoughtPaidMedia,\n  MediaContent,\n} from '../../types';\nimport type { UniversalMessage } from './messages';\n\nimport { SUPPORTED_PHOTO_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES, VIDEO_WEBM_TYPE } from '../../../config';\nimport { generateWaveform } from '../../../util/generateWaveform';\nimport { pick } from '../../../util/iteratees';\nimport {\n  addMediaToLocalDb, addStoryToLocalDb, type MediaRepairContext,\n} from '../helpers/localDb';\nimport { serializeBytes } from '../helpers/misc';\nimport {\n  buildApiFormattedText,\n  buildApiMessageEntity,\n  buildApiPhoto,\n  buildApiPhotoPreviewSizes,\n  buildApiPhotoSize,\n  buildApiThumbnailFromPath,\n  buildApiThumbnailFromStripped,\n} from './common';\nimport { buildApiStarGift } from './gifts';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\nimport { buildStickerFromDocument, processStickerResult } from './symbols';\n\nexport function buildMessageContent(\n  mtpMessage: UniversalMessage | GramJs.UpdateServiceNotification,\n) {\n  let content: MediaContent = {};\n\n  if (mtpMessage.media) {\n    const repairContext = 'peerId' in mtpMessage ? mtpMessage : undefined;\n    content = {\n      ...buildMessageMediaContent(mtpMessage.media, repairContext),\n    };\n  }\n\n  const hasUnsupportedMedia = mtpMessage.media instanceof GramJs.MessageMediaUnsupported;\n\n  if (mtpMessage.message && !hasUnsupportedMedia\n    && !content.sticker && !content.pollId && !content.contact && !content.video?.isRound) {\n    content = {\n      ...content,\n      text: buildMessageTextContent(mtpMessage.message, mtpMessage.entities),\n    };\n  }\n\n  return content;\n}\n\nexport function buildMessageTextContent(\n  message: string,\n  entities?: GramJs.TypeMessageEntity[],\n): ApiFormattedText {\n  return {\n    text: message,\n    ...(entities && { entities: entities.map(buildApiMessageEntity) }),\n  };\n}\n\nexport function buildMessageMediaContent(\n  media: GramJs.TypeMessageMedia, context?: MediaRepairContext,\n): MediaContent | undefined {\n  addMediaToLocalDb(media, context);\n\n  const ttlSeconds = 'ttlSeconds' in media ? media.ttlSeconds : undefined;\n\n  const isExpiredVoice = isExpiredVoiceMessage(media);\n  if (isExpiredVoice) {\n    return { isExpiredVoice };\n  }\n  const isExpiredRoundVideo = isExpiredRoundVideoMessage(media);\n  if (isExpiredRoundVideo) {\n    return { isExpiredRoundVideo };\n  }\n\n  const voice = buildVoice(media);\n  if (voice) return { voice, ttlSeconds };\n\n  if ('round' in media && media.round) {\n    const video = buildVideo(media);\n    if (video) return { video, ttlSeconds };\n  }\n\n  // Other disappearing media types are not supported\n  if (ttlSeconds !== undefined) {\n    return undefined;\n  }\n\n  if (media instanceof GramJs.MessageMediaInvoice && media.extendedMedia instanceof GramJs.MessageExtendedMedia) {\n    return buildMessageMediaContent(media.extendedMedia.media, context);\n  }\n\n  const sticker = buildSticker(media);\n  if (sticker) return { sticker };\n\n  const photo = buildPhoto(media);\n  if (photo) return { photo };\n\n  const video = buildVideo(media);\n  const altVideos = buildAltVideos(media);\n  if (video) return { video, altVideos };\n\n  const audio = buildAudio(media);\n  if (audio) return { audio };\n\n  const document = buildDocumentFromMedia(media);\n  if (document) return { document };\n\n  const contact = buildContact(media);\n  if (contact) return { contact };\n\n  const pollId = buildPollIdFromMedia(media);\n  if (pollId) return { pollId };\n\n  const webPage = buildWebPage(media);\n  if (webPage) return { webPage };\n\n  const invoice = buildInvoiceFromMedia(media);\n  if (invoice) return { invoice };\n\n  const location = buildLocationFromMedia(media);\n  if (location) return { location };\n\n  const game = buildGameFromMedia(media);\n  if (game) return { game };\n\n  const storyData = buildMessageStoryData(media);\n  if (storyData) return { storyData };\n\n  const giveaway = buildGiweawayFromMedia(media);\n  if (giveaway) return { giveaway };\n\n  const giveawayResults = buildGiweawayResultsFromMedia(media);\n  if (giveawayResults) return { giveawayResults };\n\n  const paidMedia = buildPaidMedia(media);\n  if (paidMedia) return { paidMedia };\n\n  return undefined;\n}\n\nfunction buildSticker(media: GramJs.TypeMessageMedia): ApiSticker | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  return buildStickerFromDocument(media.document, media.nopremium);\n}\n\nfunction buildPhoto(media: GramJs.TypeMessageMedia): ApiPhoto | undefined {\n  if (!(media instanceof GramJs.MessageMediaPhoto) || !media.photo || !(media.photo instanceof GramJs.Photo)) {\n    return undefined;\n  }\n\n  return buildApiPhoto(media.photo, media.spoiler);\n}\n\nexport function buildVideoFromDocument(document: GramJs.Document, isSpoiler?: boolean): ApiVideo | undefined {\n  if (document instanceof GramJs.DocumentEmpty) {\n    return undefined;\n  }\n\n  const {\n    id, mimeType, thumbs, size, videoThumbs, attributes,\n  } = document;\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_WEBM_TYPE && !(self as any).isWebmSupported) {\n    return undefined;\n  }\n\n  const videoAttr = attributes\n    .find((a): a is GramJs.DocumentAttributeVideo => a instanceof GramJs.DocumentAttributeVideo);\n\n  if (!videoAttr) {\n    return undefined;\n  }\n\n  const gifAttr = attributes\n    .find((a): a is GramJs.DocumentAttributeAnimated => a instanceof GramJs.DocumentAttributeAnimated);\n\n  const hasVideoPreview = videoThumbs?.some((thumb) => thumb instanceof GramJs.VideoSize && thumb.type === 'v');\n  const previewPhotoSizes = thumbs && buildApiPhotoPreviewSizes(thumbs);\n\n  const {\n    duration,\n    w: width,\n    h: height,\n    supportsStreaming = false,\n    roundMessage: isRound = false,\n    nosound,\n  } = videoAttr;\n\n  const waveform = isRound ? generateWaveform(duration) : undefined;\n\n  return {\n    mediaType: 'video',\n    id: String(id),\n    mimeType,\n    duration,\n    fileName: getFilenameFromDocument(document, 'video'),\n    width,\n    height,\n    supportsStreaming,\n    isRound,\n    isGif: Boolean(gifAttr),\n    thumbnail: buildApiThumbnailFromStripped(thumbs),\n    size: size.toJSNumber(),\n    isSpoiler,\n    hasVideoPreview,\n    previewPhotoSizes,\n    waveform,\n    ...(nosound && { noSound: true }),\n  };\n}\n\nexport function buildAudioFromDocument(document: GramJs.Document): ApiAudio | undefined {\n  if (document instanceof GramJs.DocumentEmpty) {\n    return undefined;\n  }\n\n  const {\n    id, mimeType, size, attributes,\n  } = document;\n\n  const audioAttributes = attributes\n    .find((a: any): a is GramJs.DocumentAttributeAudio => a instanceof GramJs.DocumentAttributeAudio);\n\n  if (!audioAttributes) {\n    return undefined;\n  }\n\n  const {\n    duration,\n    title,\n    performer,\n  } = audioAttributes;\n\n  return {\n    mediaType: 'audio',\n    id: String(id),\n    mimeType,\n    duration,\n    fileName: getFilenameFromDocument(document, 'audio'),\n    title,\n    performer,\n    size: size.toJSNumber(),\n  };\n}\n\nfunction buildVideo(media: GramJs.TypeMessageMedia): ApiVideo | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !(media.document instanceof GramJs.Document)\n    || !media.document.mimeType.startsWith('video')\n  ) {\n    return undefined;\n  }\n\n  return buildVideoFromDocument(media.document, media.spoiler);\n}\n\nfunction buildAltVideos(media: GramJs.TypeMessageMedia): ApiVideo[] | undefined {\n  if (!(media instanceof GramJs.MessageMediaDocument) || !media.altDocuments) {\n    return undefined;\n  }\n\n  const altVideos = media.altDocuments.filter((d): d is GramJs.Document => (\n    d instanceof GramJs.Document && d.mimeType.startsWith('video')\n  )).map((alt) => buildVideoFromDocument(alt, media.spoiler))\n    .filter(Boolean);\n  if (!altVideos.length) {\n    return undefined;\n  }\n\n  return altVideos;\n}\n\nfunction buildAudio(media: GramJs.TypeMessageMedia): ApiAudio | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  const audioAttribute = media.document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeAudio => (\n      attr instanceof GramJs.DocumentAttributeAudio\n    ));\n\n  if (!audioAttribute || audioAttribute.voice) {\n    return undefined;\n  }\n\n  const thumbnailSizes = media.document.thumbs && media.document.thumbs\n    .filter((thumb): thumb is GramJs.PhotoSize => thumb instanceof GramJs.PhotoSize)\n    .map((thumb) => buildApiPhotoSize(thumb));\n\n  return {\n    mediaType: 'audio',\n    id: String(media.document.id),\n    fileName: getFilenameFromDocument(media.document, 'audio'),\n    thumbnailSizes,\n    size: media.document.size.toJSNumber(),\n    ...pick(media.document, ['mimeType']),\n    ...pick(audioAttribute, ['duration', 'performer', 'title']),\n  };\n}\n\nfunction isExpiredVoiceMessage(media: GramJs.TypeMessageMedia): MediaContent['isExpiredVoice'] {\n  if (!(media instanceof GramJs.MessageMediaDocument)) {\n    return false;\n  }\n  return !media.document && media.voice;\n}\n\nfunction isExpiredRoundVideoMessage(media: GramJs.TypeMessageMedia): MediaContent['isExpiredRoundVideo'] {\n  if (!(media instanceof GramJs.MessageMediaDocument)) {\n    return false;\n  }\n  return !media.document && media.round;\n}\n\nfunction buildVoice(media: GramJs.TypeMessageMedia): ApiVoice | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  const audioAttribute = media.document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeAudio => (\n      attr instanceof GramJs.DocumentAttributeAudio\n    ));\n\n  if (!audioAttribute || !audioAttribute.voice) {\n    return undefined;\n  }\n\n  const { duration, waveform } = audioAttribute;\n\n  return {\n    mediaType: 'voice',\n    id: String(media.document.id),\n    size: media.document.size.toJSNumber(),\n    duration,\n    waveform: waveform ? Array.from(waveform) : undefined,\n  };\n}\n\nfunction buildDocumentFromMedia(media: GramJs.TypeMessageMedia) {\n  if (!(media instanceof GramJs.MessageMediaDocument) || !media.document) {\n    return undefined;\n  }\n\n  return buildApiDocument(media.document);\n}\n\nexport function buildApiDocument(document: GramJs.TypeDocument): ApiDocument | undefined {\n  if (!(document instanceof GramJs.Document)) {\n    return undefined;\n  }\n\n  const {\n    id, size, mimeType, date, thumbs, attributes,\n  } = document;\n\n  const photoSize = thumbs && thumbs.find((s): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize);\n  let thumbnail = thumbs && buildApiThumbnailFromStripped(thumbs);\n  if (!thumbnail && thumbs && photoSize) {\n    const photoPath = thumbs.find((s): s is GramJs.PhotoPathSize => s instanceof GramJs.PhotoPathSize);\n    if (photoPath) {\n      thumbnail = buildApiThumbnailFromPath(photoPath, photoSize);\n    }\n  }\n  const previewPhotoSizes = thumbs && buildApiPhotoPreviewSizes(thumbs);\n\n  let innerMediaType: ApiDocument['innerMediaType'] | undefined;\n  let mediaSize: ApiDocument['mediaSize'] | undefined;\n  if (photoSize) {\n    mediaSize = {\n      width: photoSize.w,\n      height: photoSize.h,\n    };\n\n    if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType)) {\n      innerMediaType = 'photo';\n\n      const imageAttribute = attributes\n        .find((a): a is GramJs.DocumentAttributeImageSize => a instanceof GramJs.DocumentAttributeImageSize);\n\n      if (imageAttribute) {\n        const { w: width, h: height } = imageAttribute;\n        mediaSize = {\n          width,\n          height,\n        };\n      }\n    } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n      innerMediaType = 'video';\n      const videoAttribute = attributes\n        .find((a: any): a is GramJs.DocumentAttributeVideo => a instanceof GramJs.DocumentAttributeVideo);\n\n      if (videoAttribute) {\n        const { w: width, h: height } = videoAttribute;\n        mediaSize = {\n          width,\n          height,\n        };\n      }\n    }\n  }\n\n  return {\n    mediaType: 'document',\n    id: String(id),\n    size: size.toJSNumber(),\n    mimeType,\n    timestamp: date,\n    fileName: getFilenameFromDocument(document),\n    thumbnail,\n    innerMediaType,\n    mediaSize,\n    previewPhotoSizes,\n  };\n}\n\nfunction buildContact(media: GramJs.TypeMessageMedia): ApiContact | undefined {\n  if (!(media instanceof GramJs.MessageMediaContact)) {\n    return undefined;\n  }\n\n  const {\n    firstName, lastName, phoneNumber, userId,\n  } = media;\n\n  return {\n    mediaType: 'contact',\n    firstName,\n    lastName,\n    phoneNumber,\n    userId: buildApiPeerId(userId, 'user'),\n  };\n}\n\nfunction buildPollIdFromMedia(media: GramJs.TypeMessageMedia): string | undefined {\n  if (!(media instanceof GramJs.MessageMediaPoll)) {\n    return undefined;\n  }\n\n  return media.poll.id.toString();\n}\n\nexport function buildPollFromMedia(media: GramJs.TypeMessageMedia): ApiPoll | undefined {\n  if (!(media instanceof GramJs.MessageMediaPoll)) {\n    return undefined;\n  }\n\n  return buildPoll(media.poll, media.results);\n}\n\nfunction buildInvoiceFromMedia(media: GramJs.TypeMessageMedia): ApiMediaInvoice | undefined {\n  if (!(media instanceof GramJs.MessageMediaInvoice)) {\n    return undefined;\n  }\n\n  return buildMediaInvoice(media);\n}\n\nfunction buildLocationFromMedia(media: GramJs.TypeMessageMedia): ApiLocation | undefined {\n  if (media instanceof GramJs.MessageMediaGeo) {\n    return buildGeo(media);\n  }\n\n  if (media instanceof GramJs.MessageMediaVenue) {\n    return buildVenue(media);\n  }\n\n  if (media instanceof GramJs.MessageMediaGeoLive) {\n    return buildGeoLive(media);\n  }\n\n  return undefined;\n}\n\nfunction buildGeo(media: GramJs.MessageMediaGeo): ApiLocation | undefined {\n  const point = buildGeoPoint(media.geo);\n  return point && { mediaType: 'geo', geo: point };\n}\n\nfunction buildVenue(media: GramJs.MessageMediaVenue): ApiLocation | undefined {\n  const {\n    geo, title, provider, address, venueId, venueType,\n  } = media;\n  const point = buildGeoPoint(geo);\n  return point && {\n    mediaType: 'venue',\n    geo: point,\n    title,\n    provider,\n    address,\n    venueId,\n    venueType,\n  };\n}\n\nfunction buildGeoLive(media: GramJs.MessageMediaGeoLive): ApiLocation | undefined {\n  const { geo, period, heading } = media;\n  const point = buildGeoPoint(geo);\n  return point && {\n    mediaType: 'geoLive',\n    geo: point,\n    period,\n    heading,\n  };\n}\n\nexport function buildGeoPoint(geo: GramJs.TypeGeoPoint): ApiLocation['geo'] | undefined {\n  if (geo instanceof GramJs.GeoPointEmpty) return undefined;\n  const {\n    long, lat, accuracyRadius, accessHash,\n  } = geo;\n  return {\n    long,\n    lat,\n    accessHash: accessHash.toString(),\n    accuracyRadius,\n  };\n}\n\nfunction buildGameFromMedia(media: GramJs.TypeMessageMedia): ApiGame | undefined {\n  if (!(media instanceof GramJs.MessageMediaGame)) {\n    return undefined;\n  }\n\n  return buildGame(media);\n}\n\nfunction buildGame(media: GramJs.MessageMediaGame): ApiGame | undefined {\n  const {\n    id, accessHash, shortName, title, description, photo: apiPhoto, document: apiDocument,\n  } = media.game;\n\n  const photo = apiPhoto instanceof GramJs.Photo ? buildApiPhoto(apiPhoto) : undefined;\n  const document = apiDocument instanceof GramJs.Document ? buildApiDocument(apiDocument) : undefined;\n\n  return {\n    mediaType: 'game',\n    id: id.toString(),\n    accessHash: accessHash.toString(),\n    shortName,\n    title,\n    description,\n    photo,\n    document,\n  };\n}\n\nfunction buildGiweawayFromMedia(media: GramJs.TypeMessageMedia): ApiGiveaway | undefined {\n  if (!(media instanceof GramJs.MessageMediaGiveaway)) {\n    return undefined;\n  }\n\n  return buildGiveaway(media);\n}\n\nfunction buildGiveaway(media: GramJs.MessageMediaGiveaway): ApiGiveaway | undefined {\n  const {\n    channels, months, stars, quantity, untilDate, countriesIso2, onlyNewSubscribers, prizeDescription,\n  } = media;\n\n  const channelIds = channels.map((channel) => buildApiPeerId(channel, 'channel'));\n\n  return {\n    mediaType: 'giveaway',\n    channelIds,\n    months,\n    stars: stars?.toJSNumber(),\n    quantity,\n    untilDate,\n    countries: countriesIso2,\n    isOnlyForNewSubscribers: onlyNewSubscribers,\n    prizeDescription,\n  };\n}\n\nfunction buildGiweawayResultsFromMedia(media: GramJs.TypeMessageMedia): ApiGiveawayResults | undefined {\n  if (!(media instanceof GramJs.MessageMediaGiveawayResults)) {\n    return undefined;\n  }\n\n  return buildGiveawayResults(media);\n}\n\nfunction buildGiveawayResults(media: GramJs.MessageMediaGiveawayResults): ApiGiveawayResults | undefined {\n  const {\n    months, untilDate, onlyNewSubscribers, launchMsgId, unclaimedCount, winners, winnersCount,\n    additionalPeersCount, prizeDescription, refunded, channelId,\n  } = media;\n\n  const winnerIds = winners.map((winner) => buildApiPeerId(winner, 'user'));\n\n  return {\n    mediaType: 'giveawayResults',\n    months,\n    untilDate,\n    isOnlyForNewSubscribers: onlyNewSubscribers,\n    launchMessageId: launchMsgId,\n    channelId: buildApiPeerId(channelId, 'channel'),\n    unclaimedCount,\n    additionalPeersCount,\n    isRefunded: refunded,\n    prizeDescription,\n    winnerIds,\n    winnersCount,\n  };\n}\n\nexport function buildMessageStoryData(media: GramJs.TypeMessageMedia): ApiMessageStoryData | undefined {\n  if (!(media instanceof GramJs.MessageMediaStory)) {\n    return undefined;\n  }\n\n  const peerId = getApiChatIdFromMtpPeer(media.peer);\n\n  return {\n    mediaType: 'storyData',\n    id: media.id,\n    peerId,\n    ...(media.viaMention && { isMention: true }),\n  };\n}\n\nexport function buildPoll(poll: GramJs.Poll, pollResults: GramJs.PollResults): ApiPoll {\n  const { id, answers: rawAnswers } = poll;\n  const answers = rawAnswers.map((answer) => ({\n    text: buildApiFormattedText(answer.text),\n    option: serializeBytes(answer.option),\n  }));\n\n  return {\n    mediaType: 'poll',\n    id: String(id),\n    summary: {\n      isPublic: poll.publicVoters,\n      question: buildApiFormattedText(poll.question),\n      ...pick(poll, [\n        'closed',\n        'multipleChoice',\n        'quiz',\n        'closePeriod',\n        'closeDate',\n      ]),\n      answers,\n    },\n    results: buildPollResults(pollResults),\n  };\n}\n\nexport function buildMediaInvoice(media: GramJs.MessageMediaInvoice): ApiMediaInvoice {\n  const {\n    description, title, photo, test, totalAmount, currency, receiptMsgId, extendedMedia,\n  } = media;\n\n  const preview = extendedMedia instanceof GramJs.MessageExtendedMediaPreview\n    ? buildApiMessageExtendedMediaPreview(extendedMedia) : undefined;\n\n  return {\n    mediaType: 'invoice',\n    title,\n    description,\n    photo: buildApiWebDocument(photo),\n    receiptMessageId: receiptMsgId,\n    amount: totalAmount.toJSNumber(),\n    currency,\n    isTest: test,\n    extendedMedia: preview,\n  };\n}\n\nexport function buildPollResults(pollResults: GramJs.PollResults): ApiPoll['results'] {\n  const {\n    results: rawResults, totalVoters, recentVoters, solution, solutionEntities: entities, min,\n  } = pollResults;\n  const results = rawResults?.map(({\n    option, chosen, correct, voters,\n  }) => ({\n    isChosen: chosen,\n    isCorrect: correct,\n    option: serializeBytes(option),\n    votersCount: voters,\n  }));\n\n  return {\n    isMin: min,\n    totalVoters,\n    recentVoterIds: recentVoters?.map((peer) => getApiChatIdFromMtpPeer(peer)),\n    results,\n    solution,\n    ...(entities && { solutionEntities: entities.map(buildApiMessageEntity) }),\n  };\n}\n\nexport function buildWebPage(media: GramJs.TypeMessageMedia): ApiWebPage | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaWebPage)\n    || !(media.webpage instanceof GramJs.WebPage)\n  ) {\n    return undefined;\n  }\n\n  const {\n    id, photo, document, attributes,\n  } = media.webpage;\n\n  let video;\n  let audio;\n  if (document instanceof GramJs.Document && document.mimeType.startsWith('video/')) {\n    video = buildVideoFromDocument(document);\n  }\n  if (document instanceof GramJs.Document && document.mimeType.startsWith('audio/')) {\n    audio = buildAudioFromDocument(document);\n  }\n  let story: ApiWebPageStoryData | undefined;\n  let gift: ApiStarGiftUnique | undefined;\n  let stickers: ApiWebPageStickerData | undefined;\n  const attributeStory = attributes\n    ?.find((a): a is GramJs.WebPageAttributeStory => a instanceof GramJs.WebPageAttributeStory);\n  const attributeGift = attributes\n    ?.find((a): a is GramJs.WebPageAttributeUniqueStarGift => a instanceof GramJs.WebPageAttributeUniqueStarGift);\n  if (attributeStory) {\n    const peerId = getApiChatIdFromMtpPeer(attributeStory.peer);\n    story = {\n      id: attributeStory.id,\n      peerId,\n    };\n\n    if (attributeStory.story instanceof GramJs.StoryItem) {\n      addStoryToLocalDb(attributeStory.story, peerId);\n    }\n  }\n  if (attributeGift) {\n    const starGift = buildApiStarGift(attributeGift.gift);\n    gift = starGift.type === 'starGiftUnique' ? starGift : undefined;\n  }\n  const attributeStickers = attributes?.find((a): a is GramJs.WebPageAttributeStickerSet => (\n    a instanceof GramJs.WebPageAttributeStickerSet\n  ));\n  if (attributeStickers) {\n    stickers = {\n      documents: processStickerResult(attributeStickers.stickers),\n      isEmoji: attributeStickers.emojis,\n      isWithTextColor: attributeStickers.textColor,\n    };\n  }\n\n  const mediaSize = media.forceSmallMedia ? 'small' : media.forceLargeMedia ? 'large' : undefined;\n\n  return {\n    mediaType: 'webpage',\n    id: Number(id),\n    ...pick(media.webpage, [\n      'url',\n      'displayUrl',\n      'type',\n      'siteName',\n      'title',\n      'description',\n      'duration',\n      'hasLargeMedia',\n    ]),\n    photo: photo instanceof GramJs.Photo ? buildApiPhoto(photo) : undefined,\n    document: !video && !audio && document ? buildApiDocument(document) : undefined,\n    video,\n    audio,\n    story,\n    gift,\n    stickers,\n    mediaSize,\n  };\n}\n\nfunction buildPaidMedia(media: GramJs.TypeMessageMedia): ApiPaidMedia | undefined {\n  if (!(media instanceof GramJs.MessageMediaPaidMedia)) {\n    return undefined;\n  }\n\n  const { starsAmount, extendedMedia } = media;\n\n  const isBought = extendedMedia[0] instanceof GramJs.MessageExtendedMedia;\n\n  if (isBought) {\n    return {\n      mediaType: 'paidMedia',\n      starsAmount: starsAmount.toJSNumber(),\n      isBought,\n      extendedMedia: buildBoughtMediaContent(extendedMedia)!,\n    };\n  }\n\n  return {\n    mediaType: 'paidMedia',\n    starsAmount: starsAmount.toJSNumber(),\n    extendedMedia: extendedMedia\n      .filter((paidMedia): paidMedia is GramJs.MessageExtendedMediaPreview => (\n        paidMedia instanceof GramJs.MessageExtendedMediaPreview\n      ))\n      .map((paidMedia) => buildApiMessageExtendedMediaPreview(paidMedia)),\n  };\n}\n\nfunction getFilenameFromDocument(document: GramJs.Document, defaultBase = 'file') {\n  const { mimeType, attributes } = document;\n  const filenameAttribute = attributes\n    .find((a: any): a is GramJs.DocumentAttributeFilename => a instanceof GramJs.DocumentAttributeFilename);\n\n  if (filenameAttribute) {\n    return filenameAttribute.fileName;\n  }\n\n  const extension = mimeType.split('/')[1];\n\n  return `${defaultBase}${String(document.id)}.${extension}`;\n}\n\nexport function buildApiMessageExtendedMediaPreview(\n  preview: GramJs.MessageExtendedMediaPreview,\n): ApiMediaExtendedPreview {\n  const {\n    w, h, thumb, videoDuration,\n  } = preview;\n\n  return {\n    mediaType: 'extendedMediaPreview',\n    width: w,\n    height: h,\n    duration: videoDuration,\n    thumbnail: thumb ? buildApiThumbnailFromStripped([thumb]) : undefined,\n  };\n}\n\nexport function buildApiWebDocument(document?: GramJs.TypeWebDocument): ApiWebDocument | undefined {\n  if (!document) return undefined;\n\n  const {\n    url, size, mimeType,\n  } = document;\n  const accessHash = document instanceof GramJs.WebDocument ? document.accessHash.toString() : undefined;\n  const sizeAttr = document.attributes.find((attr): attr is GramJs.DocumentAttributeImageSize => (\n    attr instanceof GramJs.DocumentAttributeImageSize\n  ));\n  const dimensions = sizeAttr && { width: sizeAttr.w, height: sizeAttr.h };\n\n  return {\n    mediaType: 'webDocument',\n    url,\n    accessHash,\n    size,\n    mimeType,\n    dimensions,\n  };\n}\n\nexport function buildBoughtMediaContent(\n  media: GramJs.TypeMessageExtendedMedia[],\n): BoughtPaidMedia[] | undefined {\n  const boughtMedia = media\n    .filter((m): m is GramJs.MessageExtendedMedia => m instanceof GramJs.MessageExtendedMedia)\n    .map((m) => buildMessageMediaContent(m.media))\n    .filter(Boolean);\n\n  if (!boughtMedia.length) {\n    return undefined;\n  }\n\n  return boughtMedia;\n}\n","import { MAX_EMPTY_WAVEFORM_POINTS } from '../components/common/helpers/waveform';\n\nexport function generateWaveform(duration: number) {\n  const arr = Math.min(Math.round(duration), MAX_EMPTY_WAVEFORM_POINTS);\n  return Array.from({ length: arr }, () => Math.floor(Math.random() * 256));\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiMessageReactor,\n  ApiPeerReaction,\n  ApiReaction,\n  ApiReactionCount,\n  ApiReactions,\n  ApiReactionWithPaid,\n  ApiSavedReactionTag,\n} from '../../types';\n\nimport { buildApiDocument } from './messageContent';\nimport { getApiChatIdFromMtpPeer } from './peers';\n\nexport function buildMessageReactions(reactions: GramJs.MessageReactions): ApiReactions {\n  const {\n    recentReactions, results, canSeeList, reactionsAsTags, topReactors,\n  } = reactions;\n\n  return {\n    areTags: reactionsAsTags,\n    canSeeList,\n    results: results.map(buildReactionCount).filter(Boolean).sort(reactionCountComparator),\n    recentReactions: recentReactions?.map(buildMessagePeerReaction).filter(Boolean),\n    topReactors: topReactors?.map(buildApiMessageReactor).filter(Boolean),\n  };\n}\n\nfunction reactionCountComparator(a: ApiReactionCount, b: ApiReactionCount) {\n  if (a.reaction.type === 'paid') return -1;\n  if (b.reaction.type === 'paid') return 1;\n\n  const diff = b.count - a.count;\n  if (diff) return diff;\n\n  if (a.chosenOrder !== undefined && b.chosenOrder !== undefined) {\n    return a.chosenOrder - b.chosenOrder;\n  }\n\n  if (a.chosenOrder !== undefined) return 1;\n  if (b.chosenOrder !== undefined) return -1;\n  return 0;\n}\n\nexport function buildReactionCount(reactionCount: GramJs.ReactionCount): ApiReactionCount | undefined {\n  const { chosenOrder, count, reaction } = reactionCount;\n\n  const apiReaction = buildApiReaction(reaction, true);\n  if (!apiReaction) return undefined;\n\n  return {\n    chosenOrder,\n    count,\n    reaction: apiReaction,\n  };\n}\n\nexport function buildApiMessageReactor(reactor: GramJs.MessageReactor): ApiMessageReactor {\n  const {\n    count, my, top, anonymous, peerId,\n  } = reactor;\n\n  return {\n    peerId: peerId && getApiChatIdFromMtpPeer(peerId),\n    count,\n    isMe: my,\n    isTop: top,\n    isAnonymous: anonymous,\n  };\n}\n\nexport function buildMessagePeerReaction(userReaction: GramJs.MessagePeerReaction): ApiPeerReaction | undefined {\n  const {\n    peerId, reaction, big, unread, date, my,\n  } = userReaction;\n\n  const apiReaction = buildApiReaction(reaction);\n  if (!apiReaction) return undefined;\n\n  return {\n    peerId: getApiChatIdFromMtpPeer(peerId),\n    reaction: apiReaction,\n    addedDate: date,\n    isUnread: unread,\n    isBig: big,\n    isOwn: my,\n  };\n}\n\nexport function buildApiReaction(reaction: GramJs.TypeReaction, withPaid?: never): ApiReaction | undefined;\nexport function buildApiReaction(reaction: GramJs.TypeReaction, withPaid: true): ApiReactionWithPaid | undefined;\nexport function buildApiReaction(reaction: GramJs.TypeReaction, withPaid?: true): ApiReactionWithPaid | undefined {\n  if (reaction instanceof GramJs.ReactionEmoji) {\n    return {\n      type: 'emoji',\n      emoticon: reaction.emoticon,\n    };\n  }\n\n  if (reaction instanceof GramJs.ReactionCustomEmoji) {\n    return {\n      type: 'custom',\n      documentId: reaction.documentId.toString(),\n    };\n  }\n\n  if (withPaid && reaction instanceof GramJs.ReactionPaid) {\n    return {\n      type: 'paid',\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiSavedReactionTag(tag: GramJs.SavedReactionTag): ApiSavedReactionTag | undefined {\n  const { reaction, title, count } = tag;\n  const apiReaction = buildApiReaction(reaction);\n  if (!apiReaction) return undefined;\n\n  return {\n    reaction: apiReaction,\n    title,\n    count,\n  };\n}\n\nexport function buildApiAvailableReaction(availableReaction: GramJs.AvailableReaction): ApiAvailableReaction {\n  const {\n    selectAnimation, staticIcon, reaction, title, appearAnimation,\n    inactive, aroundAnimation, centerIcon, effectAnimation, activateAnimation,\n    premium,\n  } = availableReaction;\n\n  return {\n    selectAnimation: buildApiDocument(selectAnimation),\n    appearAnimation: buildApiDocument(appearAnimation),\n    activateAnimation: buildApiDocument(activateAnimation),\n    effectAnimation: buildApiDocument(effectAnimation),\n    staticIcon: buildApiDocument(staticIcon),\n    aroundAnimation: aroundAnimation ? buildApiDocument(aroundAnimation) : undefined,\n    centerIcon: centerIcon ? buildApiDocument(centerIcon) : undefined,\n    reaction: { type: 'emoji', emoticon: reaction },\n    title,\n    isInactive: inactive,\n    isPremium: premium,\n  };\n}\n\nexport function buildApiAvailableEffect(availableEffect: GramJs.AvailableEffect): ApiAvailableEffect {\n  const {\n    id, emoticon, premiumRequired, staticIconId, effectStickerId, effectAnimationId,\n  } = availableEffect;\n\n  return {\n    id: id.toString(),\n    emoticon,\n    isPremium: premiumRequired,\n    staticIconId: staticIconId?.toString(),\n    effectStickerId: effectStickerId.toString(),\n    effectAnimationId: effectAnimationId?.toString(),\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiAction,\n  ApiAttachment,\n  ApiChat,\n  ApiContact,\n  ApiDraft,\n  ApiFactCheck,\n  ApiFormattedText,\n  ApiGroupCall,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputSavedStarGift,\n  ApiKeyboardButton,\n  ApiMessage,\n  ApiMessageActionStarGift,\n  ApiMessageActionStarGiftUnique,\n  ApiMessageEntity,\n  ApiMessageForwardInfo,\n  ApiMessageReportResult,\n  ApiNewPoll,\n  ApiPeer,\n  ApiPhoto,\n  ApiPoll,\n  ApiQuickReply,\n  ApiReplyInfo,\n  ApiReplyKeyboard,\n  ApiSponsoredMessage,\n  ApiStarGiftRegular,\n  ApiStarGiftUnique,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiThreadInfo,\n  ApiVideo,\n  MediaContent,\n  PhoneCallAction,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes, MAIN_THREAD_ID,\n} from '../../types';\n\nimport {\n  DELETED_COMMENTS_CHANNEL_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SPONSORED_MESSAGE_CACHE_MS,\n  STARS_CURRENCY_CODE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getEmojiOnlyCountForMessage } from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport { omitUndefined, pick } from '../../../util/iteratees';\nimport { getServerTime, getServerTimeOffset } from '../../../util/serverTime';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildPeer } from '../gramjsBuilders';\nimport {\n  addPhotoToLocalDb,\n  type MediaRepairContext,\n} from '../helpers/localDb';\nimport { resolveMessageApiChatId, serializeBytes } from '../helpers/misc';\nimport { buildApiCallDiscardReason } from './calls';\nimport {\n  buildApiFormattedText,\n  buildApiPhoto,\n} from './common';\nimport { buildApiStarGift } from './gifts';\nimport { buildMessageContent, buildMessageMediaContent, buildMessageTextContent } from './messageContent';\nimport { buildApiPeerColor, buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\nimport { buildMessageReactions } from './reactions';\n\nconst LOCAL_MESSAGES_LIMIT = 1e6; // 1M\n\nconst LOCAL_MEDIA_UPLOADING_TEMP_ID = 'temp';\nconst INPUT_WAVEFORM_LENGTH = 63;\nconst MIN_SCHEDULED_PERIOD = 10;\n\nlet localMessageCounter = 0;\nfunction getNextLocalMessageId(lastMessageId = 0) {\n  return lastMessageId + (++localMessageCounter / LOCAL_MESSAGES_LIMIT);\n}\n\nlet currentUserId!: string;\n\nexport function setMessageBuilderCurrentUserId(_currentUserId: string) {\n  currentUserId = _currentUserId;\n}\n\nexport function buildApiSponsoredMessage(\n  mtpMessage: GramJs.SponsoredMessage, chatId: string,\n): ApiSponsoredMessage | undefined {\n  const {\n    message, entities, randomId, recommended, sponsorInfo, additionalInfo, buttonText, canReport, title, url, color,\n  } = mtpMessage;\n\n  let photo: ApiPhoto | undefined;\n  if (mtpMessage.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(mtpMessage.photo);\n    photo = buildApiPhoto(mtpMessage.photo);\n  }\n\n  let media: MediaContent | undefined;\n  if (mtpMessage.media) {\n    media = buildMessageMediaContent(mtpMessage.media);\n  }\n\n  return {\n    chatId,\n    randomId: serializeBytes(randomId),\n    expiresAt: Math.round(Date.now() / 1000) + SPONSORED_MESSAGE_CACHE_MS,\n    isRecommended: recommended,\n    sponsorInfo,\n    additionalInfo,\n    buttonText,\n    canReport,\n    title,\n    url,\n    peerColor: color && buildApiPeerColor(color),\n    photo,\n    content: {\n      ...media,\n      text: buildMessageTextContent(message, entities),\n    },\n  };\n}\n\nexport function buildApiMessage(mtpMessage: GramJs.TypeMessage): ApiMessage | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return buildApiMessageWithChatId(chatId, mtpMessage);\n}\n\nexport function buildApiMessageFromShort(mtpMessage: GramJs.UpdateShortMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.userId, 'user');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(mtpMessage.out ? currentUserId : buildApiPeerId(mtpMessage.userId, 'user')),\n    peerId: buildPeer(mtpMessage.out ? buildApiPeerId(mtpMessage.userId, 'user') : currentUserId),\n  });\n}\n\nexport function buildApiMessageFromShortChat(mtpMessage: GramJs.UpdateShortChatMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.chatId, 'chat');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(buildApiPeerId(mtpMessage.fromId, 'user')),\n    peerId: buildPeer(buildApiPeerId(mtpMessage.chatId, 'chat')),\n  });\n}\n\nexport function buildApiMessageFromNotification(\n  notification: GramJs.UpdateServiceNotification,\n  currentDate: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId(currentDate);\n  const content = buildMessageContent(notification);\n\n  return {\n    id: localId,\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: notification.inboxDate || currentDate,\n    content,\n    isOutgoing: false,\n  };\n}\n\nexport type UniversalMessage = (\n  Pick<GramJs.Message & GramJs.MessageService, ('id' | 'date' | 'peerId')>\n  & Partial<GramJs.Message & GramJs.MessageService>\n);\n\nexport function buildApiMessageWithChatId(\n  chatId: string,\n  mtpMessage: UniversalMessage,\n): ApiMessage {\n  const fromId = mtpMessage.fromId ? getApiChatIdFromMtpPeer(mtpMessage.fromId) : undefined;\n  const peerId = mtpMessage.peerId ? getApiChatIdFromMtpPeer(mtpMessage.peerId) : undefined;\n\n  const isChatWithSelf = !fromId && chatId === currentUserId;\n  const forwardInfo = mtpMessage.fwdFrom && buildApiMessageForwardInfo(mtpMessage.fwdFrom, isChatWithSelf);\n\n  const isSavedOutgoing = Boolean(!forwardInfo || forwardInfo.fromId === currentUserId || forwardInfo.isSavedOutgoing);\n\n  const isOutgoing = !isChatWithSelf ? Boolean(mtpMessage.out && !mtpMessage.post)\n    : isSavedOutgoing;\n  const content = buildMessageContent(mtpMessage);\n  const action = mtpMessage.action\n    && buildAction(mtpMessage.action, mtpMessage.id, fromId, peerId, Boolean(mtpMessage.post), isOutgoing);\n  if (action) {\n    content.action = action;\n  }\n  const isScheduled = mtpMessage.date > getServerTime() + MIN_SCHEDULED_PERIOD;\n\n  const isInvoiceMedia = mtpMessage.media instanceof GramJs.MessageMediaInvoice\n    && Boolean(mtpMessage.media.extendedMedia);\n\n  const isEdited = Boolean(mtpMessage.editDate) && !mtpMessage.editHide;\n  const {\n    inlineButtons, keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n  } = buildReplyButtons(mtpMessage, isInvoiceMedia) || {};\n  const { mediaUnread: isMediaUnread, postAuthor } = mtpMessage;\n  const groupedId = mtpMessage.groupedId && String(mtpMessage.groupedId);\n  const isInAlbum = Boolean(groupedId) && !(content.document || content.audio || content.sticker);\n  const shouldHideKeyboardButtons = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide;\n  const isHideKeyboardSelective = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide\n    && mtpMessage.replyMarkup.selective;\n  const isProtected = mtpMessage.noforwards || isInvoiceMedia;\n  const isForwardingAllowed = !mtpMessage.noforwards;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n  const hasComments = mtpMessage.replies?.comments;\n  const senderBoosts = mtpMessage.fromBoostsApplied;\n  const factCheck = mtpMessage.factcheck && buildApiFactCheck(mtpMessage.factcheck);\n  const isVideoProcessingPending = mtpMessage.videoProcessingPending;\n  const areReactionsPossible = mtpMessage.reactionsArePossible;\n\n  const isInvertedMedia = mtpMessage.invertMedia;\n\n  const savedPeerId = mtpMessage.savedPeerId && getApiChatIdFromMtpPeer(mtpMessage.savedPeerId);\n\n  return omitUndefined<ApiMessage>({\n    id: mtpMessage.id,\n    chatId,\n    isOutgoing,\n    content,\n    date: mtpMessage.date,\n    senderId: fromId,\n    viewsCount: mtpMessage.views,\n    forwardsCount: mtpMessage.forwards,\n    isScheduled,\n    isFromScheduled: mtpMessage.fromScheduled,\n    isSilent: mtpMessage.silent,\n    isPinned: mtpMessage.pinned,\n    reactions: mtpMessage.reactions && buildMessageReactions(mtpMessage.reactions),\n    emojiOnlyCount,\n    ...(mtpMessage.replyTo && { replyInfo: buildApiReplyInfo(mtpMessage.replyTo, mtpMessage) }),\n    forwardInfo,\n    isEdited,\n    editDate: mtpMessage.editDate,\n    isMediaUnread,\n    hasUnreadMention: mtpMessage.mentioned && isMediaUnread,\n    areReactionsPossible,\n    isMentioned: mtpMessage.mentioned,\n    ...(groupedId && {\n      groupedId,\n      isInAlbum,\n    }),\n    inlineButtons,\n    ...(keyboardButtons && {\n      keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n    }),\n    ...(shouldHideKeyboardButtons && { shouldHideKeyboardButtons, isHideKeyboardSelective }),\n    ...(mtpMessage.viaBotId && { viaBotId: buildApiPeerId(mtpMessage.viaBotId, 'user') }),\n    postAuthorTitle: postAuthor,\n    isProtected,\n    isForwardingAllowed,\n    hasComments,\n    savedPeerId,\n    senderBoosts,\n    viaBusinessBotId: mtpMessage.viaBusinessBotId?.toString(),\n    factCheck,\n    effectId: mtpMessage.effect?.toString(),\n    isInvertedMedia,\n    isVideoProcessingPending,\n    reportDeliveryUntilDate: mtpMessage.reportDeliveryUntilDate,\n  });\n}\n\nexport function buildMessageDraft(draft: GramJs.TypeDraftMessage): ApiDraft | undefined {\n  if (draft instanceof GramJs.DraftMessageEmpty) {\n    return undefined;\n  }\n\n  const {\n    message, entities, replyTo, date, effect,\n  } = draft;\n\n  const replyInfo = replyTo instanceof GramJs.InputReplyToMessage ? {\n    type: 'message',\n    replyToMsgId: replyTo.replyToMsgId,\n    replyToTopId: replyTo.topMsgId,\n    replyToPeerId: replyTo.replyToPeerId && getApiChatIdFromMtpPeer(replyTo.replyToPeerId),\n    quoteText: replyTo.quoteText ? buildMessageTextContent(replyTo.quoteText, replyTo.quoteEntities) : undefined,\n  } satisfies ApiInputMessageReplyInfo : undefined;\n\n  return {\n    text: message ? buildMessageTextContent(message, entities) : undefined,\n    replyInfo,\n    date,\n    effectId: effect?.toString(),\n  };\n}\n\nfunction buildApiMessageForwardInfo(fwdFrom: GramJs.MessageFwdHeader, isChatWithSelf = false): ApiMessageForwardInfo {\n  const savedFromPeerId = fwdFrom.savedFromPeer && getApiChatIdFromMtpPeer(fwdFrom.savedFromPeer);\n  const fromId = fwdFrom.fromId && getApiChatIdFromMtpPeer(fwdFrom.fromId);\n\n  return {\n    date: fwdFrom.date,\n    savedDate: fwdFrom.savedDate,\n    isImported: fwdFrom.imported,\n    isChannelPost: Boolean(fwdFrom.channelPost),\n    channelPostId: fwdFrom.channelPost,\n    isLinkedChannelPost: Boolean(fwdFrom.channelPost && savedFromPeerId === fromId\n      && fwdFrom.savedFromMsgId === fwdFrom.channelPost && !isChatWithSelf),\n    savedFromPeerId,\n    isSavedOutgoing: fwdFrom.savedOut,\n    fromId,\n    fromChatId: fromId || savedFromPeerId,\n    fromMessageId: fwdFrom.savedFromMsgId || fwdFrom.channelPost,\n    hiddenUserName: fwdFrom.fromName,\n    postAuthorTitle: fwdFrom.postAuthor,\n  };\n}\n\nfunction buildApiReplyInfo(\n  replyHeader: GramJs.TypeMessageReplyHeader, context?: MediaRepairContext,\n): ApiReplyInfo | undefined {\n  if (replyHeader instanceof GramJs.MessageReplyStoryHeader) {\n    return {\n      type: 'story',\n      peerId: getApiChatIdFromMtpPeer(replyHeader.peer),\n      storyId: replyHeader.storyId,\n    };\n  }\n\n  if (replyHeader instanceof GramJs.MessageReplyHeader) {\n    const {\n      replyFrom,\n      replyToMsgId,\n      replyToTopId,\n      replyMedia,\n      replyToPeerId,\n      forumTopic,\n      quote,\n      quoteText,\n      quoteEntities,\n    } = replyHeader;\n\n    return {\n      type: 'message',\n      replyToMsgId,\n      replyToTopId,\n      isForumTopic: forumTopic,\n      replyFrom: replyFrom && buildApiMessageForwardInfo(replyFrom),\n      replyToPeerId: replyToPeerId && getApiChatIdFromMtpPeer(replyToPeerId),\n      replyMedia: replyMedia && buildMessageMediaContent(replyMedia, context),\n      isQuote: quote,\n      quoteText: quoteText ? buildMessageTextContent(quoteText, quoteEntities) : undefined,\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiFactCheck(factCheck: GramJs.FactCheck): ApiFactCheck {\n  return {\n    shouldFetch: factCheck.needCheck,\n    hash: factCheck.hash.toString(),\n    text: factCheck.text && buildApiFormattedText(factCheck.text),\n    countryCode: factCheck.country,\n  };\n}\n\nfunction buildApiMessageActionStarGift(\n  action: GramJs.MessageActionStarGift, messageId: number,\n): ApiMessageActionStarGift {\n  const {\n    nameHidden, saved, converted, gift, message, convertStars, canUpgrade, upgraded, upgradeMsgId, upgradeStars,\n    peer, savedId, fromId,\n  } = action;\n\n  const inputSavedGift: ApiInputSavedStarGift = savedId && peer ? {\n    type: 'chat',\n    chatId: getApiChatIdFromMtpPeer(peer),\n    savedId: savedId.toString(),\n  } : {\n    type: 'user',\n    messageId,\n  };\n\n  return {\n    type: 'starGift',\n    isNameHidden: Boolean(nameHidden),\n    isSaved: Boolean(saved),\n    isConverted: converted,\n    fromId: fromId && getApiChatIdFromMtpPeer(fromId),\n    gift: buildApiStarGift(gift) as ApiStarGiftRegular,\n    message: message && buildApiFormattedText(message),\n    starsToConvert: convertStars?.toJSNumber(),\n    canUpgrade,\n    isUpgraded: upgraded,\n    upgradeMsgId,\n    alreadyPaidUpgradeStars: upgradeStars?.toJSNumber(),\n    peerId: peer && getApiChatIdFromMtpPeer(peer),\n    savedId: savedId?.toString(),\n    inputSavedGift,\n  };\n}\n\nfunction buildApiMessageActionStarGiftUnique(\n  action: GramJs.MessageActionStarGiftUnique, messageId: number,\n): ApiMessageActionStarGiftUnique {\n  const {\n    gift, canExportAt, refunded, saved, transferStars, transferred, upgrade, fromId, peer, savedId,\n  } = action;\n\n  const inputSavedGift: ApiInputSavedStarGift = savedId && peer ? {\n    type: 'chat',\n    chatId: getApiChatIdFromMtpPeer(peer),\n    savedId: savedId.toString(),\n  } : {\n    type: 'user',\n    messageId,\n  };\n\n  return {\n    type: 'starGiftUnique',\n    gift: buildApiStarGift(gift) as ApiStarGiftUnique,\n    canExportAt,\n    isRefunded: refunded,\n    isSaved: saved,\n    transferStars: transferStars?.toJSNumber(),\n    isTransferred: transferred,\n    isUpgrade: upgrade,\n    fromId: fromId && getApiChatIdFromMtpPeer(fromId),\n    peerId: peer && getApiChatIdFromMtpPeer(peer),\n    savedId: savedId?.toString(),\n    inputSavedGift,\n  };\n}\n\nfunction buildAction(\n  action: GramJs.TypeMessageAction,\n  messageId: number,\n  senderId: string | undefined,\n  targetPeerId: string | undefined,\n  isChannelPost: boolean,\n  isOutgoing: boolean,\n): ApiAction | undefined {\n  if (action instanceof GramJs.MessageActionEmpty) {\n    return undefined;\n  }\n\n  let phoneCall: PhoneCallAction | undefined;\n  let call: Partial<ApiGroupCall> | undefined;\n  let amount: number | undefined;\n  let stars: number | undefined;\n  let starGift: ApiMessageActionStarGift | ApiMessageActionStarGiftUnique | undefined;\n  let currency: string | undefined;\n  let giftCryptoInfo: {\n    currency: string;\n    amount: number;\n  } | undefined;\n  let text: string;\n  const translationValues: string[] = [];\n  let type: ApiAction['type'] = 'other';\n  let photo: ApiPhoto | undefined;\n  let score: number | undefined;\n  let months: number | undefined;\n  let topicEmojiIconId: string | undefined;\n  let isTopicAction: boolean | undefined;\n  let slug: string | undefined;\n  let isGiveaway: boolean | undefined;\n  let isUnclaimed: boolean | undefined;\n  let pluralValue: number | undefined;\n  let transactionId: string | undefined;\n  let message: ApiFormattedText | undefined;\n\n  let targetUserIds = 'users' in action\n    ? action.users && action.users.map((id) => buildApiPeerId(id, 'user'))\n    : ('userId' in action && [buildApiPeerId(action.userId, 'user')]) || [];\n\n  let targetChatId;\n  if (action instanceof GramJs.MessageActionChatCreate) {\n    text = 'Notification.CreatedChatWithTitle';\n    translationValues.push('%action_origin%', action.title);\n    type = 'chatCreate';\n  } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n    if (isChannelPost) {\n      text = 'Channel.MessageTitleUpdated';\n      translationValues.push(action.title);\n    } else {\n      text = 'Notification.ChangedGroupName';\n      translationValues.push('%action_origin%', action.title);\n    }\n  } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoUpdated';\n    } else {\n      text = 'Notification.ChangedGroupPhoto';\n      translationValues.push('%action_origin%');\n    }\n    type = 'updateProfilePhoto';\n  } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoRemoved';\n    } else {\n      text = 'Group.MessagePhotoRemoved';\n    }\n  } else if (action instanceof GramJs.MessageActionChatAddUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.JoinedChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Invited';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.LeftChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Kicked';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatJoinedByLink) {\n    text = 'Notification.JoinedGroupByLink';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionChannelCreate) {\n    text = 'Notification.CreatedChannel';\n  } else if (action instanceof GramJs.MessageActionChatMigrateTo) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated to %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionChannelMigrateFrom) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated from %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionPinMessage) {\n    text = 'Chat.Service.Group.UpdatedPinnedMessage1';\n    translationValues.push('%action_origin%', '%message%');\n  } else if (action instanceof GramJs.MessageActionHistoryClear) {\n    text = 'HistoryCleared';\n    type = 'historyClear';\n  } else if (action instanceof GramJs.MessageActionPhoneCall) {\n    const withDuration = Boolean(action.duration);\n    text = [\n      withDuration ? 'ChatList.Service' : 'Chat',\n      action.video ? 'VideoCall' : 'Call',\n      isOutgoing ? (withDuration ? 'outgoing' : 'Outgoing') : (withDuration ? 'incoming' : 'Incoming'),\n    ].join('.');\n\n    if (withDuration) {\n      const mins = Math.max(Math.round(action.duration! / 60), 1);\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    }\n\n    phoneCall = {\n      isOutgoing,\n      isVideo: action.video,\n      duration: action.duration,\n      reason: buildApiCallDiscardReason(action.reason),\n    };\n  } else if (action instanceof GramJs.MessageActionInviteToGroupCall) {\n    text = 'Notification.VoiceChatInvitation';\n    call = {\n      id: action.call.id.toString(),\n      accessHash: action.call.accessHash.toString(),\n    };\n    translationValues.push('%action_origin%', '%target_user%');\n  } else if (action instanceof GramJs.MessageActionContactSignUp) {\n    text = 'Notification.Joined';\n    translationValues.push('%action_origin%');\n    type = 'contactSignUp';\n  } else if (action instanceof GramJs.MessageActionPaymentSent) {\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n    text = 'PaymentSuccessfullyPaid';\n    type = 'receipt';\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    translationValues.push('%payment_amount%', '%target_user%', '%product%');\n  } else if (action instanceof GramJs.MessageActionGroupCall) {\n    if (action.duration) {\n      const mins = Math.max(Math.round(action.duration / 60), 1);\n      text = 'Notification.VoiceChatEnded';\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    } else {\n      text = 'Notification.VoiceChatStartedChannel';\n      call = {\n        id: action.call.id.toString(),\n        accessHash: action.call.accessHash.toString(),\n      };\n    }\n  } else if (action instanceof GramJs.MessageActionBotAllowed) {\n    if (action.domain) {\n      text = 'ActionBotAllowed';\n      translationValues.push(action.domain);\n    } else if (action.fromRequest) {\n      text = 'lng_action_webapp_bot_allowed';\n    } else {\n      text = 'ActionAttachMenuBotAllowed';\n    }\n  } else if (action instanceof GramJs.MessageActionCustomAction) {\n    text = action.message;\n  } else if (action instanceof GramJs.MessageActionChatJoinedByRequest) {\n    text = 'ChatService.UserJoinedGroupByRequest';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGameScore) {\n    text = senderId === currentUserId ? 'ActionYouScoredInGame' : 'ActionUserScoredInGame';\n    translationValues.push('%score%');\n    score = action.score;\n  } else if (action instanceof GramJs.MessageActionWebViewDataSent) {\n    text = 'Notification.WebAppSentData';\n    translationValues.push(action.text);\n  } else if (action instanceof GramJs.MessageActionGiftPremium) {\n    type = 'giftPremium';\n    text = isOutgoing ? 'ActionGiftOutbound' : 'ActionGiftInbound';\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    } else {\n      translationValues.push('%action_origin%', '%gift_payment_amount%');\n    }\n    if (action.message) {\n      message = buildApiFormattedText(action.message);\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: action.cryptoAmount!.toJSNumber(),\n      };\n    }\n    amount = action.amount.toJSNumber();\n    months = action.months;\n  } else if (action instanceof GramJs.MessageActionTopicCreate) {\n    text = 'TopicWasCreatedAction';\n    type = 'topicCreate';\n    translationValues.push(action.title);\n  } else if (action instanceof GramJs.MessageActionTopicEdit) {\n    if (action.closed !== undefined) {\n      text = action.closed ? 'TopicWasClosedAction' : 'TopicWasReopenedAction';\n      translationValues.push('%action_origin%', '%action_topic%');\n    } else if (action.hidden !== undefined) {\n      text = action.hidden ? 'TopicHidden2' : 'TopicShown';\n    } else if (action.title) {\n      text = 'TopicRenamedTo';\n      translationValues.push('%action_origin%', action.title);\n    } else if (action.iconEmojiId) {\n      text = 'TopicWasIconChangedToAction';\n      translationValues.push('%action_origin%', '%action_topic_icon%');\n      topicEmojiIconId = action.iconEmojiId.toString();\n    } else {\n      text = 'ChatList.UnsupportedMessage';\n    }\n    isTopicAction = true;\n  } else if (action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n    const isVideo = action.photo instanceof GramJs.Photo && action.photo.videoSizes?.length;\n    text = senderId === currentUserId\n      ? (isVideo ? 'ActionSuggestVideoFromYouDescription' : 'ActionSuggestPhotoFromYouDescription')\n      : (isVideo ? 'ActionSuggestVideoToYouDescription' : 'ActionSuggestPhotoToYouDescription');\n    type = 'suggestProfilePhoto';\n    translationValues.push('%target_user%');\n\n    if (targetPeerId) targetUserIds.push(targetPeerId);\n  } else if (action instanceof GramJs.MessageActionGiveawayLaunch) {\n    text = 'BoostingGiveawayJustStarted';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGiftCode) {\n    type = 'giftCode';\n    text = isOutgoing ? 'ActionGiftOutbound' : 'BoostingReceivedGiftNoName';\n    slug = action.slug;\n    months = action.months;\n    amount = action.amount?.toJSNumber();\n    isGiveaway = Boolean(action.viaGiveaway);\n    isUnclaimed = Boolean(action.unclaimed);\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    }\n    if (action.message) {\n      message = buildApiFormattedText(action.message);\n    }\n\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: action.cryptoAmount!.toJSNumber(),\n      };\n    }\n    if (action.boostPeer) {\n      targetChatId = getApiChatIdFromMtpPeer(action.boostPeer);\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n  } else if (action instanceof GramJs.MessageActionGiveawayResults) {\n    if (!action.winnersCount) {\n      text = 'lng_action_giveaway_results_none';\n    } else if (action.unclaimedCount) {\n      text = 'lng_action_giveaway_results_some';\n    } else {\n      text = 'BoostingGiveawayServiceWinnersSelected';\n      translationValues.push('%amount%');\n      amount = action.winnersCount;\n      pluralValue = action.winnersCount;\n    }\n  } else if (action instanceof GramJs.MessageActionPrizeStars) {\n    type = 'prizeStars';\n    isUnclaimed = Boolean(action.unclaimed);\n    if (action.boostPeer) {\n      targetChatId = getApiChatIdFromMtpPeer(action.boostPeer);\n    }\n    text = 'Notification.StarsPrize';\n    stars = action.stars.toJSNumber();\n    transactionId = action.transactionId;\n  } else if (action instanceof GramJs.MessageActionBoostApply) {\n    type = 'chatBoost';\n    if (action.boosts === 1) {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsg' : 'BoostingBoostsGroupByUserServiceMsg';\n      translationValues.push('%action_origin%');\n    } else {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsgCount'\n        : 'BoostingBoostsGroupByUserServiceMsgCount';\n      translationValues.push(action.boosts.toString());\n      if (senderId !== currentUserId) {\n        translationValues.unshift('%action_origin%');\n      }\n      pluralValue = action.boosts;\n    }\n  } else if (action instanceof GramJs.MessageActionPaymentRefunded) {\n    text = 'ActionRefunded';\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n  } else if (action instanceof GramJs.MessageActionRequestedPeer) {\n    text = 'ActionRequestedPeer';\n    if (action.peers) {\n      targetUserIds = action.peers?.map((peer) => getApiChatIdFromMtpPeer(peer));\n    }\n    if (targetPeerId) {\n      translationValues.unshift('%action_origin%');\n    }\n  } else if (action instanceof GramJs.MessageActionGiftStars) {\n    type = 'giftStars';\n    text = isOutgoing ? 'ActionGiftOutbound' : targetPeerId ? 'ActionGiftInbound' : 'BoostingReceivedGiftNoName';\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    } else {\n      translationValues.push('%action_origin%', '%gift_payment_amount%');\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n      targetChatId = targetPeerId;\n    }\n\n    if (action.cryptoCurrency) {\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: action.cryptoAmount!.toJSNumber(),\n      };\n    }\n\n    currency = action.currency;\n    amount = action.amount.toJSNumber();\n    stars = action.stars.toJSNumber();\n    transactionId = action.transactionId;\n  } else if (action instanceof GramJs.MessageActionStarGift && action.gift instanceof GramJs.StarGift) {\n    type = 'starGift';\n    starGift = buildApiMessageActionStarGift(action, messageId);\n    if (isOutgoing) {\n      text = 'ActionGiftOutbound';\n      translationValues.push('%gift_payment_amount%');\n    } else {\n      text = 'ActionGiftInbound';\n      translationValues.push('%action_origin%', '%gift_payment_amount%');\n    }\n\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n      targetChatId = targetPeerId;\n    }\n\n    amount = action.gift.stars.toJSNumber();\n    currency = STARS_CURRENCY_CODE;\n  } else if (action instanceof GramJs.MessageActionStarGiftUnique && action.gift instanceof GramJs.StarGiftUnique) {\n    type = 'starGiftUnique';\n    if (isOutgoing) {\n      text = action.upgrade ? 'Notification.StarsGift.UpgradeYou' : 'ActionUniqueGiftTransferOutbound';\n    } else {\n      text = action.upgrade ? 'Notification.StarsGift.Upgrade' : 'ActionUniqueGiftTransferInbound';\n      translationValues.push('%action_origin_chat%');\n    }\n\n    starGift = buildApiMessageActionStarGiftUnique(action, messageId);\n\n    if (action.peer) {\n      targetChatId = getApiChatIdFromMtpPeer(action.peer);\n    } else if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n      targetChatId = targetPeerId;\n    }\n  } else {\n    text = 'ChatList.UnsupportedMessage';\n  }\n\n  if ('photo' in action && action.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(action.photo);\n    photo = buildApiPhoto(action.photo);\n  }\n\n  return {\n    mediaType: 'action',\n    text,\n    type,\n    targetUserIds,\n    targetChatId,\n    photo,\n    amount,\n    stars,\n    starGift,\n    currency,\n    giftCryptoInfo,\n    isGiveaway,\n    slug,\n    translationValues,\n    call,\n    phoneCall,\n    score,\n    months,\n    topicEmojiIconId,\n    isTopicAction,\n    isUnclaimed,\n    pluralValue,\n    transactionId,\n    message,\n  };\n}\n\nfunction buildReplyButtons(message: UniversalMessage, shouldSkipBuyButton?: boolean): ApiReplyKeyboard | undefined {\n  const { replyMarkup, media } = message;\n\n  if (!(replyMarkup instanceof GramJs.ReplyKeyboardMarkup || replyMarkup instanceof GramJs.ReplyInlineMarkup)) {\n    return undefined;\n  }\n\n  const markup = replyMarkup.rows.map(({ buttons }) => {\n    return buttons.map((button): ApiKeyboardButton | undefined => {\n      const { text } = button;\n\n      if (button instanceof GramJs.KeyboardButton) {\n        return {\n          type: 'command',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrl) {\n        if (button.url.includes('?startgroup=')) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'url',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCallback) {\n        if (button.requiresPassword) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'callback',\n          text,\n          data: serializeBytes(button.data),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPoll) {\n        return {\n          type: 'requestPoll',\n          text,\n          isQuiz: button.quiz,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPhone) {\n        return {\n          type: 'requestPhone',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonBuy) {\n        if (media instanceof GramJs.MessageMediaInvoice && media.receiptMsgId) {\n          return {\n            type: 'receipt',\n            receiptMessageId: media.receiptMsgId,\n          };\n        }\n        if (shouldSkipBuyButton) return undefined;\n        return {\n          type: 'buy',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonGame) {\n        return {\n          type: 'game',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSwitchInline) {\n        return {\n          type: 'switchBotInline',\n          text,\n          query: button.query,\n          isSamePeer: button.samePeer,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUserProfile) {\n        return {\n          type: 'userProfile',\n          text,\n          userId: button.userId.toString(),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSimpleWebView) {\n        return {\n          type: 'simpleWebView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonWebView) {\n        return {\n          type: 'webView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrlAuth) {\n        return {\n          type: 'urlAuth',\n          text,\n          url: button.url,\n          buttonId: button.buttonId,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCopy) {\n        return {\n          type: 'copy',\n          text,\n          copyText: button.copyText,\n        };\n      }\n\n      return {\n        type: 'unsupported',\n        text,\n      };\n    }).filter(Boolean);\n  });\n\n  if (markup.every((row) => !row.length)) return undefined;\n\n  return {\n    [replyMarkup instanceof GramJs.ReplyKeyboardMarkup ? 'keyboardButtons' : 'inlineButtons']: markup,\n    ...(replyMarkup instanceof GramJs.ReplyKeyboardMarkup && {\n      keyboardPlaceholder: replyMarkup.placeholder,\n      isKeyboardSingleUse: replyMarkup.singleUse,\n      isKeyboardSelective: replyMarkup.selective,\n    }),\n  };\n}\n\nfunction buildNewPoll(poll: ApiNewPoll, localId: number): ApiPoll {\n  return {\n    mediaType: 'poll',\n    id: String(localId),\n    summary: pick(poll.summary, ['question', 'answers']),\n    results: {},\n  };\n}\n\nexport function buildLocalMessage(\n  chat: ApiChat,\n  lastMessageId?: number,\n  text?: string,\n  entities?: ApiMessageEntity[],\n  replyInfo?: ApiInputReplyInfo,\n  attachment?: ApiAttachment,\n  sticker?: ApiSticker,\n  gif?: ApiVideo,\n  poll?: ApiNewPoll,\n  contact?: ApiContact,\n  groupedId?: string,\n  scheduledAt?: number,\n  sendAs?: ApiPeer,\n  story?: ApiStory | ApiStorySkipped,\n  isInvertedMedia?: true,\n  effectId?: string,\n) {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const media = attachment && buildUploadingMedia(attachment);\n  const isChannel = chat.type === 'chatTypeChannel';\n\n  const resultReplyInfo = replyInfo && buildReplyInfo(replyInfo, chat.isForum);\n\n  const localPoll = poll && buildNewPoll(poll, localId);\n\n  const message = {\n    id: localId,\n    chatId: chat.id,\n    content: omitUndefined({\n      text: text ? {\n        text,\n        entities,\n      } : undefined,\n      ...media,\n      sticker,\n      video: gif || media?.video,\n      contact,\n      storyData: story && { mediaType: 'storyData', ...story },\n      pollId: localPoll?.id,\n    }),\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !isChannel,\n    senderId: sendAs?.id || currentUserId,\n    replyInfo: resultReplyInfo,\n    ...(groupedId && {\n      groupedId,\n      ...(media && (media.photo || media.video) && { isInAlbum: true }),\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n    isForwardingAllowed: true,\n    isInvertedMedia,\n    effectId,\n  } satisfies ApiMessage;\n\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(message.content, message.groupedId);\n\n  const finalMessage = {\n    ...message,\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n  };\n\n  return {\n    message: finalMessage,\n    poll: localPoll,\n  };\n}\n\nexport function buildLocalForwardedMessage({\n  toChat,\n  toThreadId,\n  message,\n  scheduledAt,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n  lastMessageId,\n  sendAs,\n}: {\n  toChat: ApiChat;\n  toThreadId?: number;\n  message: ApiMessage;\n  scheduledAt?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n  lastMessageId?: number;\n  sendAs?: ApiPeer;\n}): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const {\n    content,\n    chatId: fromChatId,\n    id: fromMessageId,\n    senderId,\n    groupedId,\n    isInAlbum,\n    isInvertedMedia,\n  } = message;\n\n  const isAudio = content.audio;\n  const asIncomingInChatWithSelf = (\n    toChat.id === currentUserId && (fromChatId !== toChat.id || message.forwardInfo) && !isAudio\n  );\n  const shouldHideText = Object.keys(content).length > 1 && content.text && noCaptions;\n  const shouldDropCustomEmoji = !isCurrentUserPremium;\n  const strippedText = content.text?.entities && shouldDropCustomEmoji ? {\n    text: content.text.text,\n    entities: content.text.entities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji),\n  } : content.text;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  const updatedContent = {\n    ...content,\n    text: !shouldHideText ? strippedText : undefined,\n  };\n\n  // TODO Prepare reply info between forwarded messages locally, to prevent height jumps\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n  const replyInfo: ApiReplyInfo | undefined = toThreadId && !isToMainThread ? {\n    type: 'message',\n    replyToMsgId: toThreadId,\n    replyToTopId: toThreadId,\n    isForumTopic: toChat.isForum || undefined,\n  } : undefined;\n\n  return {\n    id: localId,\n    chatId: toChat.id,\n    content: updatedContent,\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !asIncomingInChatWithSelf && toChat.type !== 'chatTypeChannel',\n    senderId: sendAs?.id || currentUserId,\n    sendingState: 'messageSendingStatePending',\n    groupedId,\n    isInAlbum,\n    isForwardingAllowed: true,\n    replyInfo,\n    isInvertedMedia,\n    ...(toThreadId && toChat?.isForum && { isTopicReply: true }),\n\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    // Forward info doesn't get added when user forwards own messages and when forwarding audio\n    ...(message.chatId !== currentUserId && !isAudio && !noAuthors && {\n      forwardInfo: {\n        date: message.forwardInfo?.date || message.date,\n        savedDate: message.date,\n        isChannelPost: false,\n        fromChatId,\n        fromMessageId,\n        fromId: senderId,\n        savedFromPeerId: message.chatId,\n      },\n    }),\n    ...(message.chatId === currentUserId && !noAuthors && { forwardInfo: message.forwardInfo }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nfunction buildReplyInfo(inputInfo: ApiInputReplyInfo, isForum?: boolean): ApiReplyInfo {\n  if (inputInfo.type === 'story') {\n    return {\n      type: 'story',\n      peerId: inputInfo.peerId,\n      storyId: inputInfo.storyId,\n    };\n  }\n\n  return {\n    type: 'message',\n    replyToMsgId: inputInfo.replyToMsgId,\n    replyToTopId: inputInfo.replyToTopId,\n    replyToPeerId: inputInfo.replyToPeerId,\n    quoteText: inputInfo.quoteText,\n    isForumTopic: isForum && inputInfo.replyToTopId ? true : undefined,\n    ...(Boolean(inputInfo.quoteText) && { isQuote: true }),\n  };\n}\n\nexport function buildUploadingMedia(\n  attachment: ApiAttachment,\n): MediaContent {\n  const {\n    filename: fileName,\n    blobUrl,\n    previewBlobUrl,\n    mimeType,\n    size,\n    audio,\n    shouldSendAsFile,\n    shouldSendAsSpoiler,\n    ttlSeconds,\n  } = attachment;\n\n  if (!shouldSendAsFile) {\n    if (attachment.quick) {\n      // TODO Handle GIF as video, but support playback in <video>\n      if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height } = attachment.quick;\n        return {\n          photo: {\n            mediaType: 'photo',\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            sizes: [],\n            thumbnail: { width, height, dataUri: previewBlobUrl || blobUrl },\n            blobUrl,\n            date: Math.round(Date.now() / 1000),\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n      if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height, duration } = attachment.quick;\n        return {\n          video: {\n            mediaType: 'video',\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            mimeType,\n            duration: duration || 0,\n            fileName,\n            width,\n            height,\n            blobUrl,\n            ...(previewBlobUrl && { thumbnail: { width, height, dataUri: previewBlobUrl } }),\n            size,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n    }\n    if (attachment.voice) {\n      const { duration, waveform } = attachment.voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      return {\n        voice: {\n          mediaType: 'voice',\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          duration,\n          waveform: inputWaveform,\n          size,\n        },\n        ttlSeconds,\n      };\n    }\n    if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n      const { duration, performer, title } = audio || {};\n      return {\n        audio: {\n          mediaType: 'audio',\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          mimeType,\n          fileName,\n          size,\n          duration: duration || 0,\n          title,\n          performer,\n        },\n      };\n    }\n  }\n  return {\n    document: {\n      mediaType: 'document',\n      mimeType,\n      fileName,\n      size,\n      ...(previewBlobUrl && { previewBlobUrl }),\n    },\n  };\n}\n\nexport function buildApiThreadInfoFromMessage(\n  mtpMessage: GramJs.TypeMessage,\n): ApiThreadInfo | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message)\n    || !mtpMessage.replies) {\n    return undefined;\n  }\n\n  return buildApiThreadInfo(mtpMessage.replies, mtpMessage.id, chatId);\n}\n\nexport function buildApiThreadInfo(\n  messageReplies: GramJs.TypeMessageReplies, messageId: number, chatId: string,\n): ApiThreadInfo | undefined {\n  const {\n    channelId, replies, maxId, readMaxId, recentRepliers, comments,\n  } = messageReplies;\n\n  const apiChannelId = channelId ? buildApiPeerId(channelId, 'channel') : undefined;\n  if (apiChannelId === DELETED_COMMENTS_CHANNEL_ID) {\n    return undefined;\n  }\n\n  const baseThreadInfo = {\n    messagesCount: replies,\n    ...(maxId && { lastMessageId: maxId }),\n    ...(readMaxId && { lastReadMessageId: readMaxId }),\n    ...(recentRepliers && { recentReplierIds: recentRepliers.map(getApiChatIdFromMtpPeer) }),\n  };\n\n  if (comments) {\n    return {\n      ...baseThreadInfo,\n      isCommentsInfo: true,\n      chatId: apiChannelId!,\n      originChannelId: chatId,\n      originMessageId: messageId,\n    };\n  }\n\n  return {\n    ...baseThreadInfo,\n    isCommentsInfo: false,\n    chatId,\n    threadId: messageId,\n  };\n}\n\nexport function buildApiQuickReply(reply: GramJs.TypeQuickReply): ApiQuickReply {\n  const { shortcutId, shortcut, topMessage } = reply;\n  return {\n    id: shortcutId,\n    shortcut,\n    topMessageId: topMessage,\n  };\n}\n\nexport function buildApiReportResult(\n  result: GramJs.TypeReportResult,\n): ApiMessageReportResult {\n  if (result instanceof GramJs.ReportResultReported) {\n    return {\n      type: 'reported',\n    };\n  }\n\n  if (result instanceof GramJs.ReportResultAddComment) {\n    return {\n      type: 'comment',\n      isOptional: result.optional,\n      option: serializeBytes(result.option),\n    };\n  }\n\n  const title = result.title;\n  const options = result.options.map((option) => ({\n    text: option.text,\n    option: serializeBytes(option.option),\n  }));\n\n  return {\n    type: 'selectOption',\n    title,\n    options,\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiMediaArea,\n  ApiMediaAreaCoordinates,\n  ApiStealthMode,\n  ApiStory,\n  ApiStoryForwardInfo,\n  ApiStoryView,\n  ApiStoryViews,\n  ApiTypeStory,\n  ApiTypeStoryView,\n  MediaContent,\n} from '../../types';\n\nimport { buildCollectionByCallback, omitUndefined } from '../../../util/iteratees';\nimport { buildPrivacyRules } from './common';\nimport { buildGeoPoint, buildMessageMediaContent, buildMessageTextContent } from './messageContent';\nimport { buildApiMessage } from './messages';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\nimport { buildApiReaction, buildReactionCount } from './reactions';\n\nexport function buildApiStory(peerId: string, story: GramJs.TypeStoryItem): ApiTypeStory {\n  if (story instanceof GramJs.StoryItemDeleted) {\n    return {\n      id: story.id,\n      peerId,\n      isDeleted: true,\n    };\n  }\n\n  if (story instanceof GramJs.StoryItemSkipped) {\n    const {\n      id, date, expireDate, closeFriends,\n    } = story;\n\n    return {\n      id,\n      peerId,\n      ...(closeFriends && { isForCloseFriends: true }),\n      date,\n      expireDate,\n    };\n  }\n\n  const {\n    edited, pinned, expireDate, id, date, caption,\n    entities, media, privacy, views,\n    public: isPublic, noforwards, closeFriends, contacts, selectedContacts,\n    mediaAreas, sentReaction, out, fwdFrom, fromId,\n  } = story;\n\n  const content: MediaContent = {\n    ...buildMessageMediaContent(media),\n  };\n\n  if (caption) {\n    content.text = buildMessageTextContent(caption, entities);\n  }\n\n  const reaction = sentReaction && buildApiReaction(sentReaction);\n\n  return omitUndefined<ApiStory>({\n    id,\n    peerId,\n    date,\n    expireDate,\n    content,\n    isPublic,\n    isEdited: edited,\n    isInProfile: pinned,\n    isForContacts: contacts,\n    isForSelectedContacts: selectedContacts,\n    isForCloseFriends: closeFriends,\n    noForwards: noforwards,\n    views: views && buildApiStoryViews(views),\n    isOut: out,\n    visibility: privacy && buildPrivacyRules(privacy),\n    mediaAreas: mediaAreas?.map(buildApiMediaArea).filter(Boolean),\n    sentReaction: reaction,\n    forwardInfo: fwdFrom && buildApiStoryForwardInfo(fwdFrom),\n    fromId: fromId && getApiChatIdFromMtpPeer(fromId),\n  });\n}\n\nexport function buildApiStoryViews(views: GramJs.TypeStoryViews): ApiStoryViews {\n  return omitUndefined<ApiStoryViews>({\n    hasViewers: views.hasViewers,\n    viewsCount: views.viewsCount,\n    forwardsCount: views.forwardsCount,\n    reactionsCount: views.reactionsCount,\n    reactions: views.reactions?.map(buildReactionCount).filter(Boolean),\n    recentViewerIds: views.recentViewers?.map((viewerId) => buildApiPeerId(viewerId, 'user')),\n  });\n}\n\nexport function buildApiStoryView(view: GramJs.TypeStoryView): ApiTypeStoryView | undefined {\n  const {\n    blockedMyStoriesFrom, blocked,\n  } = view;\n\n  if (view instanceof GramJs.StoryView) {\n    return omitUndefined<ApiStoryView>({\n      type: 'user',\n      peerId: buildApiPeerId(view.userId, 'user'),\n      date: view.date,\n      reaction: view.reaction && buildApiReaction(view.reaction),\n      areStoriesBlocked: blocked || blockedMyStoriesFrom,\n      isUserBlocked: blocked,\n    });\n  }\n\n  if (view instanceof GramJs.StoryViewPublicForward) {\n    const message = buildApiMessage(view.message);\n    if (!message) return undefined;\n    return {\n      type: 'forward',\n      peerId: message.chatId,\n      messageId: message.id,\n      message,\n      date: message.date,\n      areStoriesBlocked: blocked || blockedMyStoriesFrom,\n      isUserBlocked: blocked,\n    };\n  }\n\n  if (view instanceof GramJs.StoryViewPublicRepost) {\n    const peerId = getApiChatIdFromMtpPeer(view.peerId);\n    const story = buildApiStory(peerId, view.story);\n    if (!('content' in story)) return undefined;\n\n    return {\n      type: 'repost',\n      peerId,\n      storyId: view.story.id,\n      date: story.date,\n      story,\n      areStoriesBlocked: blocked || blockedMyStoriesFrom,\n      isUserBlocked: blocked,\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiStealthMode(stealthMode: GramJs.TypeStoriesStealthMode): ApiStealthMode {\n  return {\n    activeUntil: stealthMode.activeUntilDate,\n    cooldownUntil: stealthMode.cooldownUntilDate,\n  };\n}\n\nfunction buildApiMediaAreaCoordinates(coordinates: GramJs.TypeMediaAreaCoordinates): ApiMediaAreaCoordinates {\n  const {\n    x, y, w, h, rotation, radius,\n  } = coordinates;\n\n  return {\n    x,\n    y,\n    width: w,\n    height: h,\n    rotation,\n    radius,\n  };\n}\n\nexport function buildApiMediaArea(area: GramJs.TypeMediaArea): ApiMediaArea | undefined {\n  const coordinates = buildApiMediaAreaCoordinates(area.coordinates);\n  if (area instanceof GramJs.MediaAreaVenue) {\n    const { geo, title } = area;\n    const point = buildGeoPoint(geo);\n\n    if (!point) return undefined;\n\n    return {\n      type: 'venue',\n      coordinates,\n      geo: point,\n      title,\n    };\n  }\n\n  if (area instanceof GramJs.MediaAreaGeoPoint) {\n    const { geo } = area;\n    const point = buildGeoPoint(geo);\n\n    if (!point) return undefined;\n\n    return {\n      type: 'geoPoint',\n      coordinates,\n      geo: point,\n    };\n  }\n\n  if (area instanceof GramJs.MediaAreaSuggestedReaction) {\n    const {\n      reaction, dark, flipped,\n    } = area;\n\n    const apiReaction = buildApiReaction(reaction);\n    if (!apiReaction) {\n      return undefined;\n    }\n\n    return {\n      type: 'suggestedReaction',\n      coordinates,\n      reaction: apiReaction,\n      ...(dark && { isDark: true }),\n      ...(flipped && { isFlipped: true }),\n    };\n  }\n\n  if (area instanceof GramJs.MediaAreaChannelPost) {\n    const { channelId, msgId } = area;\n\n    return {\n      type: 'channelPost',\n      coordinates,\n      channelId: buildApiPeerId(channelId, 'channel'),\n      messageId: msgId,\n    };\n  }\n\n  if (area instanceof GramJs.MediaAreaUrl) {\n    const { url } = area;\n\n    return {\n      type: 'url',\n      coordinates,\n      url,\n    };\n  }\n\n  if (area instanceof GramJs.MediaAreaWeather) {\n    const {\n      emoji, temperatureC, color,\n    } = area;\n\n    return {\n      type: 'weather',\n      coordinates,\n      emoji,\n      temperatureC,\n      color,\n    };\n  }\n\n  if (area instanceof GramJs.MediaAreaStarGift) {\n    const { slug } = area;\n\n    return {\n      type: 'uniqueGift',\n      coordinates,\n      slug,\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiPeerStories(peerStories: GramJs.PeerStories) {\n  const peerId = getApiChatIdFromMtpPeer(peerStories.peer);\n\n  return buildCollectionByCallback(peerStories.stories, (story) => [story.id, buildApiStory(peerId, story)]);\n}\n\nexport function buildApiStoryForwardInfo(forwardHeader: GramJs.TypeStoryFwdHeader): ApiStoryForwardInfo {\n  const {\n    from, fromName, storyId, modified,\n  } = forwardHeader;\n\n  return {\n    storyId,\n    fromPeerId: from && getApiChatIdFromMtpPeer(from),\n    fromName,\n    isModified: modified,\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiAttachBot,\n  ApiAttachBotIcon,\n  ApiAttachMenuPeerType,\n  ApiBotApp,\n  ApiBotAppSettings,\n  ApiBotCommand,\n  ApiBotInfo,\n  ApiBotInlineMediaResult,\n  ApiBotInlineResult,\n  ApiBotInlineSwitchPm,\n  ApiBotInlineSwitchWebview,\n  ApiBotMenuButton,\n  ApiInlineResultType,\n  ApiMessagesBotApp,\n} from '../../types';\n\nimport { numberToHexColor } from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\nimport { addDocumentToLocalDb } from '../helpers/localDb';\nimport { buildApiPhoto, buildApiThumbnailFromStripped } from './common';\nimport { omitVirtualClassFields } from './helpers';\nimport { buildApiDocument, buildApiWebDocument, buildVideoFromDocument } from './messageContent';\nimport { buildSvgPath } from './pathBytesToSvg';\nimport { buildApiPeerId } from './peers';\nimport { buildStickerFromDocument } from './symbols';\n\nexport function buildApiBotInlineResult(result: GramJs.BotInlineResult, queryId: string): ApiBotInlineResult {\n  const {\n    id, type, title, description, url, thumb,\n  } = result;\n\n  return {\n    id,\n    queryId,\n    type: type as ApiInlineResultType,\n    title,\n    description,\n    url,\n    webThumbnail: buildApiWebDocument(thumb),\n  };\n}\n\nexport function buildApiBotInlineMediaResult(\n  result: GramJs.BotInlineMediaResult, queryId: string,\n): ApiBotInlineMediaResult {\n  const {\n    id, type, title, description, photo, document,\n  } = result;\n\n  return {\n    id,\n    queryId,\n    type: type as ApiInlineResultType,\n    title,\n    description,\n    ...(type === 'sticker' && document instanceof GramJs.Document && { sticker: buildStickerFromDocument(document) }),\n    ...(photo instanceof GramJs.Photo && { photo: buildApiPhoto(photo) }),\n    ...(type === 'gif' && document instanceof GramJs.Document && { gif: buildVideoFromDocument(document) }),\n    ...(type === 'video' && document instanceof GramJs.Document && {\n      thumbnail: buildApiThumbnailFromStripped(document.thumbs),\n    }),\n  };\n}\n\nexport function buildBotSwitchPm(switchPm?: GramJs.InlineBotSwitchPM) {\n  return switchPm ? pick(switchPm, ['text', 'startParam']) as ApiBotInlineSwitchPm : undefined;\n}\n\nexport function buildBotSwitchWebview(switchWebview?: GramJs.InlineBotWebView) {\n  return switchWebview ? pick(switchWebview, ['text', 'url']) as ApiBotInlineSwitchWebview : undefined;\n}\n\nexport function buildApiAttachBot(bot: GramJs.AttachMenuBot): ApiAttachBot {\n  return {\n    id: bot.botId.toString(),\n    shouldRequestWriteAccess: bot.requestWriteAccess,\n    shortName: bot.shortName,\n    isForAttachMenu: bot.showInAttachMenu!,\n    isForSideMenu: bot.showInSideMenu,\n    attachMenuPeerTypes: bot.peerTypes?.map(buildApiAttachMenuPeerType)!,\n    icons: bot.icons.map(buildApiAttachMenuIcon).filter(Boolean),\n    isInactive: bot.inactive,\n    isDisclaimerNeeded: bot.sideMenuDisclaimerNeeded,\n  };\n}\n\nfunction buildApiAttachMenuPeerType(peerType: GramJs.TypeAttachMenuPeerType): ApiAttachMenuPeerType {\n  if (peerType instanceof GramJs.AttachMenuPeerTypeBotPM) return 'bots';\n  if (peerType instanceof GramJs.AttachMenuPeerTypePM) return 'users';\n  if (peerType instanceof GramJs.AttachMenuPeerTypeChat) return 'chats';\n  if (peerType instanceof GramJs.AttachMenuPeerTypeBroadcast) return 'channels';\n  if (peerType instanceof GramJs.AttachMenuPeerTypeSameBotPM) return 'self';\n  return undefined!; // Never reached\n}\n\nfunction buildApiAttachMenuIcon(icon: GramJs.AttachMenuBotIcon): ApiAttachBotIcon | undefined {\n  if (!(icon.icon instanceof GramJs.Document)) return undefined;\n\n  const document = buildApiDocument(icon.icon);\n\n  if (!document) return undefined;\n\n  addDocumentToLocalDb(icon.icon);\n\n  return {\n    name: icon.name,\n    document,\n  };\n}\n\nexport function buildApiBotInfo(botInfo: GramJs.BotInfo, chatId: string): ApiBotInfo {\n  const {\n    description, descriptionPhoto, descriptionDocument, userId, commands, menuButton, privacyPolicyUrl,\n    hasPreviewMedias, appSettings,\n  } = botInfo;\n\n  const botId = userId && buildApiPeerId(userId, 'user');\n  const photo = descriptionPhoto instanceof GramJs.Photo ? buildApiPhoto(descriptionPhoto) : undefined;\n  const gif = descriptionDocument instanceof GramJs.Document ? buildVideoFromDocument(descriptionDocument) : undefined;\n\n  const commandsArray = commands?.map((command) => buildApiBotCommand(botId || chatId, command));\n\n  return {\n    botId: botId || chatId,\n    description,\n    gif,\n    photo,\n    menuButton: buildApiBotMenuButton(menuButton),\n    privacyPolicyUrl,\n    commands: commandsArray?.length ? commandsArray : undefined,\n    hasPreviewMedia: hasPreviewMedias,\n    appSettings: appSettings && buildBotAppSettings(appSettings),\n  };\n}\n\nexport function buildBotAppSettings(settings: GramJs.BotAppSettings): ApiBotAppSettings {\n  const placeholderPath = settings.placeholderPath && buildSvgPath(settings.placeholderPath);\n  return {\n    backgroundColor: settings.backgroundColor ? numberToHexColor(settings.backgroundColor) : undefined,\n    backgroundDarkColor: settings.backgroundDarkColor ? numberToHexColor(settings.backgroundDarkColor) : undefined,\n    headerColor: settings.headerColor ? numberToHexColor(settings.headerColor) : undefined,\n    headerDarkColor: settings.headerDarkColor ? numberToHexColor(settings.headerDarkColor) : undefined,\n    placeholderPath,\n  };\n}\n\nfunction buildApiBotCommand(botId: string, command: GramJs.BotCommand): ApiBotCommand {\n  return {\n    botId,\n    ...omitVirtualClassFields(command),\n  };\n}\n\nexport function buildApiBotMenuButton(menuButton?: GramJs.TypeBotMenuButton): ApiBotMenuButton {\n  if (menuButton instanceof GramJs.BotMenuButton) {\n    return {\n      type: 'webApp',\n      text: menuButton.text,\n      url: menuButton.url,\n    };\n  }\n\n  return {\n    type: 'commands',\n  };\n}\n\nexport function buildApiBotApp(app: GramJs.TypeBotApp): ApiBotApp | undefined {\n  if (app instanceof GramJs.BotAppNotModified) return undefined;\n\n  const {\n    id, accessHash, title, description, shortName, photo, document,\n  } = app;\n\n  const apiPhoto = photo instanceof GramJs.Photo ? buildApiPhoto(photo) : undefined;\n  const apiDocument = document instanceof GramJs.Document ? buildApiDocument(document) : undefined;\n\n  return {\n    id: id.toString(),\n    accessHash: accessHash.toString(),\n    title,\n    description,\n    shortName,\n    photo: apiPhoto,\n    document: apiDocument,\n  };\n}\n\nexport function buildApiMessagesBotApp(botApp: GramJs.messages.BotApp): ApiMessagesBotApp | undefined {\n  const { app, inactive, requestWriteAccess } = botApp;\n  const baseApp = buildApiBotApp(app);\n  if (!baseApp) return undefined;\n\n  return {\n    ...baseApp,\n    isInactive: inactive,\n    shouldRequestWriteAccess: requestWriteAccess,\n  };\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\nimport type { ApiBusinessIntro, ApiBusinessLocation, ApiBusinessWorkHours } from '../../types';\n\nimport { buildGeoPoint } from './messageContent';\nimport { buildStickerFromDocument } from './symbols';\n\nexport function buildApiBusinessLocation(location: GramJs.TypeBusinessLocation): ApiBusinessLocation {\n  const {\n    address, geoPoint,\n  } = location;\n\n  return {\n    address,\n    geo: geoPoint && buildGeoPoint(geoPoint),\n  };\n}\n\nexport function buildApiBusinessWorkHours(workHours: GramJs.TypeBusinessWorkHours): ApiBusinessWorkHours {\n  const {\n    timezoneId, weeklyOpen,\n  } = workHours;\n\n  return {\n    timezoneId,\n    workHours: weeklyOpen.map(({ startMinute, endMinute }) => ({\n      startMinute,\n      endMinute,\n    })),\n  };\n}\n\nexport function buildApiBusinessIntro(intro: GramJs.TypeBusinessIntro): ApiBusinessIntro {\n  const {\n    title, description, sticker,\n  } = intro;\n\n  return {\n    title,\n    description,\n    sticker: sticker && buildStickerFromDocument(sticker),\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiBirthday,\n  ApiPremiumGiftOption,\n  ApiUser,\n  ApiUserFullInfo,\n  ApiUserStatus,\n  ApiUserType,\n} from '../../types';\n\nimport { buildApiBotInfo } from './bots';\nimport { buildApiBusinessIntro, buildApiBusinessLocation, buildApiBusinessWorkHours } from './business';\nimport {\n  buildApiBotVerification, buildApiPhoto, buildApiUsernames, buildAvatarPhotoId,\n} from './common';\nimport { omitVirtualClassFields } from './helpers';\nimport { buildApiEmojiStatus, buildApiPeerColor, buildApiPeerId } from './peers';\n\nexport function buildApiUserFullInfo(mtpUserFull: GramJs.users.UserFull): ApiUserFullInfo {\n  const {\n    fullUser: {\n      about, commonChatsCount, pinnedMsgId, botInfo, blocked,\n      profilePhoto, voiceMessagesForbidden, premiumGifts, hasScheduled,\n      fallbackPhoto, personalPhoto, translationsDisabled, storiesPinnedAvailable,\n      contactRequirePremium, businessWorkHours, businessLocation, businessIntro,\n      birthday, personalChannelId, personalChannelMessage, sponsoredEnabled, stargiftsCount, botVerification,\n      botCanManageEmojiStatus,\n    },\n    users,\n  } = mtpUserFull;\n\n  const userId = buildApiPeerId(users[0].id, 'user');\n\n  return {\n    bio: about,\n    commonChatsCount,\n    pinnedMessageId: pinnedMsgId,\n    isBlocked: Boolean(blocked),\n    noVoiceMessages: voiceMessagesForbidden,\n    hasPinnedStories: Boolean(storiesPinnedAvailable),\n    isTranslationDisabled: translationsDisabled,\n    profilePhoto: profilePhoto instanceof GramJs.Photo ? buildApiPhoto(profilePhoto) : undefined,\n    fallbackPhoto: fallbackPhoto instanceof GramJs.Photo ? buildApiPhoto(fallbackPhoto) : undefined,\n    personalPhoto: personalPhoto instanceof GramJs.Photo ? buildApiPhoto(personalPhoto) : undefined,\n    premiumGifts: premiumGifts?.map((gift) => buildApiPremiumGiftOption(gift)),\n    botInfo: botInfo && buildApiBotInfo(botInfo, userId),\n    isContactRequirePremium: contactRequirePremium,\n    birthday: birthday && buildApiBirthday(birthday),\n    businessLocation: businessLocation && buildApiBusinessLocation(businessLocation),\n    businessWorkHours: businessWorkHours && buildApiBusinessWorkHours(businessWorkHours),\n    businessIntro: businessIntro && buildApiBusinessIntro(businessIntro),\n    personalChannelId: personalChannelId && buildApiPeerId(personalChannelId, 'channel'),\n    personalChannelMessageId: personalChannelMessage,\n    botVerification: botVerification && buildApiBotVerification(botVerification),\n    areAdsEnabled: sponsoredEnabled,\n    starGiftCount: stargiftsCount,\n    isBotCanManageEmojiStatus: botCanManageEmojiStatus,\n    hasScheduledMessages: hasScheduled,\n  };\n}\n\nexport function buildApiUser(mtpUser: GramJs.TypeUser): ApiUser | undefined {\n  if (!(mtpUser instanceof GramJs.User)) {\n    return undefined;\n  }\n\n  const {\n    id, firstName, lastName, fake, scam, support, closeFriend, storiesUnavailable, storiesMaxId,\n    bot, botActiveUsers, botVerificationIcon, botInlinePlaceholder, botAttachMenu, botCanEdit,\n  } = mtpUser;\n  const hasVideoAvatar = mtpUser.photo instanceof GramJs.UserProfilePhoto ? Boolean(mtpUser.photo.hasVideo) : undefined;\n  const avatarPhotoId = mtpUser.photo && buildAvatarPhotoId(mtpUser.photo);\n  const userType = buildApiUserType(mtpUser);\n  const usernames = buildApiUsernames(mtpUser);\n  const emojiStatus = mtpUser.emojiStatus ? buildApiEmojiStatus(mtpUser.emojiStatus) : undefined;\n\n  return {\n    id: buildApiPeerId(id, 'user'),\n    isMin: Boolean(mtpUser.min),\n    fakeType: scam ? 'scam' : (fake ? 'fake' : undefined),\n    ...(mtpUser.self && { isSelf: true }),\n    isPremium: Boolean(mtpUser.premium),\n    ...(mtpUser.verified && { isVerified: true }),\n    ...(closeFriend && { isCloseFriend: true }),\n    ...(support && { isSupport: true }),\n    ...((mtpUser.contact || mtpUser.mutualContact) && { isContact: true }),\n    type: userType,\n    firstName,\n    lastName,\n    hasMainMiniApp: Boolean(mtpUser.botHasMainApp),\n    canEditBot: botCanEdit,\n    ...(userType === 'userTypeBot' && { canBeInvitedToGroup: !mtpUser.botNochats }),\n    ...(usernames && { usernames }),\n    phoneNumber: mtpUser.phone || '',\n    noStatus: !mtpUser.status,\n    ...(mtpUser.accessHash && { accessHash: String(mtpUser.accessHash) }),\n    avatarPhotoId,\n    emojiStatus,\n    hasVideoAvatar,\n    areStoriesHidden: Boolean(mtpUser.storiesHidden),\n    maxStoryId: storiesMaxId,\n    hasStories: Boolean(storiesMaxId) && !storiesUnavailable,\n    ...(bot && botInlinePlaceholder && { botPlaceholder: botInlinePlaceholder }),\n    ...(bot && botAttachMenu && { isAttachBot: botAttachMenu }),\n    botActiveUsers,\n    botVerificationIconId: botVerificationIcon?.toString(),\n    color: mtpUser.color && buildApiPeerColor(mtpUser.color),\n  };\n}\n\nfunction buildApiUserType(user: GramJs.User): ApiUserType {\n  if (user.bot) {\n    return 'userTypeBot';\n  }\n  if (user.deleted) {\n    return 'userTypeDeleted';\n  }\n\n  return 'userTypeRegular';\n}\n\nexport function buildApiUserStatus(mtpStatus?: GramJs.TypeUserStatus): ApiUserStatus {\n  if (!mtpStatus || mtpStatus instanceof GramJs.UserStatusEmpty) {\n    return { type: 'userStatusEmpty' };\n  } else if (mtpStatus instanceof GramJs.UserStatusOnline) {\n    return { type: 'userStatusOnline', expires: mtpStatus.expires };\n  } else if (mtpStatus instanceof GramJs.UserStatusOffline) {\n    return { type: 'userStatusOffline', wasOnline: mtpStatus.wasOnline };\n  } else if (mtpStatus instanceof GramJs.UserStatusRecently) {\n    return { type: 'userStatusRecently', isReadDateRestrictedByMe: mtpStatus.byMe };\n  } else if (mtpStatus instanceof GramJs.UserStatusLastWeek) {\n    return { type: 'userStatusLastWeek', isReadDateRestrictedByMe: mtpStatus.byMe };\n  } else {\n    return { type: 'userStatusLastMonth', isReadDateRestrictedByMe: mtpStatus.byMe };\n  }\n}\n\nexport function buildApiUserStatuses(mtpUsers: GramJs.TypeUser[]) {\n  const userStatusesById: Record<string, ApiUserStatus> = {};\n  mtpUsers.forEach((mtpUser) => {\n    if ('status' in mtpUser) {\n      const userId = buildApiPeerId(mtpUser.id, 'user');\n      userStatusesById[userId] = buildApiUserStatus(mtpUser.status);\n    }\n  });\n\n  return userStatusesById;\n}\n\nexport function buildApiPremiumGiftOption(option: GramJs.TypePremiumGiftOption): ApiPremiumGiftOption {\n  const {\n    months, currency, amount, botUrl,\n  } = option;\n\n  return {\n    months,\n    currency,\n    amount: amount.toJSNumber(),\n    botUrl,\n  };\n}\n\nexport function buildApiBirthday(birthday: GramJs.TypeBirthday): ApiBirthday {\n  return omitVirtualClassFields(birthday);\n}\n","import type BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiBotCommand,\n  ApiChat,\n  ApiChatAdminRights,\n  ApiChatBannedRights,\n  ApiChatFolder,\n  ApiChatInviteImporter,\n  ApiChatInviteInfo,\n  ApiChatlistExportedInvite,\n  ApiChatlistInvite,\n  ApiChatMember,\n  ApiChatReactions,\n  ApiChatSettings,\n  ApiExportedInvite,\n  ApiMissingInvitedUser,\n  ApiRestrictionReason,\n  ApiSendAsPeerId,\n  ApiSponsoredMessageReportResult,\n  ApiStarsSubscriptionPricing,\n  ApiTopic,\n} from '../../types';\n\nimport { pick, pickTruthy } from '../../../util/iteratees';\nimport { getServerTime, getServerTimeOffset } from '../../../util/serverTime';\nimport { addPhotoToLocalDb, addUserToLocalDb } from '../helpers/localDb';\nimport { serializeBytes } from '../helpers/misc';\nimport {\n  buildApiBotVerification, buildApiFormattedText, buildApiPhoto, buildApiUsernames, buildAvatarPhotoId,\n} from './common';\nimport { omitVirtualClassFields } from './helpers';\nimport {\n  buildApiEmojiStatus,\n  buildApiPeerColor,\n  buildApiPeerId,\n  getApiChatIdFromMtpPeer,\n  isPeerChat,\n  isPeerUser,\n} from './peers';\nimport { buildApiReaction } from './reactions';\n\ntype PeerEntityApiChatFields = Omit<ApiChat, (\n  'id' | 'type' | 'title' |\n  'lastReadOutboxMessageId' | 'lastReadInboxMessageId' |\n  'unreadCount' | 'unreadMentionsCount' | 'isMuted'\n)>;\n\nfunction buildApiChatFieldsFromPeerEntity(\n  peerEntity: GramJs.TypeUser | GramJs.TypeChat,\n  isSupport = false,\n): PeerEntityApiChatFields {\n  const isMin = Boolean('min' in peerEntity && peerEntity.min);\n  const accessHash = ('accessHash' in peerEntity) ? String(peerEntity.accessHash) : undefined;\n  const hasVideoAvatar = 'photo' in peerEntity && peerEntity.photo && 'hasVideo' in peerEntity.photo\n    && peerEntity.photo.hasVideo;\n  const avatarPhotoId = ('photo' in peerEntity) && peerEntity.photo ? buildAvatarPhotoId(peerEntity.photo) : undefined;\n  const areSignaturesShown = Boolean('signatures' in peerEntity && peerEntity.signatures);\n  const hasPrivateLink = Boolean('hasLink' in peerEntity && peerEntity.hasLink);\n  const isScam = Boolean('scam' in peerEntity && peerEntity.scam);\n  const isFake = Boolean('fake' in peerEntity && peerEntity.fake);\n  const isJoinToSend = Boolean('joinToSend' in peerEntity && peerEntity.joinToSend);\n  const isJoinRequest = Boolean('joinRequest' in peerEntity && peerEntity.joinRequest);\n  const usernames = buildApiUsernames(peerEntity);\n  const isForum = Boolean('forum' in peerEntity && peerEntity.forum);\n  const areStoriesHidden = Boolean('storiesHidden' in peerEntity && peerEntity.storiesHidden);\n  const maxStoryId = 'storiesMaxId' in peerEntity ? peerEntity.storiesMaxId : undefined;\n  const botVerificationIconId = 'botVerificationIcon' in peerEntity\n    ? peerEntity.botVerificationIcon?.toString() : undefined;\n  const storiesUnavailable = Boolean('storiesUnavailable' in peerEntity && peerEntity.storiesUnavailable);\n  const color = ('color' in peerEntity && peerEntity.color) ? buildApiPeerColor(peerEntity.color) : undefined;\n  const emojiStatus = ('emojiStatus' in peerEntity && peerEntity.emojiStatus)\n    ? buildApiEmojiStatus(peerEntity.emojiStatus) : undefined;\n  const boostLevel = ('level' in peerEntity) ? peerEntity.level : undefined;\n  const areProfilesShown = Boolean('signatureProfiles' in peerEntity && peerEntity.signatureProfiles);\n  const subscriptionUntil = 'subscriptionUntilDate' in peerEntity ? peerEntity.subscriptionUntilDate : undefined;\n\n  return {\n    isMin,\n    hasPrivateLink,\n    areSignaturesShown,\n    areProfilesShown,\n    usernames,\n    accessHash,\n    hasVideoAvatar,\n    avatarPhotoId,\n    ...('verified' in peerEntity && { isVerified: peerEntity.verified }),\n    ...('callActive' in peerEntity && { isCallActive: peerEntity.callActive }),\n    ...('callNotEmpty' in peerEntity && { isCallNotEmpty: peerEntity.callNotEmpty }),\n    ...('date' in peerEntity && { creationDate: peerEntity.date }),\n    ...('participantsCount' in peerEntity && peerEntity.participantsCount !== undefined && {\n      membersCount: peerEntity.participantsCount,\n    }),\n    ...('noforwards' in peerEntity && { isProtected: Boolean(peerEntity.noforwards) }),\n    isSupport: isSupport || undefined,\n    ...buildApiChatPermissions(peerEntity),\n    ...('creator' in peerEntity && { isCreator: peerEntity.creator }),\n    ...buildApiChatRestrictions(peerEntity),\n    ...buildApiChatMigrationInfo(peerEntity),\n    fakeType: isScam ? 'scam' : (isFake ? 'fake' : undefined),\n    color,\n    isJoinToSend,\n    isJoinRequest,\n    isForum,\n    areStoriesHidden,\n    maxStoryId,\n    hasStories: Boolean(maxStoryId) && !storiesUnavailable,\n    emojiStatus,\n    boostLevel,\n    botVerificationIconId,\n    subscriptionUntil,\n  };\n}\n\nexport function buildApiChatFromDialog(\n  dialog: GramJs.Dialog,\n  peerEntity: GramJs.TypeUser | GramJs.TypeChat,\n): ApiChat {\n  const {\n    peer, folderId, unreadMark, unreadCount, unreadMentionsCount, unreadReactionsCount,\n    notifySettings: { silent, muteUntil },\n    readOutboxMaxId, readInboxMaxId, draft, viewForumAsMessages,\n  } = dialog;\n  const isMuted = silent || (typeof muteUntil === 'number' && getServerTime() < muteUntil);\n\n  return {\n    id: getApiChatIdFromMtpPeer(peer),\n    ...(folderId && { folderId }),\n    type: getApiChatTypeFromPeerEntity(peerEntity),\n    title: getApiChatTitleFromMtpPeer(peer, peerEntity),\n    lastReadOutboxMessageId: readOutboxMaxId,\n    lastReadInboxMessageId: readInboxMaxId,\n    unreadCount,\n    unreadMentionsCount,\n    unreadReactionsCount,\n    isMuted,\n    muteUntil,\n    ...(unreadMark && { hasUnreadMark: true }),\n    ...(draft instanceof GramJs.DraftMessage && { draftDate: draft.date }),\n    ...(viewForumAsMessages && { isForumAsMessages: true }),\n    ...buildApiChatFieldsFromPeerEntity(peerEntity),\n  };\n}\n\nexport function buildApiChatFromSavedDialog(\n  dialog: GramJs.SavedDialog,\n  peerEntity: GramJs.TypeUser | GramJs.TypeChat,\n): ApiChat {\n  const { peer } = dialog;\n\n  return {\n    id: getApiChatIdFromMtpPeer(peer),\n    type: getApiChatTypeFromPeerEntity(peerEntity),\n    title: getApiChatTitleFromMtpPeer(peer, peerEntity),\n    ...buildApiChatFieldsFromPeerEntity(peerEntity),\n  };\n}\n\nfunction buildApiChatPermissions(peerEntity: GramJs.TypeUser | GramJs.TypeChat): {\n  adminRights?: ApiChatAdminRights;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n} {\n  if (!(peerEntity instanceof GramJs.Chat || peerEntity instanceof GramJs.Channel)) {\n    return {};\n  }\n\n  return {\n    adminRights: peerEntity.adminRights ? omitVirtualClassFields(peerEntity.adminRights) : undefined,\n    currentUserBannedRights: 'bannedRights' in peerEntity && peerEntity.bannedRights\n      ? omitVirtualClassFields(peerEntity.bannedRights)\n      : undefined,\n    defaultBannedRights: peerEntity.defaultBannedRights\n      ? omitVirtualClassFields(peerEntity.defaultBannedRights)\n      : undefined,\n  };\n}\n\nfunction buildApiChatRestrictions(peerEntity: GramJs.TypeUser | GramJs.TypeChat): {\n  isNotJoined?: boolean;\n  isForbidden?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n} {\n  if (peerEntity instanceof GramJs.ChatForbidden) {\n    return {\n      isForbidden: true,\n    };\n  }\n\n  if (peerEntity instanceof GramJs.ChannelForbidden) {\n    return {\n      isRestricted: true,\n    };\n  }\n\n  const restrictions = {};\n\n  if ('restricted' in peerEntity) {\n    const restrictionReason = peerEntity.restricted\n      ? buildApiChatRestrictionReason(peerEntity.restrictionReason)\n      : undefined;\n\n    if (restrictionReason) {\n      Object.assign(restrictions, {\n        isRestricted: true,\n        restrictionReason,\n      });\n    }\n  }\n\n  if (peerEntity instanceof GramJs.Chat) {\n    Object.assign(restrictions, {\n      isNotJoined: peerEntity.left,\n    });\n  }\n\n  if (peerEntity instanceof GramJs.Channel) {\n    Object.assign(restrictions, {\n      // `left` is weirdly set to `true` on all channels never joined before\n      isNotJoined: peerEntity.left,\n    });\n  }\n\n  return restrictions;\n}\n\nfunction buildApiChatMigrationInfo(peerEntity: GramJs.TypeChat): {\n  migratedTo?: {\n    chatId: string;\n    accessHash?: string;\n  };\n} {\n  if (\n    'migratedTo' in peerEntity\n    && peerEntity.migratedTo\n    && !(peerEntity.migratedTo instanceof GramJs.InputChannelEmpty)\n  ) {\n    return {\n      migratedTo: {\n        chatId: getApiChatIdFromMtpPeer(peerEntity.migratedTo),\n        ...(peerEntity.migratedTo instanceof GramJs.InputChannel && {\n          accessHash: String(peerEntity.migratedTo.accessHash),\n        }),\n      },\n    };\n  }\n\n  return {};\n}\n\nfunction buildApiChatRestrictionReason(\n  restrictionReasons?: GramJs.RestrictionReason[],\n): ApiRestrictionReason | undefined {\n  if (!restrictionReasons) {\n    return undefined;\n  }\n\n  const targetReason = restrictionReasons.find(({ platform }) => platform === 'all');\n  return targetReason ? pick(targetReason, ['reason', 'text']) : undefined;\n}\n\nexport function buildApiChatFromPreview(\n  preview: GramJs.TypeChat | GramJs.TypeUser,\n  isSupport = false,\n): ApiChat | undefined {\n  if (preview instanceof GramJs.ChatEmpty || preview instanceof GramJs.UserEmpty) {\n    return undefined;\n  }\n  const id = buildApiPeerId(\n    preview.id,\n    preview instanceof GramJs.User ? 'user'\n      : (preview instanceof GramJs.Chat || preview instanceof GramJs.ChatForbidden) ? 'chat' : 'channel',\n  );\n\n  return {\n    id,\n    type: getApiChatTypeFromPeerEntity(preview),\n    title: preview instanceof GramJs.User ? getUserName(preview) : preview.title,\n    ...buildApiChatFieldsFromPeerEntity(preview, isSupport),\n  };\n}\n\nexport function getApiChatTypeFromPeerEntity(peerEntity: GramJs.TypeChat | GramJs.TypeUser) {\n  if (peerEntity instanceof GramJs.User || peerEntity instanceof GramJs.UserEmpty) {\n    return 'chatTypePrivate';\n  } else if (\n    peerEntity instanceof GramJs.Chat\n    || peerEntity instanceof GramJs.ChatForbidden\n    || peerEntity instanceof GramJs.ChatEmpty\n  ) {\n    return 'chatTypeBasicGroup';\n  } else {\n    return peerEntity.megagroup ? 'chatTypeSuperGroup' : 'chatTypeChannel';\n  }\n}\n\nexport function getPeerKey(peer: GramJs.TypePeer) {\n  if (isPeerUser(peer)) {\n    return `user${peer.userId}`;\n  } else if (isPeerChat(peer)) {\n    return `chat${peer.chatId}`;\n  } else {\n    return `chat${peer.channelId}`;\n  }\n}\n\nexport function getApiChatTitleFromMtpPeer(peer: GramJs.TypePeer, peerEntity: GramJs.User | GramJs.Chat) {\n  if (isPeerUser(peer)) {\n    return getUserName(peerEntity as GramJs.User);\n  } else {\n    return (peerEntity as GramJs.Chat).title;\n  }\n}\n\nfunction getUserName(user: GramJs.User) {\n  return user.firstName\n    ? `${user.firstName}${user.lastName ? ` ${user.lastName}` : ''}`\n    : (user.lastName || '');\n}\n\nexport function buildChatMember(\n  member: GramJs.TypeChatParticipant | GramJs.TypeChannelParticipant,\n): ApiChatMember | undefined {\n  const userId = (member instanceof GramJs.ChannelParticipantBanned || member instanceof GramJs.ChannelParticipantLeft)\n    ? getApiChatIdFromMtpPeer(member.peer)\n    : buildApiPeerId(member.userId, 'user');\n\n  return {\n    userId,\n    inviterId: 'inviterId' in member && member.inviterId\n      ? buildApiPeerId(member.inviterId as BigInt.BigInteger, 'user')\n      : undefined,\n    joinedDate: 'date' in member ? member.date : undefined,\n    kickedByUserId: 'kickedBy' in member && member.kickedBy ? buildApiPeerId(member.kickedBy, 'user') : undefined,\n    promotedByUserId: 'promotedBy' in member && member.promotedBy\n      ? buildApiPeerId(member.promotedBy, 'user')\n      : undefined,\n    bannedRights: 'bannedRights' in member ? omitVirtualClassFields(member.bannedRights) : undefined,\n    adminRights: 'adminRights' in member ? omitVirtualClassFields(member.adminRights) : undefined,\n    customTitle: 'rank' in member ? member.rank : undefined,\n    isViaRequest: 'viaRequest' in member ? member.viaRequest : undefined,\n    ...((member instanceof GramJs.ChannelParticipantAdmin || member instanceof GramJs.ChatParticipantAdmin) && {\n      isAdmin: true,\n    }),\n    ...((member instanceof GramJs.ChannelParticipantCreator || member instanceof GramJs.ChatParticipantCreator) && {\n      isOwner: true,\n    }),\n  };\n}\n\nexport function buildChatMembers(\n  participants: GramJs.TypeChatParticipants | GramJs.channels.ChannelParticipants,\n) {\n  // Duplicate code because of TS union-type shenanigans\n  if (participants instanceof GramJs.ChatParticipants) {\n    return participants.participants.map(buildChatMember).filter(Boolean);\n  }\n  if (participants instanceof GramJs.channels.ChannelParticipants) {\n    return participants.participants.map(buildChatMember).filter(Boolean);\n  }\n\n  return undefined;\n}\n\nexport function buildChatTypingStatus(\n  update: GramJs.UpdateUserTyping | GramJs.UpdateChatUserTyping | GramJs.UpdateChannelUserTyping,\n) {\n  let action: string = '';\n  let emoticon: string | undefined;\n  if (update.action instanceof GramJs.SendMessageCancelAction) {\n    return undefined;\n  } else if (update.action instanceof GramJs.SendMessageTypingAction) {\n    action = 'lng_user_typing';\n  } else if (update.action instanceof GramJs.SendMessageRecordVideoAction) {\n    action = 'lng_send_action_record_video';\n  } else if (update.action instanceof GramJs.SendMessageUploadVideoAction) {\n    action = 'lng_send_action_upload_video';\n  } else if (update.action instanceof GramJs.SendMessageRecordAudioAction) {\n    action = 'lng_send_action_record_audio';\n  } else if (update.action instanceof GramJs.SendMessageUploadAudioAction) {\n    action = 'lng_send_action_upload_audio';\n  } else if (update.action instanceof GramJs.SendMessageUploadPhotoAction) {\n    action = 'lng_send_action_upload_photo';\n  } else if (update.action instanceof GramJs.SendMessageUploadDocumentAction) {\n    action = 'lng_send_action_upload_file';\n  } else if (update.action instanceof GramJs.SendMessageGeoLocationAction) {\n    action = 'selecting a location to share';\n  } else if (update.action instanceof GramJs.SendMessageChooseContactAction) {\n    action = 'selecting a contact to share';\n  } else if (update.action instanceof GramJs.SendMessageGamePlayAction) {\n    action = 'lng_playing_game';\n  } else if (update.action instanceof GramJs.SendMessageRecordRoundAction) {\n    action = 'lng_send_action_record_round';\n  } else if (update.action instanceof GramJs.SendMessageUploadRoundAction) {\n    action = 'lng_send_action_upload_round';\n  } else if (update.action instanceof GramJs.SendMessageChooseStickerAction) {\n    action = 'lng_send_action_choose_sticker';\n  } else if (update.action instanceof GramJs.SpeakingInGroupCallAction) {\n    return undefined;\n  } else if (update.action instanceof GramJs.SendMessageEmojiInteractionSeen) {\n    action = 'lng_user_action_watching_animations';\n    emoticon = update.action.emoticon;\n  } else if (update.action instanceof GramJs.SendMessageEmojiInteraction) {\n    return undefined;\n  }\n\n  return {\n    action,\n    ...(emoticon && { emoji: emoticon }),\n    ...(!(update instanceof GramJs.UpdateUserTyping) && { userId: getApiChatIdFromMtpPeer(update.fromId) }),\n    timestamp: Date.now() + getServerTimeOffset() * 1000,\n  };\n}\n\nexport function buildApiChatFolder(filter: GramJs.DialogFilter | GramJs.DialogFilterChatlist): ApiChatFolder {\n  if (filter instanceof GramJs.DialogFilterChatlist) {\n    return {\n      ...pickTruthy(filter, [\n        'id', 'emoticon',\n      ]),\n      excludedChatIds: [],\n      includedChatIds: filter.includePeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n      pinnedChatIds: filter.pinnedPeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n      hasMyInvites: filter.hasMyInvites,\n      isChatList: true,\n      noTitleAnimations: filter.titleNoanimate,\n      title: buildApiFormattedText(filter.title),\n    };\n  }\n\n  return {\n    ...pickTruthy(filter, [\n      'id', 'emoticon', 'contacts', 'nonContacts', 'groups', 'bots',\n      'excludeMuted', 'excludeRead', 'excludeArchived',\n    ]),\n    channels: filter.broadcasts,\n    pinnedChatIds: filter.pinnedPeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n    includedChatIds: filter.includePeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n    excludedChatIds: filter.excludePeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n    title: buildApiFormattedText(filter.title),\n    noTitleAnimations: filter.titleNoanimate,\n  };\n}\n\nexport function buildApiChatFolderFromSuggested({\n  filter, description,\n}: {\n  filter: GramJs.TypeDialogFilter;\n  description: string;\n}): ApiChatFolder | undefined {\n  if (!(filter instanceof GramJs.DialogFilter || filter instanceof GramJs.DialogFilterChatlist)) return undefined;\n  return {\n    ...buildApiChatFolder(filter),\n    description,\n  };\n}\n\nexport function buildApiChatBotCommands(botInfos: GramJs.BotInfo[]) {\n  return botInfos.reduce((botCommands, botInfo) => {\n    const botId = buildApiPeerId(botInfo.userId!, 'user');\n\n    if (botInfo.commands) {\n      botCommands = botCommands.concat(botInfo.commands.map((mtpCommand) => ({\n        botId,\n        ...omitVirtualClassFields(mtpCommand),\n      })));\n    }\n\n    return botCommands;\n  }, [] as ApiBotCommand[]);\n}\n\nexport function buildApiExportedInvite(invite: GramJs.ChatInviteExported): ApiExportedInvite {\n  const {\n    revoked,\n    date,\n    expireDate,\n    link,\n    permanent,\n    startDate,\n    usage,\n    usageLimit,\n    requested,\n    requestNeeded,\n    title,\n    adminId,\n  } = invite;\n  return {\n    isRevoked: revoked,\n    date,\n    expireDate,\n    link,\n    isPermanent: permanent,\n    startDate,\n    usage,\n    usageLimit,\n    isRequestNeeded: requestNeeded,\n    requested,\n    title,\n    adminId: buildApiPeerId(adminId, 'user'),\n  };\n}\n\nexport function buildChatInviteImporter(importer: GramJs.ChatInviteImporter): ApiChatInviteImporter {\n  const {\n    userId,\n    date,\n    about,\n    requested,\n    viaChatlist,\n  } = importer;\n  return {\n    userId: buildApiPeerId(userId, 'user'),\n    date,\n    about,\n    isRequested: requested,\n    isFromChatList: viaChatlist,\n  };\n}\n\nexport function buildApiChatSettings({\n  autoarchived,\n  reportSpam,\n  addContact,\n  blockContact,\n}: GramJs.PeerSettings): ApiChatSettings {\n  return {\n    isAutoArchived: Boolean(autoarchived),\n    canReportSpam: Boolean(reportSpam),\n    canAddContact: Boolean(addContact),\n    canBlockContact: Boolean(blockContact),\n  };\n}\n\nexport function buildApiChatReactions(chatReactions?: GramJs.TypeChatReactions): ApiChatReactions | undefined {\n  if (chatReactions instanceof GramJs.ChatReactionsAll) {\n    return {\n      type: 'all',\n      areCustomAllowed: chatReactions.allowCustom,\n    };\n  }\n  if (chatReactions instanceof GramJs.ChatReactionsSome) {\n    return {\n      type: 'some',\n      allowed: chatReactions.reactions.map((r) => buildApiReaction(r)).filter(Boolean),\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiSendAsPeerId(sendAs: GramJs.SendAsPeer): ApiSendAsPeerId {\n  return {\n    id: getApiChatIdFromMtpPeer(sendAs.peer),\n    isPremium: sendAs.premiumRequired,\n  };\n}\n\nexport function buildApiTopic(forumTopic: GramJs.TypeForumTopic): ApiTopic | undefined {\n  if (forumTopic instanceof GramJs.ForumTopicDeleted) {\n    return undefined;\n  }\n\n  const {\n    id,\n    my,\n    closed,\n    pinned,\n    hidden,\n    short,\n    date,\n    title,\n    iconColor,\n    iconEmojiId,\n    topMessage,\n    unreadCount,\n    unreadMentionsCount,\n    unreadReactionsCount,\n    fromId,\n    notifySettings: {\n      silent, muteUntil,\n    },\n  } = forumTopic;\n\n  return {\n    id,\n    isClosed: closed,\n    isPinned: pinned,\n    isHidden: hidden,\n    isOwner: my,\n    isMin: short,\n    date,\n    title,\n    iconColor,\n    iconEmojiId: iconEmojiId?.toString(),\n    lastMessageId: topMessage,\n    unreadCount,\n    unreadMentionsCount,\n    unreadReactionsCount,\n    fromId: getApiChatIdFromMtpPeer(fromId),\n    isMuted: silent || (typeof muteUntil === 'number' ? getServerTime() < muteUntil : undefined),\n    muteUntil,\n  };\n}\n\nexport function buildApiChatlistInvite(\n  invite: GramJs.chatlists.TypeChatlistInvite | undefined, slug: string,\n): ApiChatlistInvite | undefined {\n  if (invite instanceof GramJs.chatlists.ChatlistInvite) {\n    return {\n      slug,\n      title: buildApiFormattedText(invite.title),\n      noTitleAnimations: invite.titleNoanimate,\n      emoticon: invite.emoticon,\n      peerIds: invite.peers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n    };\n  }\n\n  if (invite instanceof GramJs.chatlists.ChatlistInviteAlready) {\n    return {\n      slug,\n      folderId: invite.filterId,\n      missingPeerIds: invite.missingPeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n      alreadyPeerIds: invite.alreadyPeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiChatlistExportedInvite(\n  invite: GramJs.TypeExportedChatlistInvite | undefined,\n): ApiChatlistExportedInvite | undefined {\n  if (!(invite instanceof GramJs.ExportedChatlistInvite)) return undefined;\n\n  const {\n    title,\n    url,\n    peers,\n  } = invite;\n\n  return {\n    title,\n    url,\n    peerIds: peers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n  };\n}\n\nexport function buildApiMissingInvitedUser(\n  user: GramJs.TypeMissingInvitee,\n): ApiMissingInvitedUser {\n  return {\n    id: user.userId.toString(),\n    isRequiringPremiumToMessage: user.premiumRequiredForPm,\n    isRequiringPremiumToInvite: user.premiumWouldAllowInvite,\n  };\n}\n\nexport function buildApiSponsoredMessageReportResult(\n  result: GramJs.channels.TypeSponsoredMessageReportResult,\n): ApiSponsoredMessageReportResult {\n  if (result instanceof GramJs.channels.SponsoredMessageReportResultReported) {\n    return {\n      type: 'reported',\n    };\n  }\n\n  if (result instanceof GramJs.channels.SponsoredMessageReportResultAdsHidden) {\n    return {\n      type: 'hidden',\n    };\n  }\n\n  const title = result.title;\n  const options = result.options.map((option) => ({\n    text: option.text,\n    option: serializeBytes(option.option),\n  }));\n\n  return {\n    type: 'selectOption',\n    title,\n    options,\n  };\n}\n\nexport function buildApiChatInviteInfo(invite: GramJs.ChatInvite): ApiChatInviteInfo {\n  const {\n    color, participants, participantsCount, photo, title, about, scam, fake, verified, megagroup, channel, broadcast,\n    requestNeeded, subscriptionFormId, subscriptionPricing, canRefulfillSubscription, botVerification,\n  } = invite;\n\n  let apiPhoto;\n  if (photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(photo);\n    apiPhoto = buildApiPhoto(photo);\n  }\n\n  participants?.forEach(addUserToLocalDb);\n\n  return {\n    title,\n    about,\n    isFake: fake,\n    isScam: scam,\n    isVerified: verified,\n    isSuperGroup: megagroup,\n    isPublic: invite.public,\n    participantsCount,\n    color,\n    isChannel: channel,\n    isBroadcast: broadcast,\n    isRequestNeeded: requestNeeded,\n    photo: apiPhoto,\n    subscriptionFormId: subscriptionFormId?.toString(),\n    subscriptionPricing: subscriptionPricing && buildApiStarsSubscriptionPricing(subscriptionPricing),\n    canRefulfillSubscription,\n    participantIds: participants?.map((participant) => buildApiPeerId(participant.id, 'user')).filter(Boolean),\n    botVerification: botVerification && buildApiBotVerification(botVerification),\n  };\n}\n\nexport function buildApiStarsSubscriptionPricing(\n  pricing: GramJs.StarsSubscriptionPricing,\n): ApiStarsSubscriptionPricing {\n  return {\n    period: pricing.period,\n    amount: pricing.amount.toJSNumber(),\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChat, ApiPoll, ApiThreadInfo, ApiUser,\n} from '../../types';\n\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { buildPollFromMedia } from '../apiBuilders/messageContent';\nimport { buildApiThreadInfoFromMessage } from '../apiBuilders/messages';\nimport { buildApiUser } from '../apiBuilders/users';\nimport { addChatToLocalDb, addMessageToLocalDb, addUserToLocalDb } from '../helpers/localDb';\nimport { sendImmediateApiUpdate } from './apiUpdateEmitter';\n\nconst TYPE_USER = new Set(['User', 'UserEmpty']);\nconst TYPE_CHAT = new Set(['ChatEmpty', 'Chat', 'ChatForbidden', 'Channel', 'ChannelForbidden']);\nconst TYPE_MESSAGE = new Set(['Message', 'MessageEmpty', 'MessageService']);\n\nexport function processAndUpdateEntities(response?: GramJs.AnyRequest['__response']) {\n  if (!response || typeof response !== 'object') return;\n  if (!('users' in response || 'chats' in response || 'messages' in response)) return;\n\n  let userById: Record<string, ApiUser> | undefined;\n  let chatById: Record<string, ApiChat> | undefined;\n  const threadInfos: ApiThreadInfo[] | undefined = [];\n  const polls: ApiPoll[] | undefined = [];\n\n  if ('users' in response && Array.isArray(response.users) && TYPE_USER.has(response.users[0]?.className)) {\n    const users = response.users.map((user: GramJs.TypeUser) => {\n      if (user instanceof GramJs.User) {\n        addUserToLocalDb(user);\n      }\n      return buildApiUser(user);\n    }).filter(Boolean);\n    userById = buildCollectionByKey(users, 'id');\n  }\n\n  if ('chats' in response && Array.isArray(response.chats) && TYPE_CHAT.has(response.chats[0]?.className)) {\n    const chats = response.chats.map((chat: GramJs.TypeChat) => {\n      if ((chat instanceof GramJs.Chat || chat instanceof GramJs.Channel)) {\n        addChatToLocalDb(chat);\n      }\n      return buildApiChatFromPreview(chat);\n    }).filter(Boolean);\n    chatById = buildCollectionByKey(chats, 'id');\n  }\n\n  if ('messages' in response && Array.isArray(response.messages) && TYPE_MESSAGE.has(response.messages[0]?.className)) {\n    response.messages.forEach((message: GramJs.TypeMessage) => {\n      addMessageToLocalDb(message);\n\n      const threadInfo = buildApiThreadInfoFromMessage(message);\n      if (threadInfo) {\n        threadInfos.push(threadInfo);\n      }\n\n      const poll = 'media' in message && message.media && buildPollFromMedia(message.media);\n      if (poll) {\n        polls.push(poll);\n      }\n    });\n  }\n\n  if (!userById && !chatById && !threadInfos?.length) return;\n\n  sendImmediateApiUpdate({\n    '@type': 'updateEntities',\n    users: userById,\n    chats: chatById,\n    threadInfos: threadInfos?.length ? threadInfos : undefined,\n    polls: polls?.length ? polls : undefined,\n  });\n}\n\nexport function processMessageAndUpdateThreadInfo(message: GramJs.TypeMessage) {\n  addMessageToLocalDb(message);\n  const threadInfo = buildApiThreadInfoFromMessage(message);\n  if (!threadInfo) return;\n  sendImmediateApiUpdate({\n    '@type': 'updateThreadInfo',\n    threadInfo,\n  });\n}\n","export default class SortedQueue<T> {\n  private queue: T[];\n\n  constructor(private comparator: (a: T, b: T) => number) {\n    this.queue = [];\n  }\n\n  add(item: T): void {\n    const index = this.binarySearch(item);\n    this.queue.splice(index, 0, item);\n  }\n\n  pop(): T | undefined {\n    return this.queue.shift();\n  }\n\n  get size(): number {\n    return this.queue.length;\n  }\n\n  clear(): void {\n    this.queue = [];\n  }\n\n  private binarySearch(item: T): number {\n    let left = 0;\n    let right = this.queue.length;\n\n    while (left < right) {\n      const middle = Math.floor((left + right) / 2);\n      const comparison = this.comparator(item, this.queue[middle]);\n\n      if (comparison === 0) {\n        return middle;\n      } else if (comparison > 0) {\n        left = middle + 1;\n      } else {\n        right = middle;\n      }\n    }\n\n    return left;\n  }\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChatLink,\n  ApiCollectibleInfo,\n  ApiConfig,\n  ApiCountry,\n  ApiLanguage,\n  ApiOldLangString,\n  ApiPeerColors,\n  ApiPrivacyKey,\n  ApiSession,\n  ApiTimezone,\n  ApiUrlAuthResult,\n  ApiWallpaper,\n  ApiWebSession,\n  LangPackStringValue,\n} from '../../types';\n\nimport { numberToHexColor } from '../../../util/colors';\nimport {\n  buildCollectionByCallback, omit, omitUndefined, pick,\n} from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\nimport { addUserToLocalDb } from '../helpers/localDb';\nimport { omitVirtualClassFields } from './helpers';\nimport { buildApiDocument, buildMessageTextContent } from './messageContent';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\nimport { buildApiReaction } from './reactions';\nimport { buildApiUser } from './users';\n\nexport function buildApiWallpaper(wallpaper: GramJs.TypeWallPaper): ApiWallpaper | undefined {\n  if (wallpaper instanceof GramJs.WallPaperNoFile) {\n    // TODO: Plain color wallpapers\n    return undefined;\n  }\n\n  const { id, slug } = wallpaper;\n\n  const document = buildApiDocument(wallpaper.document);\n\n  if (!document) {\n    return undefined;\n  }\n\n  const pattern = wallpaper.pattern ?? false;\n  const blur = wallpaper.settings?.blur ?? false;\n  const motion = wallpaper.settings?.motion ?? false;\n  const backgroundColor = wallpaper.settings?.backgroundColor\n    ? numberToHexColor(wallpaper.settings.backgroundColor) : undefined;\n  const secondBackgroundColor = wallpaper.settings?.secondBackgroundColor\n    ? numberToHexColor(wallpaper.settings.secondBackgroundColor) : undefined;\n  const thirdBackgroundColor = wallpaper.settings?.thirdBackgroundColor\n    ? numberToHexColor(wallpaper.settings.thirdBackgroundColor) : undefined;\n  const fourthBackgroundColor = wallpaper.settings?.fourthBackgroundColor\n    ? numberToHexColor(wallpaper.settings.fourthBackgroundColor) : undefined;\n  const intensity = wallpaper.settings?.intensity;\n  const rotation = wallpaper.settings?.rotation;\n  const emoticon = wallpaper.settings?.emoticon;\n\n  return {\n    id: id.toString(),\n    slug,\n    pattern,\n    document,\n    blur,\n    motion,\n    backgroundColor,\n    secondBackgroundColor,\n    thirdBackgroundColor,\n    fourthBackgroundColor,\n    intensity,\n    rotation,\n    emoticon,\n  };\n}\n\nexport function buildApiSession(session: GramJs.Authorization): ApiSession {\n  return {\n    isCurrent: Boolean(session.current),\n    isOfficialApp: Boolean(session.officialApp),\n    isPasswordPending: Boolean(session.passwordPending),\n    hash: String(session.hash),\n    areCallsEnabled: !session.callRequestsDisabled,\n    areSecretChatsEnabled: !session.encryptedRequestsDisabled,\n    isUnconfirmed: session.unconfirmed,\n    ...pick(session, [\n      'deviceModel', 'platform', 'systemVersion', 'appName', 'appVersion', 'dateCreated', 'dateActive',\n      'ip', 'country', 'region',\n    ]),\n  };\n}\n\nexport function buildApiWebSession(session: GramJs.WebAuthorization): ApiWebSession {\n  return {\n    hash: String(session.hash),\n    botId: buildApiPeerId(session.botId, 'user'),\n    ...pick(session, [\n      'platform', 'browser', 'dateCreated', 'dateActive', 'ip', 'region', 'domain',\n    ]),\n  };\n}\n\nexport function buildPrivacyKey(key: GramJs.TypePrivacyKey): ApiPrivacyKey | undefined {\n  switch (key.className) {\n    case 'PrivacyKeyPhoneNumber':\n      return 'phoneNumber';\n    case 'PrivacyKeyAddedByPhone':\n      return 'addByPhone';\n    case 'PrivacyKeyStatusTimestamp':\n      return 'lastSeen';\n    case 'PrivacyKeyProfilePhoto':\n      return 'profilePhoto';\n    case 'PrivacyKeyPhoneCall':\n      return 'phoneCall';\n    case 'PrivacyKeyPhoneP2P':\n      return 'phoneP2P';\n    case 'PrivacyKeyForwards':\n      return 'forwards';\n    case 'PrivacyKeyVoiceMessages':\n      return 'voiceMessages';\n    case 'PrivacyKeyChatInvite':\n      return 'chatInvite';\n    case 'PrivacyKeyAbout':\n      return 'bio';\n    case 'PrivacyKeyBirthday':\n      return 'birthday';\n    case 'PrivacyKeyStarGiftsAutoSave':\n      return 'gifts';\n  }\n\n  return undefined;\n}\n\nexport function buildApiNotifyException(\n  notifySettings: GramJs.TypePeerNotifySettings, peer: GramJs.TypePeer,\n) {\n  const {\n    silent, muteUntil, showPreviews, otherSound,\n  } = notifySettings;\n\n  const hasSound = Boolean(otherSound && !(otherSound instanceof GramJs.NotificationSoundNone));\n\n  return {\n    chatId: getApiChatIdFromMtpPeer(peer),\n    isMuted: silent || (typeof muteUntil === 'number' && getServerTime() < muteUntil),\n    ...(!hasSound && { isSilent: true }),\n    ...(showPreviews !== undefined && { shouldShowPreviews: Boolean(showPreviews) }),\n    muteUntil,\n  };\n}\n\nexport function buildApiNotifyExceptionTopic(\n  notifySettings: GramJs.TypePeerNotifySettings, peer: GramJs.TypePeer, topicId: number,\n) {\n  const {\n    silent, muteUntil, showPreviews, otherSound,\n  } = notifySettings;\n\n  const hasSound = Boolean(otherSound && !(otherSound instanceof GramJs.NotificationSoundNone));\n\n  return {\n    chatId: getApiChatIdFromMtpPeer(peer),\n    topicId,\n    isMuted: silent || (typeof muteUntil === 'number' && getServerTime() < muteUntil),\n    ...(!hasSound && { isSilent: true }),\n    ...(showPreviews !== undefined && { shouldShowPreviews: Boolean(showPreviews) }),\n    muteUntil,\n  };\n}\n\nfunction buildApiCountry(country: GramJs.help.Country, code: GramJs.help.CountryCode) {\n  const {\n    hidden, iso2, defaultName, name,\n  } = country;\n  const { countryCode, prefixes, patterns } = code || {};\n\n  return {\n    isHidden: hidden,\n    iso2,\n    defaultName,\n    name,\n    countryCode,\n    prefixes,\n    patterns,\n  };\n}\n\nexport function buildApiCountryList(countries: GramJs.help.Country[]) {\n  const nonHiddenCountries = countries.filter(({ hidden }) => !hidden);\n  const listByCode = nonHiddenCountries\n    .map((country) => (\n      country.countryCodes.map((code) => buildApiCountry(country, code))\n    ))\n    .flat()\n    .sort((a: ApiCountry, b: ApiCountry) => (\n      a.name ? a.name.localeCompare(b.name!) : a.defaultName.localeCompare(b.defaultName)\n    ));\n\n  const generalList = nonHiddenCountries\n    .map((country) => buildApiCountry(country, country.countryCodes[0]))\n    .sort((a, b) => (\n      a.name ? a.name.localeCompare(b.name!) : a.defaultName.localeCompare(b.defaultName)\n    ));\n\n  return {\n    phoneCodes: listByCode,\n    general: generalList,\n  };\n}\n\nexport function buildJson(json: GramJs.TypeJSONValue): any {\n  if (json instanceof GramJs.JsonNull) return undefined;\n  if (json instanceof GramJs.JsonString\n    || json instanceof GramJs.JsonBool\n    || json instanceof GramJs.JsonNumber) return json.value;\n  if (json instanceof GramJs.JsonArray) return json.value.map(buildJson);\n\n  return json.value.reduce((acc: Record<string, any>, el) => {\n    acc[el.key] = buildJson(el.value);\n    return acc;\n  }, {});\n}\n\nexport function buildApiUrlAuthResult(result: GramJs.TypeUrlAuthResult): ApiUrlAuthResult | undefined {\n  if (result instanceof GramJs.UrlAuthResultRequest) {\n    const { bot, domain, requestWriteAccess } = result;\n    const user = buildApiUser(bot);\n    if (!user) return undefined;\n\n    addUserToLocalDb(bot);\n\n    return {\n      type: 'request',\n      domain,\n      shouldRequestWriteAccess: requestWriteAccess,\n      bot: user,\n    };\n  }\n\n  if (result instanceof GramJs.UrlAuthResultAccepted) {\n    return {\n      type: 'accepted',\n      url: result.url,\n    };\n  }\n\n  if (result instanceof GramJs.UrlAuthResultDefault) {\n    return {\n      type: 'default',\n    };\n  }\n  return undefined;\n}\n\nexport function buildApiConfig(config: GramJs.Config): ApiConfig {\n  const {\n    testMode, expires, gifSearchUsername, chatSizeMax, autologinToken, reactionsDefault,\n    messageLengthMax, editTimeLimit, forwardedCountMax,\n  } = config;\n  const defaultReaction = reactionsDefault && buildApiReaction(reactionsDefault);\n  return {\n    isTestServer: testMode,\n    expiresAt: expires,\n    gifSearchUsername,\n    defaultReaction,\n    maxGroupSize: chatSizeMax,\n    autologinToken,\n    maxMessageLength: messageLengthMax,\n    editTimeLimit,\n    maxForwardedCount: forwardedCountMax,\n  };\n}\n\nexport function oldBuildLangPack(mtpLangPack: GramJs.LangPackDifference) {\n  return mtpLangPack.strings.reduce<Record<string, ApiOldLangString | undefined>>((acc, mtpString) => {\n    acc[mtpString.key] = oldBuildLangPackString(mtpString);\n    return acc;\n  }, {});\n}\n\nexport function oldBuildLangPackString(mtpString: GramJs.TypeLangPackString) {\n  return mtpString instanceof GramJs.LangPackString\n    ? mtpString.value\n    : mtpString instanceof GramJs.LangPackStringPluralized\n      ? omit(omitVirtualClassFields(mtpString), ['key'])\n      : undefined;\n}\n\nexport function buildLangStrings(strings: GramJs.TypeLangPackString[]) {\n  const keysToRemove: string[] = [];\n  const apiStrings = strings.reduce<Record<string, LangPackStringValue>>((acc, mtpString) => {\n    if (mtpString instanceof GramJs.LangPackStringDeleted) {\n      keysToRemove.push(mtpString.key);\n    }\n\n    if (mtpString instanceof GramJs.LangPackString) {\n      acc[mtpString.key] = mtpString.value;\n    }\n\n    if (mtpString instanceof GramJs.LangPackStringPluralized) {\n      acc[mtpString.key] = omitUndefined({\n        zero: mtpString.zeroValue,\n        one: mtpString.oneValue,\n        two: mtpString.twoValue,\n        few: mtpString.fewValue,\n        many: mtpString.manyValue,\n        other: mtpString.otherValue,\n      });\n    }\n\n    return acc;\n  }, {});\n\n  return {\n    keysToRemove,\n    strings: apiStrings,\n  };\n}\n\nexport function buildApiLanguage(lang: GramJs.TypeLangPackLanguage): ApiLanguage {\n  const {\n    name, nativeName, langCode, pluralCode, rtl, stringsCount, translatedCount, translationsUrl, beta, official,\n  } = lang;\n  return {\n    name,\n    nativeName,\n    langCode,\n    pluralCode,\n    isRtl: rtl,\n    isBeta: beta,\n    isOfficial: official,\n    stringsCount,\n    translatedCount,\n    translationsUrl,\n  };\n}\n\nfunction buildApiPeerColorSet(colorSet: GramJs.help.TypePeerColorSet) {\n  if (colorSet instanceof GramJs.help.PeerColorSet) {\n    return colorSet.colors.map((color) => numberToHexColor(color));\n  }\n  return undefined;\n}\n\nexport function buildApiPeerColors(wrapper: GramJs.help.TypePeerColors): ApiPeerColors['general'] | undefined {\n  if (!(wrapper instanceof GramJs.help.PeerColors)) return undefined;\n\n  return buildCollectionByCallback(wrapper.colors, (color) => {\n    return [color.colorId, {\n      isHidden: color.hidden,\n      colors: color.colors && buildApiPeerColorSet(color.colors),\n      darkColors: color.darkColors && buildApiPeerColorSet(color.darkColors),\n    }];\n  });\n}\n\nexport function buildApiTimezone(timezone: GramJs.TypeTimezone): ApiTimezone {\n  const { id, name, utcOffset } = timezone;\n  return {\n    id,\n    name,\n    utcOffset,\n  };\n}\n\nexport function buildApiChatLink(data: GramJs.account.ResolvedBusinessChatLinks): ApiChatLink {\n  const chatId = getApiChatIdFromMtpPeer(data.peer);\n  return {\n    chatId,\n    text: buildMessageTextContent(data.message, data.entities),\n  };\n}\n\nexport function buildApiCollectibleInfo(info: GramJs.fragment.TypeCollectibleInfo): ApiCollectibleInfo {\n  const {\n    amount,\n    currency,\n    cryptoAmount,\n    cryptoCurrency,\n    purchaseDate,\n    url,\n  } = info;\n\n  return {\n    amount: amount.toJSNumber(),\n    currency,\n    cryptoAmount: cryptoAmount.toJSNumber(),\n    cryptoCurrency,\n    purchaseDate,\n    url,\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChannelMonetizationStatistics,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n  ApiStoryPublicForward,\n  ChannelMonetizationBalances,\n  StatisticsGraph,\n  StatisticsMessageInteractionCounter,\n  StatisticsOverviewItem,\n  StatisticsOverviewPercentage,\n  StatisticsOverviewPeriod,\n  StatisticsStoryInteractionCounter,\n} from '../../types';\n\nimport { buildApiUsernames, buildAvatarPhotoId } from './common';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\n\nconst DECIMALS = 10 ** 9;\n\nexport function buildChannelStatistics(stats: GramJs.stats.BroadcastStats): ApiChannelStatistics {\n  return {\n    // Graphs\n    growthGraph: buildGraph(stats.growthGraph),\n    followersGraph: buildGraph(stats.followersGraph),\n    muteGraph: buildGraph(stats.muteGraph),\n    topHoursGraph: buildGraph(stats.topHoursGraph),\n\n    // Async graphs\n    languagesGraph: (stats.languagesGraph as GramJs.StatsGraphAsync).token,\n    viewsBySourceGraph: (stats.viewsBySourceGraph as GramJs.StatsGraphAsync).token,\n    newFollowersBySourceGraph: (stats.newFollowersBySourceGraph as GramJs.StatsGraphAsync).token,\n    interactionsGraph: (stats.interactionsGraph as GramJs.StatsGraphAsync).token,\n    reactionsByEmotionGraph: (stats.reactionsByEmotionGraph as GramJs.StatsGraphAsync).token,\n    storyInteractionsGraph: (stats.storyInteractionsGraph as GramJs.StatsGraphAsync).token,\n    storyReactionsByEmotionGraph: (stats.storyReactionsByEmotionGraph as GramJs.StatsGraphAsync).token,\n\n    // Statistics overview\n    followers: buildStatisticsOverview(stats.followers),\n    viewsPerPost: buildStatisticsOverview(stats.viewsPerPost),\n    sharesPerPost: buildStatisticsOverview(stats.sharesPerPost),\n    enabledNotifications: buildStatisticsPercentage(stats.enabledNotifications),\n    reactionsPerPost: buildStatisticsOverview(stats.reactionsPerPost),\n    viewsPerStory: buildStatisticsOverview(stats.viewsPerStory),\n    sharesPerStory: buildStatisticsOverview(stats.sharesPerStory),\n    reactionsPerStory: buildStatisticsOverview(stats.reactionsPerStory),\n\n    // Recent posts\n    recentPosts: stats.recentPostsInteractions.map(buildApiPostInteractionCounter).filter(Boolean),\n  };\n}\n\nexport function buildChannelMonetizationStatistics(\n  stats: GramJs.stats.BroadcastRevenueStats,\n): ApiChannelMonetizationStatistics {\n  return {\n    // Graphs\n    topHoursGraph: buildGraph(stats.topHoursGraph),\n    revenueGraph: buildGraph(stats.revenueGraph, undefined, true, stats.usdRate),\n\n    // Statistics overview\n    balances: buildChannelMonetizationBalances(stats.balances),\n    usdRate: stats.usdRate,\n  };\n}\n\nexport function buildApiPostInteractionCounter(\n  interaction: GramJs.TypePostInteractionCounters,\n): StatisticsMessageInteractionCounter | StatisticsStoryInteractionCounter | undefined {\n  if (interaction instanceof GramJs.PostInteractionCountersMessage) {\n    return {\n      msgId: interaction.msgId,\n      forwardsCount: interaction.forwards,\n      viewsCount: interaction.views,\n      reactionsCount: interaction.reactions,\n    };\n  }\n\n  if (interaction instanceof GramJs.PostInteractionCountersStory) {\n    return {\n      storyId: interaction.storyId,\n      reactionsCount: interaction.reactions,\n      viewsCount: interaction.views,\n      forwardsCount: interaction.forwards,\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildGroupStatistics(stats: GramJs.stats.MegagroupStats): ApiGroupStatistics {\n  return {\n    // Graphs\n    growthGraph: buildGraph(stats.growthGraph),\n    membersGraph: buildGraph(stats.membersGraph),\n    topHoursGraph: buildGraph(stats.topHoursGraph),\n\n    // Async graphs\n    languagesGraph: (stats.languagesGraph as GramJs.StatsGraphAsync).token,\n    messagesGraph: (stats.messagesGraph as GramJs.StatsGraphAsync).token,\n    actionsGraph: (stats.actionsGraph as GramJs.StatsGraphAsync).token,\n\n    // Statistics overview\n    period: getOverviewPeriod(stats.period),\n    members: buildStatisticsOverview(stats.members),\n    viewers: buildStatisticsOverview(stats.viewers),\n    messages: buildStatisticsOverview(stats.messages),\n    posters: buildStatisticsOverview(stats.posters),\n  };\n}\n\nexport function buildPostsStatistics(stats: GramJs.stats.MessageStats): ApiPostStatistics {\n  return {\n    viewsGraph: buildGraph(stats.viewsGraph),\n    reactionsGraph: buildGraph(stats.reactionsByEmotionGraph),\n  };\n}\n\nexport function buildMessagePublicForwards(\n  result: GramJs.messages.TypeMessages,\n): ApiMessagePublicForward[] | undefined {\n  if (!result || !('messages' in result)) {\n    return undefined;\n  }\n\n  return result.messages.map((message) => buildApiMessagePublicForward(message, result.chats));\n}\n\nexport function buildStoryPublicForwards(\n  result: GramJs.stats.PublicForwards,\n): Array<ApiStoryPublicForward | ApiMessagePublicForward> | undefined {\n  if (!result || !('forwards' in result)) {\n    return undefined;\n  }\n\n  return result.forwards.map((forward) => {\n    if (forward instanceof GramJs.PublicForwardMessage) {\n      return buildApiMessagePublicForward(forward.message, result.chats);\n    }\n\n    const { peer, story } = forward;\n    const peerId = getApiChatIdFromMtpPeer(peer);\n\n    return {\n      peerId,\n      storyId: story.id,\n      viewsCount: (story as GramJs.StoryItem).views?.viewsCount || 0,\n      reactionsCount: (story as GramJs.StoryItem).views?.reactionsCount || 0,\n    } as ApiStoryPublicForward;\n  });\n}\n\nexport function buildGraph(\n  result: GramJs.TypeStatsGraph, isPercentage?: boolean, isCurrency?: boolean, currencyRate?: number,\n): StatisticsGraph | undefined {\n  if ((result as GramJs.StatsGraphError).error) {\n    return undefined;\n  }\n\n  const data = JSON.parse((result as GramJs.StatsGraph).json.data);\n  const [x, ...y] = data.columns;\n  const hasSecondYAxis = data.y_scaled;\n\n  return {\n    type: isPercentage ? 'area' : data.types.y0,\n    zoomToken: (result as GramJs.StatsGraph).zoomToken,\n    labelFormatter: data.xTickFormatter,\n    tooltipFormatter: data.xTooltipFormatter,\n    labels: x.slice(1),\n    hideCaption: !data.subchart.show,\n    hasSecondYAxis,\n    isStacked: data.stacked && !hasSecondYAxis,\n    isPercentage,\n    isCurrency,\n    currencyRate,\n    datasets: y.map((item: any) => {\n      const key = item[0];\n\n      return {\n        name: data.names[key],\n        color: extractColor(data.colors[key]),\n        values: item.slice(1),\n      };\n    }),\n    ...calculateMinimapRange(data.subchart.defaultZoom, x.slice(1)),\n  };\n}\n\nfunction extractColor(color: string): string {\n  return color.substring(color.indexOf('#'));\n}\n\nfunction calculateMinimapRange(range: Array<number>, values: Array<number>) {\n  const [min, max] = range;\n\n  let minIndex = 0;\n  let maxIndex = values.length - 1;\n\n  values.forEach((item, index) => {\n    if (!minIndex && item >= min) {\n      minIndex = index;\n    }\n\n    if (!maxIndex && item >= max) {\n      maxIndex = index;\n    }\n  });\n\n  const begin = Math.max(0, minIndex / (values.length - 1));\n  const end = Math.min(1, maxIndex / (values.length - 1));\n\n  return { minimapRange: { begin, end }, labelFromIndex: minIndex, labelToIndex: maxIndex };\n}\n\nfunction buildStatisticsOverview({ current, previous }: GramJs.StatsAbsValueAndPrev): StatisticsOverviewItem {\n  const change = current - previous;\n\n  return {\n    current,\n    change,\n    percentage: (change ? ((Math.abs(change) / previous) * 100) : 0).toFixed(2),\n  };\n}\n\nexport function buildStatisticsPercentage(data: GramJs.StatsPercentValue): StatisticsOverviewPercentage {\n  return {\n    part: data.part,\n    total: data.total,\n    percentage: ((data.part / data.total) * 100).toFixed(2),\n  };\n}\n\nfunction getOverviewPeriod(data: GramJs.StatsDateRangeDays): StatisticsOverviewPeriod {\n  return {\n    maxDate: data.maxDate,\n    minDate: data.minDate,\n  };\n}\n\nfunction buildApiMessagePublicForward(message: GramJs.TypeMessage, chats: GramJs.TypeChat[]): ApiMessagePublicForward {\n  const peerId = getApiChatIdFromMtpPeer(message.peerId!);\n  const channel = chats.find((c) => buildApiPeerId(c.id, 'channel') === peerId);\n  const channelProfilePhoto = channel && 'photo' in channel && channel.photo instanceof GramJs.Photo\n    ? channel.photo : undefined;\n\n  return {\n    messageId: message.id,\n    views: (message as GramJs.Message).views,\n    title: (channel as GramJs.Channel).title,\n    chat: {\n      id: peerId,\n      type: 'chatTypeChannel',\n      title: (channel as GramJs.Channel).title,\n      usernames: buildApiUsernames(channel as GramJs.Channel),\n      avatarPhotoId: channelProfilePhoto && buildAvatarPhotoId(channelProfilePhoto),\n      hasVideoAvatar: Boolean(channelProfilePhoto?.videoSizes),\n    },\n  };\n}\n\nfunction buildChannelMonetizationBalances({\n  currentBalance,\n  availableBalance,\n  overallRevenue,\n  withdrawalEnabled,\n}: GramJs.BroadcastRevenueBalances): ChannelMonetizationBalances {\n  return {\n    currentBalance: Number(currentBalance) / DECIMALS,\n    availableBalance: Number(availableBalance) / DECIMALS,\n    overallRevenue: Number(overallRevenue) / DECIMALS,\n    isWithdrawalEnabled: withdrawalEnabled,\n  };\n}\n","import bigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiBoost,\n  ApiBoostsStatus,\n  ApiCheckedGiftCode,\n  ApiGiveawayInfo,\n  ApiInvoice,\n  ApiLabeledPrice,\n  ApiMyBoost,\n  ApiPaymentCredentials,\n  ApiPaymentForm,\n  ApiPaymentSavedInfo,\n  ApiPremiumGiftCodeOption,\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n  ApiPrepaidGiveaway,\n  ApiPrepaidStarsGiveaway,\n  ApiReceipt,\n  ApiStarGiveawayOption,\n  ApiStarsAmount,\n  ApiStarsGiveawayWinnerOption,\n  ApiStarsSubscription,\n  ApiStarsTransaction,\n  ApiStarsTransactionPeer,\n  ApiStarTopupOption,\n  BoughtPaidMedia,\n} from '../../types';\n\nimport { addWebDocumentToLocalDb } from '../helpers/localDb';\nimport { buildApiStarsSubscriptionPricing } from './chats';\nimport { buildApiMessageEntity } from './common';\nimport { buildApiStarGift } from './gifts';\nimport { omitVirtualClassFields } from './helpers';\nimport { buildApiDocument, buildApiWebDocument, buildMessageMediaContent } from './messageContent';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\nimport { buildStatisticsPercentage } from './statistics';\n\nexport function buildShippingOptions(shippingOptions: GramJs.ShippingOption[] | undefined) {\n  if (!shippingOptions) {\n    return undefined;\n  }\n\n  return Object.values(shippingOptions).map((option) => {\n    return {\n      id: option.id,\n      title: option.title,\n      amount: option.prices.reduce((ac, cur) => ac + cur.amount.toJSNumber(), 0),\n      prices: option.prices.map(({ label, amount }) => {\n        return {\n          label,\n          amount: amount.toJSNumber(),\n        };\n      }),\n    };\n  });\n}\n\nexport function buildApiReceipt(receipt: GramJs.payments.TypePaymentReceipt): ApiReceipt {\n  const { photo } = receipt;\n\n  if (photo) {\n    addWebDocumentToLocalDb(photo);\n  }\n\n  if (receipt instanceof GramJs.payments.PaymentReceiptStars) {\n    const {\n      botId, currency, date, description, title, totalAmount, transactionId, invoice,\n    } = receipt;\n\n    return {\n      type: 'stars',\n      currency,\n      date,\n      botId: buildApiPeerId(botId, 'user'),\n      description,\n      title,\n      totalAmount: -totalAmount.toJSNumber(),\n      transactionId,\n      photo: buildApiWebDocument(photo),\n      invoice: buildApiInvoice(invoice),\n    };\n  }\n\n  const {\n    invoice,\n    info,\n    shipping,\n    totalAmount,\n    credentialsTitle,\n    tipAmount,\n    title,\n    description,\n    botId,\n    currency,\n    date,\n    providerId,\n  } = receipt;\n\n  const { shippingAddress, phone, name } = (info || {});\n\n  let shippingPrices: ApiLabeledPrice[] | undefined;\n  let shippingMethod: string | undefined;\n\n  if (shipping) {\n    shippingPrices = shipping.prices.map(({ label, amount }) => {\n      return {\n        label,\n        amount: amount.toJSNumber(),\n      };\n    });\n    shippingMethod = shipping.title;\n  }\n\n  return {\n    type: 'regular',\n    info: { shippingAddress, phone, name },\n    totalAmount: totalAmount.toJSNumber(),\n    currency,\n    date,\n    credentialsTitle,\n    shippingPrices,\n    shippingMethod,\n    tipAmount: tipAmount ? tipAmount.toJSNumber() : 0,\n    title,\n    description,\n    botId: buildApiPeerId(botId, 'user'),\n    providerId: providerId.toString(),\n    photo: photo && buildApiWebDocument(photo),\n    invoice: buildApiInvoice(invoice),\n  };\n}\n\nexport function buildApiPaymentForm(form: GramJs.payments.TypePaymentForm): ApiPaymentForm {\n  if (form instanceof GramJs.payments.PaymentFormStarGift) {\n    const { formId } = form;\n    return {\n      type: 'stargift',\n      formId: String(formId),\n      invoice: buildApiInvoice(form.invoice),\n    };\n  }\n\n  if (form instanceof GramJs.payments.PaymentFormStars) {\n    const {\n      botId, formId, title, description, photo,\n    } = form;\n\n    if (photo) {\n      addWebDocumentToLocalDb(photo);\n    }\n\n    return {\n      type: 'stars',\n      botId: buildApiPeerId(botId, 'user'),\n      formId: String(formId),\n      title,\n      description,\n      photo: buildApiWebDocument(photo),\n      invoice: buildApiInvoice(form.invoice),\n    };\n  }\n\n  const {\n    formId,\n    canSaveCredentials,\n    passwordMissing: isPasswordMissing,\n    providerId,\n    nativeProvider,\n    nativeParams,\n    savedInfo,\n    invoice,\n    savedCredentials,\n    url,\n    botId,\n    description,\n    title,\n    photo,\n  } = form;\n\n  if (photo) {\n    addWebDocumentToLocalDb(photo);\n  }\n  const { shippingAddress } = savedInfo || {};\n  const cleanedInfo: ApiPaymentSavedInfo | undefined = savedInfo ? omitVirtualClassFields(savedInfo) : undefined;\n  if (cleanedInfo && shippingAddress) {\n    cleanedInfo.shippingAddress = omitVirtualClassFields(shippingAddress);\n  }\n\n  const nativeData = nativeParams ? JSON.parse(nativeParams.data) : {};\n\n  return {\n    type: 'regular',\n    title,\n    description,\n    photo: buildApiWebDocument(photo),\n    url,\n    botId: buildApiPeerId(botId, 'user'),\n    canSaveCredentials,\n    isPasswordMissing,\n    formId: String(formId),\n    providerId: String(providerId),\n    nativeProvider,\n    savedInfo: cleanedInfo,\n    invoice: buildApiInvoice(invoice),\n    nativeParams: {\n      needCardholderName: Boolean(nativeData?.need_cardholder_name),\n      needCountry: Boolean(nativeData?.need_country),\n      needZip: Boolean(nativeData?.need_zip),\n      publishableKey: nativeData?.publishable_key,\n      publicToken: nativeData?.public_token,\n      tokenizeUrl: nativeData?.tokenize_url,\n    },\n    savedCredentials: savedCredentials && buildApiPaymentCredentials(savedCredentials),\n  };\n}\n\nexport function buildApiInvoice(invoice: GramJs.Invoice): ApiInvoice {\n  const {\n    test,\n    currency,\n    prices,\n    recurring,\n    termsUrl,\n    maxTipAmount,\n    suggestedTipAmounts,\n    emailRequested,\n    emailToProvider,\n    nameRequested,\n    phoneRequested,\n    phoneToProvider,\n    shippingAddressRequested,\n    flexible,\n    subscriptionPeriod,\n  } = invoice;\n\n  const mappedPrices: ApiLabeledPrice[] = prices.map(({ label, amount }) => ({\n    label,\n    amount: amount.toJSNumber(),\n  }));\n\n  const totalAmount = prices.reduce((acc, cur) => acc.add(cur.amount), bigInt(0)).toJSNumber();\n\n  return {\n    totalAmount,\n    currency,\n    isTest: test,\n    isRecurring: recurring,\n    termsUrl,\n    prices: mappedPrices,\n    maxTipAmount: maxTipAmount?.toJSNumber(),\n    suggestedTipAmounts: suggestedTipAmounts?.map((tip) => tip.toJSNumber()),\n    isEmailRequested: emailRequested,\n    isEmailSentToProvider: emailToProvider,\n    isNameRequested: nameRequested,\n    isPhoneRequested: phoneRequested,\n    isPhoneSentToProvider: phoneToProvider,\n    isShippingAddressRequested: shippingAddressRequested,\n    isFlexible: flexible,\n    subscriptionPeriod,\n  };\n}\n\nexport function buildApiPremiumPromo(promo: GramJs.help.PremiumPromo): ApiPremiumPromo {\n  const {\n    statusText, statusEntities, videos, videoSections, periodOptions,\n  } = promo;\n\n  return {\n    statusText,\n    statusEntities: statusEntities.map(buildApiMessageEntity),\n    videoSections: videoSections as ApiPremiumSection[],\n    videos: videos.map(buildApiDocument).filter(Boolean),\n    options: periodOptions.map(buildApiPremiumSubscriptionOption),\n  };\n}\n\nfunction buildApiPremiumSubscriptionOption(option: GramJs.PremiumSubscriptionOption): ApiPremiumSubscriptionOption {\n  const {\n    current, canPurchaseUpgrade, currency, amount, botUrl, months,\n  } = option;\n\n  return {\n    isCurrent: current,\n    canPurchaseUpgrade,\n    currency,\n    amount: amount.toJSNumber(),\n    botUrl,\n    months,\n  };\n}\n\nexport function buildApiPaymentCredentials(credentials: GramJs.PaymentSavedCredentialsCard[]): ApiPaymentCredentials[] {\n  return credentials.map(({ id, title }) => ({ id, title }));\n}\n\nexport function buildPrepaidGiveaway(\n  interaction: GramJs.TypePrepaidGiveaway,\n): ApiPrepaidGiveaway | ApiPrepaidStarsGiveaway {\n  if (interaction instanceof GramJs.PrepaidGiveaway) {\n    return {\n      type: 'giveaway',\n      id: interaction.id.toString(),\n      date: interaction.date,\n      months: interaction.months,\n      quantity: interaction.quantity,\n    };\n  }\n\n  return {\n    type: 'starsGiveaway',\n    id: interaction.id.toString(),\n    stars: interaction.stars.toJSNumber(),\n    quantity: interaction.quantity,\n    boosts: interaction.boosts,\n    date: interaction.date,\n  };\n}\n\nexport function buildApiBoostsStatus(boostStatus: GramJs.premium.BoostsStatus): ApiBoostsStatus {\n  const {\n    level, boostUrl, boosts,\n    giftBoosts, myBoost, currentLevelBoosts, nextLevelBoosts,\n    premiumAudience, prepaidGiveaways,\n  } = boostStatus;\n\n  return {\n    level,\n    currentLevelBoosts,\n    boosts,\n    hasMyBoost: Boolean(myBoost),\n    boostUrl,\n    giftBoosts,\n    nextLevelBoosts,\n    ...(premiumAudience && { premiumSubscribers: buildStatisticsPercentage(premiumAudience) }),\n    ...(prepaidGiveaways && { prepaidGiveaways: prepaidGiveaways.map((m) => buildPrepaidGiveaway(m)) }),\n  };\n}\n\nexport function buildApiBoost(boost: GramJs.Boost): ApiBoost {\n  const {\n    userId,\n    multiplier,\n    expires,\n    giveaway,\n    gift,\n    stars,\n  } = boost;\n\n  return {\n    userId: userId && buildApiPeerId(userId, 'user'),\n    multiplier,\n    expires,\n    isFromGiveaway: giveaway,\n    isGift: gift,\n    stars: stars?.toJSNumber(),\n  };\n}\n\nexport function buildApiMyBoost(myBoost: GramJs.MyBoost): ApiMyBoost {\n  const {\n    date, expires, slot, cooldownUntilDate, peer,\n  } = myBoost;\n\n  return {\n    date,\n    expires,\n    slot,\n    cooldownUntil: cooldownUntilDate,\n    chatId: peer && getApiChatIdFromMtpPeer(peer),\n  };\n}\n\nexport function buildApiGiveawayInfo(info: GramJs.payments.TypeGiveawayInfo): ApiGiveawayInfo | undefined {\n  if (info instanceof GramJs.payments.GiveawayInfo) {\n    const {\n      startDate,\n      adminDisallowedChatId,\n      disallowedCountry,\n      joinedTooEarlyDate,\n      participating,\n      preparingResults,\n    } = info;\n\n    return {\n      type: 'active',\n      startDate,\n      isParticipating: participating,\n      adminDisallowedChatId: adminDisallowedChatId && buildApiPeerId(adminDisallowedChatId, 'channel'),\n      disallowedCountry,\n      joinedTooEarlyDate,\n      isPreparingResults: preparingResults,\n    };\n  } else {\n    const {\n      activatedCount,\n      finishDate,\n      giftCodeSlug,\n      winner,\n      refunded,\n      startDate,\n      winnersCount,\n      starsPrize,\n    } = info;\n\n    return {\n      type: 'results',\n      startDate,\n      activatedCount,\n      finishDate,\n      winnersCount,\n      giftCodeSlug,\n      isRefunded: refunded,\n      isWinner: winner,\n      starsPrize: starsPrize?.toJSNumber(),\n    };\n  }\n}\n\nexport function buildApiCheckedGiftCode(giftcode: GramJs.payments.TypeCheckedGiftCode): ApiCheckedGiftCode {\n  const {\n    date, fromId, months, giveawayMsgId, toId, usedDate, viaGiveaway,\n  } = giftcode;\n\n  return {\n    date,\n    months,\n    toId: toId && buildApiPeerId(toId, 'user'),\n    fromId: fromId && getApiChatIdFromMtpPeer(fromId),\n    usedAt: usedDate,\n    isFromGiveaway: viaGiveaway,\n    giveawayMessageId: giveawayMsgId,\n  };\n}\n\nexport function buildApiPremiumGiftCodeOption(option: GramJs.PremiumGiftCodeOption): ApiPremiumGiftCodeOption {\n  const {\n    amount, currency, months, users,\n  } = option;\n\n  return {\n    amount: amount.toJSNumber(),\n    currency,\n    months,\n    users,\n  };\n}\n\nexport function buildApiStarsGiftOptions(option: GramJs.StarsGiftOption): ApiStarTopupOption {\n  const {\n    extended, stars, amount, currency,\n  } = option;\n\n  return {\n    isExtended: extended,\n    stars: stars.toJSNumber(),\n    amount: amount.toJSNumber(),\n    currency,\n  };\n}\n\nexport function buildApiStarsAmount(amount: GramJs.StarsAmount): ApiStarsAmount {\n  return {\n    amount: amount.amount.toJSNumber(),\n    nanos: amount.nanos,\n  };\n}\n\nexport function buildApiStarsGiveawayWinnersOption(\n  option: GramJs.StarsGiveawayWinnersOption,\n): ApiStarsGiveawayWinnerOption {\n  const {\n    default: isDefault, users, perUserStars,\n  } = option;\n\n  return {\n    isDefault,\n    users,\n    perUserStars: perUserStars.toJSNumber(),\n  };\n}\n\nexport function buildApiStarsGiveawayOptions(option: GramJs.StarsGiveawayOption): ApiStarGiveawayOption {\n  const {\n    extended, default: isDefault, stars, yearlyBoosts, amount, winners, currency,\n  } = option;\n\n  const winnerList = winners?.map((m) => buildApiStarsGiveawayWinnersOption(m)).filter(Boolean);\n\n  return {\n    isExtended: extended,\n    isDefault,\n    yearlyBoosts,\n    stars: stars.toJSNumber(),\n    amount: amount.toJSNumber(),\n    currency,\n    winners: winnerList,\n  };\n}\n\nexport function buildApiStarsTransactionPeer(peer: GramJs.TypeStarsTransactionPeer): ApiStarsTransactionPeer {\n  if (peer instanceof GramJs.StarsTransactionPeerAppStore) {\n    return { type: 'appStore' };\n  }\n\n  if (peer instanceof GramJs.StarsTransactionPeerPlayMarket) {\n    return { type: 'playMarket' };\n  }\n\n  if (peer instanceof GramJs.StarsTransactionPeerPremiumBot) {\n    return { type: 'premiumBot' };\n  }\n\n  if (peer instanceof GramJs.StarsTransactionPeerFragment) {\n    return { type: 'fragment' };\n  }\n\n  if (peer instanceof GramJs.StarsTransactionPeerAds) {\n    return { type: 'ads' };\n  }\n\n  if (peer instanceof GramJs.StarsTransactionPeerAPI) {\n    return { type: 'api' };\n  }\n\n  if (peer instanceof GramJs.StarsTransactionPeer) {\n    return { type: 'peer', id: getApiChatIdFromMtpPeer(peer.peer) };\n  }\n\n  return { type: 'unsupported' };\n}\n\nexport function buildApiStarsTransaction(transaction: GramJs.StarsTransaction): ApiStarsTransaction {\n  const {\n    date, id, peer, stars, description, photo, title, refund, extendedMedia, failed, msgId, pending, gift, reaction,\n    subscriptionPeriod, stargift, giveawayPostId, starrefCommissionPermille, stargiftUpgrade,\n  } = transaction;\n\n  if (photo) {\n    addWebDocumentToLocalDb(photo);\n  }\n\n  const boughtExtendedMedia = extendedMedia?.map((m) => buildMessageMediaContent(m))\n    .filter(Boolean) as BoughtPaidMedia[];\n\n  const starRefCommision = starrefCommissionPermille ? starrefCommissionPermille / 10 : undefined;\n\n  return {\n    id,\n    date,\n    peer: buildApiStarsTransactionPeer(peer),\n    stars: buildApiStarsAmount(stars),\n    title,\n    description,\n    photo: photo && buildApiWebDocument(photo),\n    isRefund: refund,\n    hasFailed: failed,\n    isPending: pending,\n    messageId: msgId,\n    isGift: gift,\n    extendedMedia: boughtExtendedMedia,\n    subscriptionPeriod,\n    isReaction: reaction,\n    starGift: stargift && buildApiStarGift(stargift),\n    giveawayPostId,\n    starRefCommision,\n    isGiftUpgrade: stargiftUpgrade,\n  };\n}\n\nexport function buildApiStarsSubscription(subscription: GramJs.StarsSubscription): ApiStarsSubscription {\n  const {\n    id, peer, pricing, untilDate, canRefulfill, canceled, chatInviteHash, missingBalance, botCanceled, photo, title,\n    invoiceSlug,\n  } = subscription;\n\n  if (photo) {\n    addWebDocumentToLocalDb(photo);\n  }\n\n  return {\n    id,\n    peerId: getApiChatIdFromMtpPeer(peer),\n    until: untilDate,\n    pricing: buildApiStarsSubscriptionPricing(pricing),\n    isCancelled: canceled,\n    canRefulfill,\n    hasMissingBalance: missingBalance,\n    chatInviteHash,\n    hasBotCancelled: botCanceled,\n    title,\n    photo: photo && buildApiWebDocument(photo),\n    invoiceSlug,\n  };\n}\n\nexport function buildApiStarTopupOption(option: GramJs.TypeStarsTopupOption): ApiStarTopupOption {\n  const {\n    amount, currency, stars, extended,\n  } = option;\n\n  return {\n    amount: amount.toJSNumber(),\n    currency,\n    stars: stars.toJSNumber(),\n    isExtended: extended,\n  };\n}\n","import type { OnApiUpdate } from '../types';\n\nimport { MAX_INT_32 } from '../../config';\nimport { getServerTime } from '../../util/serverTime';\n\ntype UnmuteQueueItem = { chatId: string; topicId?: number; muteUntil: number };\nconst unmuteTimers = new Map<string, any>();\nconst unmuteQueue: Array<UnmuteQueueItem> = [];\nconst scheduleUnmute = (item: UnmuteQueueItem, onUpdate: NoneToVoidFunction) => {\n  const id = item.topicId ? `${item.chatId}-${item.topicId}` : item.chatId;\n  if (unmuteTimers.has(id)) {\n    clearTimeout(unmuteTimers.get(id));\n    unmuteTimers.delete(id);\n  }\n  if (item.muteUntil === MAX_INT_32 || item.muteUntil <= getServerTime()) return;\n  unmuteQueue.push(item);\n  unmuteQueue.sort((a, b) => b.muteUntil - a.muteUntil);\n  const next = unmuteQueue.pop();\n  if (!next) return;\n  const timer = setTimeout(() => {\n    onUpdate();\n    if (unmuteQueue.length) {\n      const afterNext = unmuteQueue.pop();\n      if (afterNext) scheduleUnmute(afterNext, onUpdate);\n    }\n  }, (item.muteUntil - getServerTime()) * 1000);\n  unmuteTimers.set(id, timer);\n};\n\nexport function scheduleMutedChatUpdate(chatId: string, muteUntil = 0, onUpdate: OnApiUpdate) {\n  scheduleUnmute({\n    chatId,\n    muteUntil,\n  }, () => onUpdate({\n    '@type': 'updateNotifyExceptions',\n    chatId,\n    isMuted: false,\n  }));\n}\n\nexport function scheduleMutedTopicUpdate(chatId: string, topicId: number, muteUntil = 0, onUpdate: OnApiUpdate) {\n  scheduleUnmute({\n    chatId,\n    topicId,\n    muteUntil,\n  }, () => onUpdate({\n    '@type': 'updateTopicNotifyExceptions',\n    chatId,\n    topicId,\n    isMuted: false,\n  }));\n}\n","/* eslint-disable max-classes-per-file */\nimport type { BigInteger } from 'big-integer';\n\nexport class LocalUpdatePts {\n  constructor(public pts: number, public ptsCount: number) {}\n}\n\nexport class LocalUpdateChannelPts {\n  constructor(public channelId: BigInteger, public pts: number, public ptsCount: number) {}\n}\n\nexport type UpdatePts = LocalUpdatePts | LocalUpdateChannelPts;\n\nexport function buildLocalUpdatePts(pts: number, ptsCount: number, channelId?: BigInteger) {\n  return channelId ? new LocalUpdateChannelPts(channelId, pts, ptsCount) : new LocalUpdatePts(pts, ptsCount);\n}\n","import { Api as GramJs, type Update } from '../../../lib/gramjs';\nimport { UpdateConnectionState, UpdateServerTimeOffset } from '../../../lib/gramjs/network';\n\nimport type { GroupCallConnectionData } from '../../../lib/secret-sauce';\nimport type {\n  ApiMessage, ApiPoll, ApiStory, ApiStorySkipped,\n  ApiUpdateConnectionStateType,\n} from '../../types';\n\nimport { DEBUG, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  omit, pick,\n} from '../../../util/iteratees';\nimport { getServerTimeOffset, setServerTimeOffset } from '../../../util/serverTime';\nimport { buildApiBotMenuButton } from '../apiBuilders/bots';\nimport {\n  buildApiGroupCall,\n  buildApiGroupCallParticipant,\n  buildPhoneCall,\n  getGroupCallId,\n} from '../apiBuilders/calls';\nimport {\n  buildApiChatFolder,\n  buildApiChatFromPreview,\n  buildApiChatSettings,\n  buildChatMember,\n  buildChatMembers,\n  buildChatTypingStatus,\n} from '../apiBuilders/chats';\nimport {\n  buildApiPhoto, buildApiUsernames, buildPrivacyRules,\n} from '../apiBuilders/common';\nimport { omitVirtualClassFields } from '../apiBuilders/helpers';\nimport {\n  buildApiMessageExtendedMediaPreview,\n  buildBoughtMediaContent,\n  buildPoll,\n  buildPollFromMedia,\n  buildPollResults,\n} from '../apiBuilders/messageContent';\nimport {\n  buildApiMessage,\n  buildApiMessageFromNotification,\n  buildApiMessageFromShort,\n  buildApiMessageFromShortChat,\n  buildApiQuickReply,\n  buildMessageDraft,\n} from '../apiBuilders/messages';\nimport {\n  buildApiNotifyException,\n  buildApiNotifyExceptionTopic,\n  buildLangStrings,\n  buildPrivacyKey,\n} from '../apiBuilders/misc';\nimport { buildApiStarsAmount } from '../apiBuilders/payments';\nimport { buildApiEmojiStatus, buildApiPeerId, getApiChatIdFromMtpPeer } from '../apiBuilders/peers';\nimport {\n  buildApiReaction,\n  buildMessageReactions,\n} from '../apiBuilders/reactions';\nimport { buildApiStealthMode, buildApiStory } from '../apiBuilders/stories';\nimport { buildApiEmojiInteraction, buildStickerSet } from '../apiBuilders/symbols';\nimport {\n  buildApiUser,\n  buildApiUserStatus,\n} from '../apiBuilders/users';\nimport {\n  buildChatPhotoForLocalDb,\n  buildMessageFromUpdate,\n} from '../gramjsBuilders';\nimport {\n  addPhotoToLocalDb,\n  addStoryToLocalDb,\n} from '../helpers/localDb';\nimport {\n  isChatFolder,\n  log,\n  resolveMessageApiChatId,\n  serializeBytes,\n} from '../helpers/misc';\nimport localDb from '../localDb';\nimport { scheduleMutedChatUpdate, scheduleMutedTopicUpdate } from '../scheduleUnmute';\nimport { sendApiUpdate } from './apiUpdateEmitter';\nimport { processMessageAndUpdateThreadInfo } from './entityProcessor';\n\nimport LocalUpdatePremiumFloodWait from './UpdatePremiumFloodWait';\nimport { LocalUpdateChannelPts, LocalUpdatePts } from './UpdatePts';\n\nconst sentMessageIds = new Set();\n\nexport function updater(update: Update) {\n  if (update instanceof UpdateServerTimeOffset) {\n    setServerTimeOffset(update.timeOffset);\n\n    sendApiUpdate({\n      '@type': 'updateServerTimeOffset',\n      serverTimeOffset: update.timeOffset,\n    });\n  } else if (update instanceof UpdateConnectionState) {\n    let connectionState: ApiUpdateConnectionStateType;\n\n    switch (update.state) {\n      case UpdateConnectionState.disconnected:\n        connectionState = 'connectionStateConnecting';\n        break;\n      case UpdateConnectionState.broken:\n        connectionState = 'connectionStateBroken';\n        break;\n      case UpdateConnectionState.connected:\n      default:\n        connectionState = 'connectionStateReady';\n        break;\n    }\n\n    sendApiUpdate({\n      '@type': 'updateConnectionState',\n      connectionState,\n    });\n\n    // Messages\n  } else if (\n    update instanceof GramJs.UpdateNewMessage\n    || update instanceof GramJs.UpdateNewScheduledMessage\n    || update instanceof GramJs.UpdateNewChannelMessage\n    || update instanceof GramJs.UpdateShortChatMessage\n    || update instanceof GramJs.UpdateShortMessage\n  ) {\n    let message: ApiMessage | undefined;\n    let poll: ApiPoll | undefined;\n    let shouldForceReply: boolean | undefined;\n\n    if (update instanceof GramJs.UpdateShortChatMessage) {\n      message = buildApiMessageFromShortChat(update);\n    } else if (update instanceof GramJs.UpdateShortMessage) {\n      message = buildApiMessageFromShort(update);\n    } else {\n      const mtpMessage = update.message;\n      // TODO Remove if proven not reproducing\n      if (mtpMessage instanceof GramJs.MessageEmpty) {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error('Unexpected update:', update.className, update);\n        }\n\n        return;\n      }\n\n      processMessageAndUpdateThreadInfo(mtpMessage);\n\n      message = buildApiMessage(mtpMessage)!;\n\n      if (mtpMessage instanceof GramJs.Message) {\n        poll = mtpMessage.media && buildPollFromMedia(mtpMessage.media);\n      }\n\n      shouldForceReply = 'replyMarkup' in update.message\n        && update.message?.replyMarkup instanceof GramJs.ReplyKeyboardForceReply\n        && (!update.message.replyMarkup.selective || message.isMentioned);\n    }\n\n    if (update instanceof GramJs.UpdateNewScheduledMessage) {\n      sendApiUpdate({\n        '@type': sentMessageIds.has(message.id) ? 'updateScheduledMessage' : 'newScheduledMessage',\n        id: message.id,\n        chatId: message.chatId,\n        message,\n        poll,\n      });\n    } else {\n      // We don't have preview for action or 'via bot' messages, so `newMessage` update here is required\n      const hasLocalCopy = sentMessageIds.has(message.id) && !message.viaBotId && !message.content.action;\n      sendApiUpdate({\n        '@type': hasLocalCopy ? 'updateMessage' : 'newMessage',\n        id: message.id,\n        chatId: message.chatId,\n        message,\n        shouldForceReply,\n        poll,\n      });\n    }\n\n    // Some updates to a Chat/Channel don't have a dedicated update class.\n    // We can get info on some updates from Service Messages.\n    if (update.message instanceof GramJs.MessageService) {\n      const { action } = update.message;\n\n      if (action instanceof GramJs.MessageActionChatEditTitle) {\n        sendApiUpdate({\n          '@type': 'updateChat',\n          id: message.chatId,\n          chat: {\n            title: action.title,\n          },\n        });\n      } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n        const apiPhoto = action.photo instanceof GramJs.Photo && buildApiPhoto(action.photo);\n        if (!apiPhoto) return;\n\n        const photo = buildChatPhotoForLocalDb(action.photo);\n\n        const localDbChatId = resolveMessageApiChatId(update.message)!;\n        if (localDb.chats[localDbChatId]) {\n          localDb.chats[localDbChatId].photo = photo;\n        }\n        addPhotoToLocalDb(action.photo);\n\n        sendApiUpdate({\n          '@type': 'updateNewProfilePhoto',\n          peerId: message.chatId,\n          photo: apiPhoto,\n        });\n      } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n        const localDbChatId = resolveMessageApiChatId(update.message)!;\n        if (localDb.chats[localDbChatId]) {\n          localDb.chats[localDbChatId].photo = new GramJs.ChatPhotoEmpty();\n        }\n\n        sendApiUpdate({\n          '@type': 'updateDeleteProfilePhoto',\n          peerId: message.chatId,\n        });\n      } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n        // eslint-disable-next-line no-underscore-dangle\n        if (update._entities && update._entities.some((e): e is GramJs.User => (\n          e instanceof GramJs.User && Boolean(e.self) && e.id === action.userId\n        ))) {\n          sendApiUpdate({\n            '@type': 'updateChat',\n            id: message.chatId,\n            chat: {\n              isForbidden: true,\n              isNotJoined: true,\n            },\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionChatAddUser) {\n        // eslint-disable-next-line no-underscore-dangle\n        if (update._entities && update._entities.some((e): e is GramJs.User => (\n          e instanceof GramJs.User && Boolean(e.self) && action.users.includes(e.id)\n        ))) {\n          sendApiUpdate({\n            '@type': 'updateChatJoin',\n            id: message.chatId,\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionGroupCall) {\n        if (!action.duration && action.call) {\n          sendApiUpdate({\n            '@type': 'updateGroupCallChatId',\n            chatId: message.chatId,\n            call: {\n              id: action.call.id.toString(),\n              accessHash: action.call.accessHash.toString(),\n            },\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionTopicEdit) {\n        const replyTo = update.message.replyTo instanceof GramJs.MessageReplyHeader\n          ? update.message.replyTo\n          : undefined;\n        const {\n          replyToMsgId, replyToTopId, forumTopic: isTopicReply,\n        } = replyTo || {};\n        const topicId = !isTopicReply ? GENERAL_TOPIC_ID : replyToTopId || replyToMsgId || GENERAL_TOPIC_ID;\n\n        sendApiUpdate({\n          '@type': 'updateTopic',\n          chatId: getApiChatIdFromMtpPeer(update.message.peerId!),\n          topicId,\n        });\n      } else if (action instanceof GramJs.MessageActionTopicCreate) {\n        sendApiUpdate({\n          '@type': 'updateTopics',\n          chatId: getApiChatIdFromMtpPeer(update.message.peerId!),\n        });\n      }\n    }\n  } else if (update instanceof GramJs.UpdateQuickReplyMessage) {\n    const message = buildApiMessage(update.message);\n    if (!message) return;\n\n    sendApiUpdate({\n      '@type': 'updateQuickReplyMessage',\n      id: message.id,\n      message,\n    });\n  } else if (update instanceof GramJs.UpdateDeleteQuickReplyMessages) {\n    sendApiUpdate({\n      '@type': 'deleteQuickReplyMessages',\n      quickReplyId: update.shortcutId,\n      messageIds: update.messages,\n    });\n  } else if (update instanceof GramJs.UpdateQuickReplies) {\n    const quickReplies = update.quickReplies.map(buildApiQuickReply);\n    sendApiUpdate({\n      '@type': 'updateQuickReplies',\n      quickReplies,\n    });\n  } else if (update instanceof GramJs.UpdateNewQuickReply) {\n    const quickReply = buildApiQuickReply(update.quickReply);\n    sendApiUpdate({\n      '@type': 'updateQuickReplies',\n      quickReplies: [quickReply],\n    });\n  } else if (update instanceof GramJs.UpdateDeleteQuickReply) {\n    sendApiUpdate({\n      '@type': 'deleteQuickReply',\n      quickReplyId: update.shortcutId,\n    });\n  } else if (\n    update instanceof GramJs.UpdateEditMessage\n    || update instanceof GramJs.UpdateEditChannelMessage\n  ) {\n    const mtpMessage = update.message;\n    // TODO Remove if proven not reproducing\n    if (mtpMessage instanceof GramJs.MessageEmpty) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('Unexpected update:', update.className, update);\n      }\n\n      return;\n    }\n\n    processMessageAndUpdateThreadInfo(mtpMessage);\n\n    // Workaround for a weird server behavior when own message is marked as incoming\n    const message = omit(buildApiMessage(mtpMessage)!, ['isOutgoing']);\n\n    const poll = mtpMessage instanceof GramJs.Message && mtpMessage.media\n      ? buildPollFromMedia(mtpMessage.media) : undefined;\n\n    sendApiUpdate({\n      '@type': 'updateMessage',\n      id: message.id,\n      chatId: message.chatId,\n      message,\n      poll,\n    });\n  } else if (update instanceof GramJs.UpdateMessageReactions) {\n    sendApiUpdate({\n      '@type': 'updateMessageReactions',\n      id: update.msgId,\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      reactions: buildMessageReactions(update.reactions),\n    });\n  } else if (update instanceof GramJs.UpdateMessageExtendedMedia) {\n    const chatId = getApiChatIdFromMtpPeer(update.peer);\n    const isBought = update.extendedMedia[0] instanceof GramJs.MessageExtendedMedia;\n    if (isBought) {\n      const boughtMedia = buildBoughtMediaContent(update.extendedMedia);\n\n      if (!boughtMedia?.length) return;\n\n      sendApiUpdate({\n        '@type': 'updateMessageExtendedMedia',\n        id: update.msgId,\n        chatId,\n        isBought,\n        extendedMedia: boughtMedia,\n      });\n      return;\n    }\n\n    const previewMedia = !isBought ? update.extendedMedia\n      .filter((m): m is GramJs.MessageExtendedMediaPreview => m instanceof GramJs.MessageExtendedMediaPreview)\n      .map((m) => buildApiMessageExtendedMediaPreview(m))\n      .filter(Boolean) : undefined;\n\n    if (!previewMedia?.length) return;\n\n    sendApiUpdate({\n      '@type': 'updateMessageExtendedMedia',\n      id: update.msgId,\n      chatId,\n      extendedMedia: previewMedia,\n    });\n  } else if (update instanceof GramJs.UpdateDeleteMessages) {\n    sendApiUpdate({\n      '@type': 'deleteMessages',\n      ids: update.messages,\n    });\n  } else if (update instanceof GramJs.UpdateDeleteScheduledMessages) {\n    sendApiUpdate({\n      '@type': 'deleteScheduledMessages',\n      ids: update.messages,\n      newIds: update.sentMessages,\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n    });\n  } else if (update instanceof GramJs.UpdateDeleteChannelMessages) {\n    const chatId = buildApiPeerId(update.channelId, 'channel');\n\n    sendApiUpdate({\n      '@type': 'deleteMessages',\n      ids: update.messages,\n      chatId,\n    });\n  } else if (update instanceof GramJs.UpdateServiceNotification) {\n    if (update.popup) {\n      sendApiUpdate({\n        '@type': 'error',\n        error: {\n          message: update.message,\n        },\n      });\n    } else {\n      const currentDate = Date.now() / 1000 + getServerTimeOffset();\n      const message = buildApiMessageFromNotification(update, currentDate);\n\n      processMessageAndUpdateThreadInfo(buildMessageFromUpdate(message.id, message.chatId, update));\n\n      sendApiUpdate({\n        '@type': 'updateServiceNotification',\n        message,\n      });\n    }\n  } else if (update instanceof GramJs.UpdateMessageID || update instanceof GramJs.UpdateShortSentMessage) {\n    sentMessageIds.add(update.id);\n  } else if (update instanceof GramJs.UpdateReadMessagesContents) {\n    sendApiUpdate({\n      '@type': 'updateCommonBoxMessages',\n      ids: update.messages,\n      messageUpdate: {\n        hasUnreadMention: false,\n        isMediaUnread: false,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateChannelReadMessagesContents) {\n    sendApiUpdate({\n      '@type': 'updateChannelMessages',\n      channelId: buildApiPeerId(update.channelId, 'channel'),\n      ids: update.messages,\n      messageUpdate: {\n        hasUnreadMention: false,\n        isMediaUnread: false,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateMessagePoll) {\n    const { pollId, poll, results } = update;\n    if (poll) {\n      const apiPoll = buildPoll(poll, results);\n\n      sendApiUpdate({\n        '@type': 'updateMessagePoll',\n        pollId: String(pollId),\n        pollUpdate: apiPoll,\n      });\n    } else {\n      const pollResults = buildPollResults(results);\n      sendApiUpdate({\n        '@type': 'updateMessagePoll',\n        pollId: String(pollId),\n        pollUpdate: { results: pollResults },\n      });\n    }\n  } else if (update instanceof GramJs.UpdateMessagePollVote) {\n    sendApiUpdate({\n      '@type': 'updateMessagePollVote',\n      pollId: String(update.pollId),\n      peerId: getApiChatIdFromMtpPeer(update.peer),\n      options: update.options.map(serializeBytes),\n    });\n  } else if (update instanceof GramJs.UpdateChannelMessageViews) {\n    sendApiUpdate({\n      '@type': 'updateMessage',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      id: update.id,\n      message: { viewsCount: update.views },\n    });\n  } else if (update instanceof GramJs.UpdateChannelMessageForwards) {\n    sendApiUpdate({\n      '@type': 'updateMessage',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      id: update.id,\n      message: { forwardsCount: update.forwards },\n    });\n\n    // Chats\n  } else if (update instanceof GramJs.UpdateReadHistoryInbox) {\n    sendApiUpdate({\n      '@type': 'updateChatInbox',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        lastReadInboxMessageId: update.maxId,\n        unreadCount: update.stillUnreadCount,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadHistoryOutbox) {\n    sendApiUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        lastReadOutboxMessageId: update.maxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelInbox) {\n    sendApiUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadInboxMessageId: update.maxId,\n        unreadCount: update.stillUnreadCount,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelOutbox) {\n    sendApiUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadOutboxMessageId: update.maxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelDiscussionInbox) {\n    sendApiUpdate({\n      '@type': 'updateThreadInfo',\n      threadInfo: {\n        chatId: buildApiPeerId(update.channelId, 'channel'),\n        threadId: update.topMsgId,\n        lastReadInboxMessageId: update.readMaxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelDiscussionOutbox) {\n    sendApiUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadOutboxMessageId: update.readMaxId,\n      },\n    });\n  } else if (\n    update instanceof GramJs.UpdateDialogPinned\n    && update.peer instanceof GramJs.DialogPeer\n  ) {\n    sendApiUpdate({\n      '@type': 'updateChatPinned',\n      id: getApiChatIdFromMtpPeer(update.peer.peer),\n      isPinned: update.pinned || false,\n    });\n  } else if (update instanceof GramJs.UpdatePinnedDialogs) {\n    const ids = update.order\n      ? update.order\n        .filter((dp): dp is GramJs.DialogPeer => dp instanceof GramJs.DialogPeer)\n        .map((dp) => getApiChatIdFromMtpPeer(dp.peer))\n      : [];\n\n    sendApiUpdate({\n      '@type': 'updatePinnedChatIds',\n      ids,\n      folderId: update.folderId || undefined,\n    });\n  } else if (\n    update instanceof GramJs.UpdateSavedDialogPinned\n    && update.peer instanceof GramJs.DialogPeer\n  ) {\n    sendApiUpdate({\n      '@type': 'updateSavedDialogPinned',\n      id: getApiChatIdFromMtpPeer(update.peer.peer),\n      isPinned: update.pinned || false,\n    });\n  } else if (update instanceof GramJs.UpdatePinnedSavedDialogs) {\n    const ids = update.order\n      ? update.order\n        .filter((dp): dp is GramJs.DialogPeer => dp instanceof GramJs.DialogPeer)\n        .map((dp) => getApiChatIdFromMtpPeer(dp.peer))\n      : [];\n\n    sendApiUpdate({\n      '@type': 'updatePinnedSavedDialogIds',\n      ids,\n    });\n  } else if (update instanceof GramJs.UpdateFolderPeers) {\n    update.folderPeers.forEach((folderPeer) => {\n      const { folderId, peer } = folderPeer;\n\n      sendApiUpdate({\n        '@type': 'updateChatListType',\n        id: getApiChatIdFromMtpPeer(peer),\n        folderId,\n      });\n    });\n  } else if (update instanceof GramJs.UpdateDialogFilter) {\n    const { id, filter } = update;\n    const folder = isChatFolder(filter) ? buildApiChatFolder(filter) : undefined;\n\n    sendApiUpdate({\n      '@type': 'updateChatFolder',\n      id,\n      folder,\n    });\n  } else if (update instanceof GramJs.UpdateDialogFilterOrder) {\n    sendApiUpdate({\n      '@type': 'updateChatFoldersOrder',\n      orderedIds: update.order,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipants) {\n    const replacedMembers = buildChatMembers(update.participants);\n\n    sendApiUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.participants.chatId, 'chat'),\n      replacedMembers,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipantAdd) {\n    const addedMember = buildChatMember(\n      pick(update, ['userId', 'inviterId', 'date']) as GramJs.ChatParticipant,\n    );\n\n    sendApiUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.chatId, 'chat'),\n      addedMember,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipantDelete) {\n    sendApiUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.chatId, 'chat'),\n      deletedMemberId: buildApiPeerId(update.userId, 'user'),\n    });\n  } else if (\n    update instanceof GramJs.UpdatePinnedMessages\n    || update instanceof GramJs.UpdatePinnedChannelMessages\n  ) {\n    const chatId = update instanceof GramJs.UpdatePinnedMessages\n      ? getApiChatIdFromMtpPeer(update.peer)\n      : buildApiPeerId(update.channelId, 'channel');\n\n    sendApiUpdate({\n      '@type': 'updatePinnedIds',\n      chatId,\n      messageIds: update.messages,\n      isPinned: update.pinned,\n    });\n  } else if (\n    update instanceof GramJs.UpdateNotifySettings\n    && update.peer instanceof GramJs.NotifyPeer\n  ) {\n    const payload = buildApiNotifyException(update.notifySettings, update.peer.peer);\n    scheduleMutedChatUpdate(payload.chatId, payload.muteUntil, sendApiUpdate);\n    sendApiUpdate({\n      '@type': 'updateNotifyExceptions',\n      ...payload,\n    });\n  } else if (\n    update instanceof GramJs.UpdateNotifySettings\n    && update.peer instanceof GramJs.NotifyForumTopic\n  ) {\n    const payload = buildApiNotifyExceptionTopic(\n      update.notifySettings, update.peer.peer, update.peer.topMsgId,\n    );\n    scheduleMutedTopicUpdate(payload.chatId, payload.topicId, payload.muteUntil, sendApiUpdate);\n    sendApiUpdate({\n      '@type': 'updateTopicNotifyExceptions',\n      ...payload,\n    });\n  } else if (\n    update instanceof GramJs.UpdateUserTyping\n    || update instanceof GramJs.UpdateChatUserTyping\n  ) {\n    const id = update instanceof GramJs.UpdateUserTyping\n      ? buildApiPeerId(update.userId, 'user')\n      : buildApiPeerId(update.chatId, 'chat');\n\n    if (update.action instanceof GramJs.SendMessageEmojiInteraction) {\n      sendApiUpdate({\n        '@type': 'updateStartEmojiInteraction',\n        id,\n        emoji: update.action.emoticon,\n        messageId: update.action.msgId,\n        interaction: buildApiEmojiInteraction(JSON.parse(update.action.interaction.data)),\n      });\n    } else {\n      sendApiUpdate({\n        '@type': 'updateChatTypingStatus',\n        id,\n        typingStatus: buildChatTypingStatus(update),\n      });\n    }\n  } else if (update instanceof GramJs.UpdateChannelUserTyping) {\n    const id = buildApiPeerId(update.channelId, 'channel');\n\n    sendApiUpdate({\n      '@type': 'updateChatTypingStatus',\n      id,\n      threadId: update.topMsgId,\n      typingStatus: buildChatTypingStatus(update),\n    });\n  } else if (update instanceof GramJs.UpdateChannel) {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { _entities } = update;\n    if (!_entities) {\n      return;\n    }\n\n    const channel = _entities.find((e): e is GramJs.Channel | GramJs.ChannelForbidden => (\n      e instanceof GramJs.Channel || e instanceof GramJs.ChannelForbidden\n    ));\n\n    if (channel instanceof GramJs.Channel) {\n      const chat = buildApiChatFromPreview(channel);\n      if (chat) {\n        sendApiUpdate({\n          '@type': 'updateChat',\n          id: chat.id,\n          chat,\n        });\n\n        sendApiUpdate({\n          '@type': chat.isNotJoined ? 'updateChatLeave' : 'updateChatJoin',\n          id: buildApiPeerId(update.channelId, 'channel'),\n        });\n      }\n    } else if (channel instanceof GramJs.ChannelForbidden) {\n      const chatId = buildApiPeerId(update.channelId, 'channel');\n\n      sendApiUpdate({\n        '@type': 'updateChat',\n        id: chatId,\n        chat: {\n          isRestricted: true,\n        },\n      });\n\n      sendApiUpdate({\n        '@type': 'updateChatLeave',\n        id: chatId,\n      });\n    } else if (_entities.length === 0) {\n      // The link to the discussion group may have been changed.\n      // No corresponding update available at this moment https://core.telegram.org/type/Updates\n      sendApiUpdate({\n        '@type': 'resetMessages',\n        id: buildApiPeerId(update.channelId, 'channel'),\n      });\n    }\n  } else if (\n    update instanceof GramJs.UpdateDialogUnreadMark\n    && update.peer instanceof GramJs.DialogPeer\n  ) {\n    sendApiUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer.peer),\n      chat: {\n        hasUnreadMark: update.unread,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateChatDefaultBannedRights) {\n    sendApiUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        defaultBannedRights: omitVirtualClassFields(update.defaultBannedRights),\n      },\n    });\n\n    // Users\n  } else if (update instanceof GramJs.UpdateUserStatus) {\n    sendApiUpdate({\n      '@type': 'updateUserStatus',\n      userId: buildApiPeerId(update.userId, 'user'),\n      status: buildApiUserStatus(update.status),\n    });\n  } else if (update instanceof GramJs.UpdateUser) {\n    sendApiUpdate({\n      '@type': 'updateRequestUserUpdate',\n      id: buildApiPeerId(update.userId, 'user'),\n    });\n  } else if (update instanceof GramJs.UpdateUserEmojiStatus) {\n    const emojiStatus = buildApiEmojiStatus(update.emojiStatus);\n    sendApiUpdate({\n      '@type': 'updateUserEmojiStatus',\n      userId: buildApiPeerId(update.userId, 'user'),\n      emojiStatus,\n    });\n  } else if (update instanceof GramJs.UpdateUserName) {\n    const apiUserId = buildApiPeerId(update.userId, 'user');\n    const updatedUser = localDb.users[apiUserId];\n\n    const user = updatedUser?.mutualContact && !updatedUser.self\n      ? pick(update, [])\n      : pick(update, ['firstName', 'lastName']);\n\n    const usernames = buildApiUsernames(update);\n\n    sendApiUpdate({\n      '@type': 'updateUser',\n      id: apiUserId,\n      user: {\n        ...user,\n        usernames,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateUserPhone) {\n    const { userId, phone } = update;\n\n    sendApiUpdate({\n      '@type': 'updateUser',\n      id: buildApiPeerId(userId, 'user'),\n      user: { phoneNumber: phone },\n    });\n  } else if (update instanceof GramJs.UpdatePeerSettings) {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { _entities, settings } = update;\n    if (!_entities) {\n      return;\n    }\n\n    if (_entities?.length) {\n      _entities\n        .filter((e) => e instanceof GramJs.User && !e.contact)\n        .forEach((user) => {\n          sendApiUpdate({\n            '@type': 'deleteContact',\n            id: buildApiPeerId(user.id, 'user'),\n          });\n        });\n\n      _entities\n        .filter((e) => e instanceof GramJs.User && e.contact)\n        .map(buildApiUser)\n        .forEach((user) => {\n          if (!user) {\n            return;\n          }\n\n          sendApiUpdate({\n            '@type': 'updateUser',\n            id: user.id,\n            user: {\n              ...user,\n              ...(settings && { settings: buildApiChatSettings(settings) }),\n            },\n          });\n        });\n    }\n\n    // Settings\n  } else if (update instanceof GramJs.UpdateNotifySettings) {\n    const {\n      notifySettings: {\n        showPreviews, silent, muteUntil,\n      },\n      peer: { className },\n    } = update;\n\n    const peerType = className === 'NotifyUsers'\n      ? 'contact'\n      : (className === 'NotifyChats'\n        ? 'group'\n        : (className === 'NotifyBroadcasts'\n          ? 'broadcast'\n          : undefined\n        )\n      );\n\n    if (!peerType) {\n      return;\n    }\n\n    sendApiUpdate({\n      '@type': 'updateNotifySettings',\n      peerType,\n      isSilent: Boolean(silent\n        || (typeof muteUntil === 'number' && Date.now() + getServerTimeOffset() * 1000 < muteUntil * 1000)),\n      shouldShowPreviews: Boolean(showPreviews),\n    });\n  } else if (update instanceof GramJs.UpdatePeerBlocked) {\n    sendApiUpdate({\n      '@type': 'updatePeerBlocked',\n      id: getApiChatIdFromMtpPeer(update.peerId),\n      isBlocked: update.blocked,\n      isBlockedFromStories: update.blockedMyStoriesFrom,\n    });\n  } else if (update instanceof GramJs.UpdatePrivacy) {\n    const key = buildPrivacyKey(update.key);\n    if (key) {\n      sendApiUpdate({\n        '@type': 'updatePrivacy',\n        key,\n        rules: buildPrivacyRules(update.rules),\n      });\n    }\n\n    // Misc\n  } else if (update instanceof GramJs.UpdateDraftMessage) {\n    sendApiUpdate({\n      '@type': 'draftMessage',\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      threadId: update.topMsgId,\n      draft: buildMessageDraft(update.draft),\n    });\n  } else if (update instanceof GramJs.UpdateContactsReset) {\n    sendApiUpdate({ '@type': 'updateResetContactList' });\n  } else if (update instanceof GramJs.UpdateFavedStickers) {\n    sendApiUpdate({ '@type': 'updateFavoriteStickers' });\n  } else if (update instanceof GramJs.UpdateRecentStickers) {\n    sendApiUpdate({ '@type': 'updateRecentStickers' });\n  } else if (update instanceof GramJs.UpdateRecentReactions) {\n    sendApiUpdate({ '@type': 'updateRecentReactions' });\n  } else if (update instanceof GramJs.UpdateSavedReactionTags) {\n    sendApiUpdate({ '@type': 'updateSavedReactionTags' });\n  } else if (update instanceof GramJs.UpdateMoveStickerSetToTop) {\n    if (!update.masks) {\n      sendApiUpdate({\n        '@type': 'updateMoveStickerSetToTop',\n        isCustomEmoji: update.emojis,\n        id: update.stickerset.toString(),\n      });\n    }\n  } else if (update instanceof GramJs.UpdateStickerSets) {\n    sendApiUpdate({ '@type': 'updateStickerSets' });\n  } else if (update instanceof GramJs.UpdateStickerSetsOrder) {\n    if (!update.masks) {\n      sendApiUpdate({\n        '@type': 'updateStickerSetsOrder',\n        order: update.order.map((n) => n.toString()),\n        isCustomEmoji: update.emojis,\n      });\n    }\n  } else if (update instanceof GramJs.UpdateNewStickerSet) {\n    if (update.stickerset instanceof GramJs.messages.StickerSet) {\n      const stickerSet = buildStickerSet(update.stickerset.set);\n      sendApiUpdate({\n        '@type': 'updateStickerSet',\n        id: stickerSet.id,\n        stickerSet,\n      });\n    }\n  } else if (update instanceof GramJs.UpdateSavedGifs) {\n    sendApiUpdate({ '@type': 'updateSavedGifs' });\n  } else if (update instanceof GramJs.UpdateGroupCall) {\n    sendApiUpdate({\n      '@type': 'updateGroupCall',\n      call: buildApiGroupCall(update.call),\n    });\n  } else if (update instanceof GramJs.UpdateGroupCallConnection) {\n    sendApiUpdate({\n      '@type': 'updateGroupCallConnection',\n      data: JSON.parse(update.params.data) as GroupCallConnectionData,\n      presentation: Boolean(update.presentation),\n    });\n  } else if (update instanceof GramJs.UpdateGroupCallParticipants) {\n    sendApiUpdate({\n      '@type': 'updateGroupCallParticipants',\n      groupCallId: getGroupCallId(update.call),\n      participants: update.participants.map(buildApiGroupCallParticipant),\n    });\n  } else if (update instanceof GramJs.UpdatePendingJoinRequests) {\n    sendApiUpdate({\n      '@type': 'updatePendingJoinRequests',\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      recentRequesterIds: update.recentRequesters.map((id) => buildApiPeerId(id, 'user')),\n      requestsPending: update.requestsPending,\n    });\n  } else if (update instanceof GramJs.UpdatePhoneCall) {\n    sendApiUpdate({\n      '@type': 'updatePhoneCall',\n      call: buildPhoneCall(update.phoneCall),\n    });\n  } else if (update instanceof GramJs.UpdatePhoneCallSignalingData) {\n    sendApiUpdate({\n      '@type': 'updatePhoneCallSignalingData',\n      callId: update.phoneCallId.toString(),\n      data: Array.from(update.data),\n    });\n  } else if (update instanceof GramJs.UpdateWebViewResultSent) {\n    const { queryId } = update;\n\n    sendApiUpdate({\n      '@type': 'updateWebViewResultSent',\n      queryId: queryId.toString(),\n    });\n  } else if (update instanceof GramJs.UpdateBotMenuButton) {\n    const {\n      botId,\n      button,\n    } = update;\n\n    const id = buildApiPeerId(botId, 'user');\n\n    sendApiUpdate({\n      '@type': 'updateBotMenuButton',\n      botId: id,\n      button: buildApiBotMenuButton(button),\n    });\n  } else if (update instanceof GramJs.UpdateTranscribedAudio) {\n    sendApiUpdate({\n      '@type': 'updateTranscribedAudio',\n      transcriptionId: update.transcriptionId.toString(),\n      text: update.text,\n      isPending: update.pending,\n    });\n  } else if (update instanceof GramJs.UpdateConfig) {\n    sendApiUpdate({ '@type': 'updateConfig' });\n  } else if (update instanceof GramJs.UpdateChannelPinnedTopic) {\n    sendApiUpdate({\n      '@type': 'updatePinnedTopic',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      topicId: update.topicId,\n      isPinned: Boolean(update.pinned),\n    });\n  } else if (update instanceof GramJs.UpdateChannelPinnedTopics) {\n    sendApiUpdate({\n      '@type': 'updatePinnedTopicsOrder',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      order: update.order || [],\n    });\n  } else if (update instanceof GramJs.UpdateRecentEmojiStatuses) {\n    sendApiUpdate({ '@type': 'updateRecentEmojiStatuses' });\n  } else if (update instanceof GramJs.UpdateStory) {\n    const { story } = update;\n    const peerId = getApiChatIdFromMtpPeer(update.peer);\n    const apiStory = buildApiStory(peerId, story) as ApiStory | ApiStorySkipped;\n    addStoryToLocalDb(story, peerId); // Add after building to prevent repair info overwrite\n\n    if (story instanceof GramJs.StoryItemDeleted) {\n      sendApiUpdate({\n        '@type': 'deleteStory',\n        peerId,\n        storyId: story.id,\n      });\n    } else {\n      sendApiUpdate({\n        '@type': 'updateStory',\n        peerId,\n        story: apiStory,\n      });\n    }\n  } else if (update instanceof GramJs.UpdateReadStories) {\n    sendApiUpdate({\n      '@type': 'updateReadStories',\n      peerId: getApiChatIdFromMtpPeer(update.peer),\n      lastReadId: update.maxId,\n    });\n  } else if (update instanceof GramJs.UpdateSentStoryReaction) {\n    const reaction = buildApiReaction(update.reaction);\n    sendApiUpdate({\n      '@type': 'updateSentStoryReaction',\n      peerId: getApiChatIdFromMtpPeer(update.peer),\n      storyId: update.storyId,\n      reaction,\n    });\n  } else if (update instanceof GramJs.UpdateStoriesStealthMode) {\n    sendApiUpdate({\n      '@type': 'updateStealthMode',\n      stealthMode: buildApiStealthMode(update.stealthMode),\n    });\n  } else if (update instanceof GramJs.UpdateAttachMenuBots) {\n    sendApiUpdate({\n      '@type': 'updateAttachMenuBots',\n    });\n  } else if (update instanceof GramJs.UpdateNewAuthorization) {\n    sendApiUpdate({\n      '@type': 'updateNewAuthorization',\n      hash: update.hash.toString(),\n      date: update.date,\n      device: update.device,\n      location: update.location,\n      isUnconfirmed: update.unconfirmed,\n    });\n  } else if (update instanceof GramJs.UpdateChannelViewForumAsMessages) {\n    sendApiUpdate({\n      '@type': 'updateViewForumAsMessages',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      isEnabled: update.enabled ? true : undefined,\n    });\n  } else if (update instanceof GramJs.UpdateStarsBalance) {\n    sendApiUpdate({\n      '@type': 'updateStarsBalance',\n      balance: buildApiStarsAmount(update.balance),\n    });\n  } else if (update instanceof GramJs.UpdatePaidReactionPrivacy) {\n    sendApiUpdate({\n      '@type': 'updatePaidReactionPrivacy',\n      isPrivate: update.private,\n    });\n  } else if (update instanceof GramJs.UpdateLangPackTooLong) {\n    sendApiUpdate({\n      '@type': 'updateLangPackTooLong',\n      langCode: update.langCode,\n    });\n  } else if (update instanceof GramJs.UpdateLangPack) {\n    const { strings, keysToRemove } = buildLangStrings(update.difference.strings);\n    sendApiUpdate({\n      '@type': 'updateLangPack',\n      version: update.difference.version,\n      strings,\n      keysToRemove,\n    });\n  } else if (update instanceof LocalUpdatePremiumFloodWait) { // Local updates\n    sendApiUpdate({\n      '@type': 'updatePremiumFloodWait',\n      isUpload: update.isUpload,\n    });\n  } else if (update instanceof LocalUpdatePts || update instanceof LocalUpdateChannelPts) {\n    // Do nothing, handled on the manager side\n  } else if (DEBUG) {\n    const params = typeof update === 'object' && 'className' in update ? update.className : update;\n    log('UNEXPECTED UPDATE', params);\n  }\n}\n","import { Api as GramJs, type Update } from '../../../lib/gramjs';\nimport { UpdateConnectionState, UpdateServerTimeOffset } from '../../../lib/gramjs/network';\n\nimport type { ApiChat } from '../../types';\nimport type { invokeRequest } from '../methods/client';\n\nimport { DEBUG } from '../../../config';\nimport SortedQueue from '../../../util/SortedQueue';\nimport { buildApiPeerId } from '../apiBuilders/peers';\nimport { buildInputEntity, buildMtpPeerId } from '../gramjsBuilders';\nimport localDb from '../localDb';\nimport { sendApiUpdate } from './apiUpdateEmitter';\nimport { processAndUpdateEntities } from './entityProcessor';\nimport { updater } from './mtpUpdateHandler';\n\nimport { buildLocalUpdatePts, type UpdatePts } from './UpdatePts';\n\nexport type State = {\n  seq: number;\n  date: number;\n  pts: number;\n  qts: number;\n};\ntype SeqUpdate = (GramJs.Updates | GramJs.UpdatesCombined) & { _isFromDifference?: true };\ntype PtsUpdate = ((GramJs.TypeUpdate & { pts: number }) | UpdatePts) & { _isFromDifference?: true };\n\nconst COMMON_BOX_QUEUE_ID = '0';\nconst CHANNEL_DIFFERENCE_LIMIT = 1000;\nconst UPDATE_WAIT_TIMEOUT = 500;\n\nlet invoke: typeof invokeRequest;\nlet isInited = false;\n\nlet seqTimeout: ReturnType<typeof setTimeout> | undefined;\nconst PTS_TIMEOUTS = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst SEQ_QUEUE = new SortedQueue<SeqUpdate>(seqComparator);\nconst PTS_QUEUE = new Map<string, SortedQueue<PtsUpdate>>();\n\nexport async function init(invokeReq: typeof invokeRequest) {\n  invoke = invokeReq;\n\n  await loadRemoteState();\n  isInited = true;\n\n  scheduleGetDifference();\n}\n\nexport function applyState(state: State) {\n  localDb.commonBoxState.seq = state.seq;\n  localDb.commonBoxState.date = state.date;\n  localDb.commonBoxState.pts = state.pts;\n  localDb.commonBoxState.qts = state.qts;\n}\n\nexport function processUpdate(update: Update, isFromDifference?: boolean, shouldOnlySave?: boolean) {\n  if (update instanceof UpdateConnectionState) {\n    if (update.state === UpdateConnectionState.connected && isInited) {\n      scheduleGetDifference();\n    }\n\n    updater(update);\n    return;\n  }\n\n  if (update instanceof UpdateServerTimeOffset) {\n    updater(update);\n    return;\n  }\n\n  if (localDb.commonBoxState.seq === undefined) {\n    // Drop updates received before first sync\n    return;\n  }\n\n  if (update instanceof GramJs.Updates || update instanceof GramJs.UpdatesCombined) {\n    if (isFromDifference) {\n      // eslint-disable-next-line no-underscore-dangle\n      (update as SeqUpdate)._isFromDifference = true;\n    }\n\n    saveSeqUpdate(update, shouldOnlySave);\n    return;\n  }\n\n  if ('pts' in update) {\n    if (update instanceof GramJs.UpdateChannelTooLong) {\n      getChannelDifference(getUpdateChannelId(update));\n      return;\n    }\n    if (isFromDifference) {\n      // eslint-disable-next-line no-underscore-dangle\n      (update as PtsUpdate)._isFromDifference = true;\n    }\n    savePtsUpdate(update, shouldOnlySave);\n    return;\n  }\n\n  updater(update);\n}\n\nexport function updateChannelState(channelId: string, pts: number) {\n  const channel = localDb.chats[channelId];\n  if (!(channel instanceof GramJs.Channel)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(`[UpdateManager] Channel ${channelId} not found in localDb`);\n    }\n    return;\n  }\n\n  const currentState = localDb.channelPtsById[channelId];\n\n  if (currentState && currentState < pts) {\n    scheduleGetChannelDifference(channelId);\n    return;\n  }\n\n  localDb.channelPtsById[channelId] = pts;\n}\n\nfunction applyUpdate(updateObject: SeqUpdate | PtsUpdate) {\n  if ('seq' in updateObject && updateObject.seq) {\n    localDb.commonBoxState.seq = updateObject.seq;\n    localDb.commonBoxState.date = updateObject.date;\n  }\n\n  if ('qts' in updateObject) {\n    localDb.commonBoxState.qts = updateObject.qts;\n  }\n\n  if ('pts' in updateObject) {\n    const channelId = getUpdateChannelId(updateObject);\n    if (channelId !== COMMON_BOX_QUEUE_ID) {\n      localDb.channelPtsById[channelId] = updateObject.pts;\n    } else {\n      localDb.commonBoxState.pts = updateObject.pts;\n    }\n  }\n\n  if (updateObject instanceof GramJs.UpdatesCombined || updateObject instanceof GramJs.Updates) {\n    processAndUpdateEntities(updateObject);\n    const entities = updateObject.users.concat(updateObject.chats);\n\n    updateObject.updates.forEach((update) => {\n      if (entities) {\n        // eslint-disable-next-line no-underscore-dangle\n        (update as any)._entities = entities;\n      }\n\n      processUpdate(update);\n    });\n  } else {\n    updater(updateObject);\n  }\n}\n\nfunction saveSeqUpdate(update: GramJs.Updates | GramJs.UpdatesCombined, shouldOnlySave?: boolean) {\n  SEQ_QUEUE.add(update);\n\n  if (!shouldOnlySave) popSeqQueue();\n}\n\nfunction savePtsUpdate(update: PtsUpdate, shouldOnlySave?: boolean) {\n  const channelId = getUpdateChannelId(update);\n\n  const ptsQueue = PTS_QUEUE.get(channelId) || new SortedQueue<PtsUpdate>(ptsComparator);\n  ptsQueue.add(update);\n\n  PTS_QUEUE.set(channelId, ptsQueue);\n\n  if (!shouldOnlySave) popPtsQueue(channelId);\n}\n\nfunction popSeqQueue() {\n  if (!SEQ_QUEUE.size) return;\n\n  const update = SEQ_QUEUE.pop()!;\n  const localSeq = localDb.commonBoxState.seq;\n  const seqStart = 'seqStart' in update ? update.seqStart : update.seq;\n\n  // eslint-disable-next-line no-underscore-dangle\n  if (seqStart === 0 || (update._isFromDifference && seqStart >= localSeq + 1)) {\n    applyUpdate(update);\n  } else if (seqStart === localSeq + 1) {\n    clearTimeout(seqTimeout);\n    seqTimeout = undefined;\n\n    applyUpdate(update);\n  } else if (seqStart > localSeq + 1) {\n    SEQ_QUEUE.add(update); // Return update to queue\n    scheduleGetDifference();\n    return; // Prevent endless loop\n  }\n\n  popSeqQueue();\n}\n\nfunction popPtsQueue(channelId: string) {\n  const ptsQueue = PTS_QUEUE.get(channelId);\n  if (!ptsQueue?.size) return;\n\n  const update = ptsQueue.pop()!;\n  const localPts = channelId === COMMON_BOX_QUEUE_ID ? localDb.commonBoxState.pts : localDb.channelPtsById[channelId];\n  const pts = update.pts;\n  const ptsCount = getPtsCount(update);\n\n  // Sometimes server sends updates for channels that are opened in other clients. We ignore them\n  if (localPts === undefined) {\n    if (DEBUG) {\n      // Uncomment to debug missing updates\n      // eslint-disable-next-line no-console\n      // console.error('[UpdateManager] Got pts update without local state', channelId);\n    }\n    return;\n  }\n\n  // eslint-disable-next-line no-underscore-dangle\n  if (update._isFromDifference && pts >= localPts + ptsCount) {\n    applyUpdate(update);\n  } else if (pts === localPts + ptsCount) {\n    clearTimeout(PTS_TIMEOUTS.get(channelId));\n    PTS_TIMEOUTS.delete(channelId);\n\n    applyUpdate(update);\n  } else if (pts > localPts + ptsCount) {\n    ptsQueue.add(update); // Return update to queue\n    if (channelId === COMMON_BOX_QUEUE_ID) {\n      scheduleGetDifference();\n    } else {\n      scheduleGetChannelDifference(channelId);\n    }\n    return; // Prevent endless loop\n  }\n\n  popPtsQueue(channelId);\n}\n\nexport function scheduleGetChannelDifference(channelId: string) {\n  if (PTS_TIMEOUTS.has(channelId)) return;\n\n  const timeout = setTimeout(async () => {\n    await getChannelDifference(channelId);\n    PTS_TIMEOUTS.delete(channelId);\n  }, UPDATE_WAIT_TIMEOUT);\n  PTS_TIMEOUTS.set(channelId, timeout);\n}\n\nfunction scheduleGetDifference() {\n  if (seqTimeout) return;\n\n  seqTimeout = setTimeout(async () => {\n    await getDifference();\n    seqTimeout = undefined;\n  }, UPDATE_WAIT_TIMEOUT);\n}\n\nfunction getUpdateChannelId(update: Update) {\n  if ('channelId' in update && 'pts' in update) {\n    return buildApiPeerId(update.channelId, 'channel');\n  }\n\n  if (update instanceof GramJs.UpdateNewChannelMessage || update instanceof GramJs.UpdateEditChannelMessage) {\n    const peer = update.message.peerId as GramJs.PeerChannel;\n    return buildApiPeerId(peer.channelId, 'channel');\n  }\n\n  return COMMON_BOX_QUEUE_ID;\n}\n\nexport async function getDifference() {\n  if (!isInited) {\n    throw new Error('UpdatesManager not initialized');\n  }\n\n  if (!localDb.commonBoxState?.date) {\n    forceSync();\n    return;\n  }\n\n  sendApiUpdate({\n    '@type': 'updateFetchingDifference',\n    isFetching: true,\n  });\n\n  const response = await invoke(new GramJs.updates.GetDifference({\n    pts: localDb.commonBoxState.pts,\n    date: localDb.commonBoxState.date,\n    qts: localDb.commonBoxState.qts,\n  }));\n\n  if (!response || response instanceof GramJs.updates.DifferenceTooLong) {\n    forceSync();\n    return;\n  }\n\n  if (response instanceof GramJs.updates.DifferenceEmpty) {\n    localDb.commonBoxState.seq = response.seq;\n    localDb.commonBoxState.date = response.date;\n    sendApiUpdate({\n      '@type': 'updateFetchingDifference',\n      isFetching: false,\n    });\n    return;\n  }\n\n  processDifference(response);\n\n  const newState = response instanceof GramJs.updates.DifferenceSlice ? response.intermediateState : response.state;\n  applyState(newState);\n\n  if (response instanceof GramJs.updates.DifferenceSlice) {\n    getDifference();\n    return;\n  }\n\n  sendApiUpdate({\n    '@type': 'updateFetchingDifference',\n    isFetching: false,\n  });\n}\n\nasync function getChannelDifference(channelId: string) {\n  const channel = localDb.chats[channelId];\n  if (!channel || !(channel instanceof GramJs.Channel) || !channel.accessHash || !localDb.channelPtsById[channelId]) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('[UpdateManager] Channel for difference not found', channelId, channel);\n    }\n    return;\n  }\n\n  const response = await invoke(new GramJs.updates.GetChannelDifference({\n    channel: buildInputEntity(channelId, channel.accessHash.toString()) as GramJs.InputChannel,\n    pts: localDb.channelPtsById[channelId],\n    filter: new GramJs.ChannelMessagesFilterEmpty(),\n    limit: CHANNEL_DIFFERENCE_LIMIT,\n  }));\n\n  if (!response) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn('[UpdatesManager] Failed to get ChannelDifference', channelId, channel);\n    }\n    return;\n  }\n\n  if (response instanceof GramJs.updates.ChannelDifferenceTooLong) {\n    forceSync();\n    return;\n  }\n\n  localDb.channelPtsById[channelId] = response.pts;\n\n  if (response instanceof GramJs.updates.ChannelDifferenceEmpty) {\n    popPtsQueue(channelId); // Continue processing updates in queue\n    return;\n  }\n\n  processDifference(response, channelId);\n\n  if (!response.final) {\n    getChannelDifference(channelId);\n  }\n}\n\nfunction forceSync() {\n  reset();\n\n  sendApiUpdate({\n    '@type': 'requestSync',\n  });\n\n  loadRemoteState();\n}\n\nexport function reset() {\n  PTS_QUEUE.clear();\n  SEQ_QUEUE.clear();\n\n  clearTimeout(seqTimeout);\n  seqTimeout = undefined;\n\n  PTS_TIMEOUTS.forEach((timeout) => {\n    clearTimeout(timeout);\n  });\n  PTS_TIMEOUTS.clear();\n\n  localDb.commonBoxState = {};\n\n  Object.keys(localDb.channelPtsById).forEach((channelId) => {\n    localDb.channelPtsById[channelId] = 0;\n  });\n\n  isInited = false;\n}\n\nexport function processAffectedHistory(\n  chat: ApiChat, affected: GramJs.messages.AffectedMessages | GramJs.messages.AffectedHistory,\n) {\n  const isChannel = chat.type === 'chatTypeChannel' || chat.type === 'chatTypeSuperGroup';\n  const channeId = isChannel ? buildMtpPeerId(chat.id, 'channel') : undefined;\n  const update = buildLocalUpdatePts(affected.pts, affected.ptsCount, channeId);\n\n  processUpdate(update);\n}\n\nasync function loadRemoteState() {\n  const remoteState = await invoke(new GramJs.updates.GetState());\n  if (!remoteState) return;\n\n  applyState(remoteState);\n\n  isInited = true;\n}\n\nfunction processDifference(\n  difference: GramJs.updates.Difference | GramJs.updates.DifferenceSlice | GramJs.updates.ChannelDifference,\n  channelId?: string,\n) {\n  difference.newMessages.forEach((message) => {\n    updater(new GramJs.UpdateNewMessage({\n      message,\n      pts: 0,\n      ptsCount: 0,\n    }));\n  });\n\n  processAndUpdateEntities(difference);\n\n  // Ignore `pts`/`seq` holes when applying updates from difference\n  // BUT, if we got an `UpdateChannelTooLong`, make sure to process other updates after receiving `ChannelDifference`\n  const channelTooLongIds = new Set<string>();\n\n  difference.otherUpdates.forEach((update) => {\n    const updateChannelId = getUpdateChannelId(update);\n\n    if (update instanceof GramJs.UpdateChannelTooLong) {\n      channelTooLongIds.add(getUpdateChannelId(update));\n    }\n\n    const shouldApplyImmediately = !channelTooLongIds.has(updateChannelId);\n    processUpdate(update, shouldApplyImmediately, !shouldApplyImmediately);\n  });\n\n  // Continue processing updates in queues\n  if (channelId) {\n    popPtsQueue(channelId);\n  } else {\n    popSeqQueue();\n  }\n}\n\nfunction getPtsCount(update: PtsUpdate) {\n  return 'ptsCount' in update ? update.ptsCount : 0;\n}\n\nfunction seqComparator(a: SeqUpdate, b: SeqUpdate) {\n  const seqA = 'seqStart' in a ? a.seqStart : a.seq;\n  const seqB = 'seqStart' in b ? b.seqStart : b.seq;\n\n  return seqA - seqB;\n}\n\nfunction ptsComparator(a: PtsUpdate, b: PtsUpdate) {\n  const diff = a.pts - b.pts;\n  if (diff !== 0) {\n    return diff;\n  }\n\n  return getPtsCount(b) - getPtsCount(a);\n}\n","import type {\n  ApiUpdateAuthorizationState,\n  ApiUpdateAuthorizationStateType,\n  ApiUser,\n  ApiUserFullInfo,\n} from '../../types';\n\nimport { wrapError } from '../helpers/misc';\nimport { sendApiUpdate } from '../updates/apiUpdateEmitter';\n\nconst authController: {\n  resolve?: Function;\n  reject?: Function;\n} = {};\n\nexport function onWebAuthTokenFailed() {\n  sendApiUpdate({\n    '@type': 'updateWebAuthTokenFailed',\n  });\n}\n\nexport function onRequestPhoneNumber() {\n  sendApiUpdate(buildAuthStateUpdate('authorizationStateWaitPhoneNumber'));\n\n  return new Promise<string>((resolve, reject) => {\n    authController.resolve = resolve;\n    authController.reject = reject;\n  });\n}\n\nexport function onRequestCode(isCodeViaApp = false) {\n  sendApiUpdate({\n    ...buildAuthStateUpdate('authorizationStateWaitCode'),\n    isCodeViaApp,\n  });\n\n  return new Promise<string>((resolve, reject) => {\n    authController.resolve = resolve;\n    authController.reject = reject;\n  });\n}\n\nexport function onRequestPassword(hint?: string, noReset?: boolean) {\n  sendApiUpdate({\n    ...buildAuthStateUpdate('authorizationStateWaitPassword'),\n    hint,\n    noReset,\n  });\n\n  return new Promise<string>((resolve) => {\n    authController.resolve = resolve;\n  });\n}\n\nexport function onRequestRegistration() {\n  sendApiUpdate(buildAuthStateUpdate('authorizationStateWaitRegistration'));\n\n  return new Promise<[string, string?]>((resolve) => {\n    authController.resolve = resolve;\n  });\n}\n\nexport function onRequestQrCode(qrCode: { token: Buffer; expires: number }) {\n  sendApiUpdate({\n    ...buildAuthStateUpdate('authorizationStateWaitQrCode'),\n    qrCode: {\n      token: btoa(String.fromCharCode(...qrCode.token)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, ''),\n      expires: qrCode.expires,\n    },\n  });\n\n  return new Promise<void>((resolve, reject) => {\n    authController.reject = reject;\n  });\n}\n\nexport function onAuthError(err: Error) {\n  const { messageKey } = wrapError(err);\n\n  sendApiUpdate({\n    '@type': 'updateAuthorizationError',\n    errorKey: messageKey,\n  });\n}\n\nexport function onAuthReady() {\n  sendApiUpdate(buildAuthStateUpdate('authorizationStateReady'));\n}\n\nexport function onCurrentUserUpdate(currentUser: ApiUser, currentUserFullInfo: ApiUserFullInfo) {\n  sendApiUpdate({\n    '@type': 'updateCurrentUser',\n    currentUser,\n    currentUserFullInfo,\n  });\n}\n\nexport function buildAuthStateUpdate(authorizationState: ApiUpdateAuthorizationStateType): ApiUpdateAuthorizationState {\n  return {\n    '@type': 'updateAuthorizationState',\n    authorizationState,\n  };\n}\n\nexport function provideAuthPhoneNumber(phoneNumber: string) {\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve(phoneNumber);\n}\n\nexport function provideAuthCode(code: string) {\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve(code);\n}\n\nexport function provideAuthPassword(password: string) {\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve(password);\n}\n\nexport function provideAuthRegistration(registration: { firstName: string; lastName: string }) {\n  const { firstName, lastName } = registration;\n\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve([firstName, lastName]);\n}\n\nexport function restartAuth() {\n  if (!authController.reject) {\n    return;\n  }\n\n  authController.reject(new Error('RESTART_AUTH'));\n}\n\nexport function restartAuthWithQr() {\n  if (!authController.reject) {\n    return;\n  }\n\n  authController.reject(new Error('RESTART_AUTH_WITH_QR'));\n}\n","import { ELECTRON_HOST_URL, IS_PACKAGED_ELECTRON } from '../config';\n\n// eslint-disable-next-line no-restricted-globals\nconst cacheApi = self.caches;\n\nlet isSupported: boolean | undefined;\n\nexport async function isCacheApiSupported() {\n  if (!cacheApi) return false;\n\n  isSupported = isSupported ?? await cacheApi.has('test').then(() => true).catch(() => false);\n  return isSupported;\n}\n\nexport enum Type {\n  Text,\n  Blob,\n  Json,\n  ArrayBuffer,\n}\n\nexport async function fetch(\n  cacheName: string, key: string, type: Type, isHtmlAllowed = false,\n) {\n  if (!cacheApi) {\n    return undefined;\n  }\n\n  try {\n    // To avoid the error \"Request scheme 'webdocument' is unsupported\"\n    const request = IS_PACKAGED_ELECTRON\n      ? `${ELECTRON_HOST_URL}/${key.replace(/:/g, '_')}`\n      : new Request(key.replace(/:/g, '_'));\n    const cache = await cacheApi.open(cacheName);\n    const response = await cache.match(request);\n    if (!response) {\n      return undefined;\n    }\n\n    const contentType = response.headers.get('Content-Type');\n\n    switch (type) {\n      case Type.Text:\n        return await response.text();\n      case Type.Blob: {\n        // Ignore deprecated data-uri avatars\n        if (key.startsWith('avatar') && contentType && contentType.startsWith('text')) {\n          return undefined;\n        }\n\n        const blob = await response.blob();\n        const shouldRecreate = !blob.type || (!isHtmlAllowed && blob.type.includes('html'));\n        // iOS Safari fails to preserve `type` in cache\n        let resolvedType = blob.type || contentType;\n\n        if (!(shouldRecreate && resolvedType)) {\n          return blob;\n        }\n\n        // Prevent HTML-in-video attacks (for files that were cached before fix)\n        if (!isHtmlAllowed) {\n          resolvedType = resolvedType.replace(/html/gi, '');\n        }\n\n        return new Blob([blob], { type: resolvedType });\n      }\n      case Type.Json:\n        return await response.json();\n      case Type.ArrayBuffer:\n        return await response.arrayBuffer();\n      default:\n        return undefined;\n    }\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n\nexport async function save(cacheName: string, key: string, data: AnyLiteral | Blob | ArrayBuffer | string) {\n  if (!cacheApi) {\n    return false;\n  }\n\n  try {\n    const cacheData = typeof data === 'string' || data instanceof Blob || data instanceof ArrayBuffer\n      ? data\n      : JSON.stringify(data);\n    // To avoid the error \"Request scheme 'webdocument' is unsupported\"\n    const request = IS_PACKAGED_ELECTRON\n      ? `${ELECTRON_HOST_URL}/${key.replace(/:/g, '_')}`\n      : new Request(key.replace(/:/g, '_'));\n    const response = new Response(cacheData);\n    const cache = await cacheApi.open(cacheName);\n    await cache.put(request, response);\n    return true;\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return false;\n  }\n}\n\nexport async function remove(cacheName: string, key: string) {\n  try {\n    if (!cacheApi) {\n      return undefined;\n    }\n\n    const cache = await cacheApi.open(cacheName);\n    return await cache.delete(key);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n\nexport async function clear(cacheName: string) {\n  try {\n    if (!cacheApi) {\n      return undefined;\n    }\n\n    return await cacheApi.delete(cacheName);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n","import bigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { SizeType, TelegramClient } from '../../../lib/gramjs';\nimport type { ApiOnProgress, ApiParsedMedia } from '../../types';\nimport {\n  ApiMediaFormat,\n} from '../../types';\n\nimport {\n  DOWNLOAD_WORKERS,\n  MEDIA_CACHE_DISABLED,\n  MEDIA_CACHE_MAX_BYTES,\n  MEDIA_CACHE_NAME,\n  MEDIA_CACHE_NAME_AVATARS,\n} from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { getEntityTypeById } from '../gramjsBuilders';\nimport localDb from '../localDb';\n\nconst MEDIA_ENTITY_TYPES: Set<EntityType> = new Set([\n  'sticker', 'wallpaper', 'photo', 'webDocument', 'document',\n]);\n\nconst JPEG_SIZE_TYPES = new Set(['s', 'm', 'x', 'y', 'w', 'a', 'b', 'c', 'd']);\nconst MP4_SIZES_TYPES = new Set(['u', 'v']);\n\nexport default async function downloadMedia(\n  {\n    url, mediaFormat, start, end, isHtmlAllowed,\n  }: {\n    url: string; mediaFormat: ApiMediaFormat; start?: number; end?: number; isHtmlAllowed?: boolean;\n  },\n  client: TelegramClient,\n  onProgress?: ApiOnProgress,\n) {\n  const {\n    data, mimeType, fullSize,\n  } = await download(url, client, onProgress, start, end, isHtmlAllowed) || {};\n\n  if (!data) {\n    return undefined;\n  }\n\n  const parsed = await parseMedia(data, mediaFormat, mimeType);\n  if (!parsed) {\n    return undefined;\n  }\n\n  const canCache = mediaFormat !== ApiMediaFormat.Progressive && (\n    mediaFormat !== ApiMediaFormat.BlobUrl || (parsed as Blob).size <= MEDIA_CACHE_MAX_BYTES\n  );\n\n  if (!MEDIA_CACHE_DISABLED && cacheApi && canCache) {\n    const cacheName = url.startsWith('avatar') ? MEDIA_CACHE_NAME_AVATARS : MEDIA_CACHE_NAME;\n    void cacheApi.save(cacheName, url, parsed);\n  }\n\n  const dataBlob = mediaFormat === ApiMediaFormat.Progressive ? '' : parsed as string | Blob;\n  const arrayBuffer = mediaFormat === ApiMediaFormat.Progressive ? parsed as ArrayBuffer : undefined;\n\n  return {\n    dataBlob,\n    arrayBuffer,\n    mimeType,\n    fullSize,\n  };\n}\n\nexport type EntityType = (\n  'sticker' | 'wallpaper' | 'channel' | 'chat' | 'user' | 'photo' | 'stickerSet' | 'webDocument' |\n  'document' | 'staticMap'\n);\n\nasync function download(\n  url: string,\n  client: TelegramClient,\n  onProgress?: ApiOnProgress,\n  start?: number,\n  end?: number,\n  isHtmlAllowed?: boolean,\n) {\n  const parsed = parseMediaUrl(url);\n\n  if (!parsed) return undefined;\n\n  const {\n    entityType, entityId, sizeType, params, mediaMatchType,\n  } = parsed;\n\n  if (entityType === 'staticMap') {\n    const accessHash = bigInt(entityId);\n    const parsedParams = new URLSearchParams(params);\n    const long = Number(parsedParams.get('long'));\n    const lat = Number(parsedParams.get('lat'));\n    const w = Number(parsedParams.get('w'));\n    const h = Number(parsedParams.get('h'));\n    const zoom = Number(parsedParams.get('zoom'));\n    const scale = Number(parsedParams.get('scale'));\n    const accuracyRadiusStr = parsedParams.get('accuracy_radius');\n    const accuracyRadius = accuracyRadiusStr ? Number(accuracyRadiusStr) : undefined;\n\n    const data = await client.downloadStaticMap(accessHash, long, lat, w, h, zoom, scale, accuracyRadius);\n    return {\n      mimeType: 'image/png',\n      data,\n    };\n  }\n\n  let entity: (\n    GramJs.User | GramJs.Chat | GramJs.Channel | GramJs.Photo |\n    GramJs.Message | GramJs.MessageService |\n    GramJs.Document | GramJs.StickerSet | GramJs.TypeWebDocument | undefined\n  );\n\n  switch (entityType) {\n    case 'channel':\n    case 'chat':\n      entity = localDb.chats[entityId];\n      break;\n    case 'user':\n      entity = localDb.users[entityId];\n      break;\n    case 'sticker':\n    case 'wallpaper':\n    case 'document':\n      entity = localDb.documents[entityId];\n      break;\n    case 'photo':\n      entity = localDb.photos[entityId];\n      break;\n    case 'stickerSet':\n      entity = localDb.stickerSets[entityId];\n      break;\n    case 'webDocument':\n      entity = localDb.webDocuments[entityId];\n      break;\n  }\n\n  if (!entity) {\n    return undefined;\n  }\n\n  if (MEDIA_ENTITY_TYPES.has(entityType)) {\n    const data = await client.downloadMedia(entity, {\n      sizeType, start, end, progressCallback: onProgress, workers: DOWNLOAD_WORKERS,\n    });\n    let mimeType;\n    let fullSize;\n\n    if (sizeType && JPEG_SIZE_TYPES.has(sizeType)) {\n      mimeType = 'image/jpeg';\n    } else if (sizeType && MP4_SIZES_TYPES.has(sizeType)) {\n      mimeType = 'video/mp4';\n    } else if (entity instanceof GramJs.Photo) {\n      mimeType = 'image/jpeg';\n    } else if (entity instanceof GramJs.WebDocument) {\n      mimeType = entity.mimeType;\n      fullSize = entity.size;\n    } else if (entity instanceof GramJs.Document) {\n      mimeType = entity.mimeType;\n      fullSize = entity.size.toJSNumber();\n    }\n\n    // Prevent HTML-in-video attacks\n    if (!isHtmlAllowed && mimeType) {\n      mimeType = mimeType.replace(/html/gi, '');\n    }\n\n    return { mimeType, data, fullSize };\n  } else if (entityType === 'stickerSet') {\n    const data = await client.downloadStickerSetThumb(entity as GramJs.StickerSet);\n    const mimeType = data && getMimeType(data);\n\n    return { mimeType, data };\n  } else {\n    const data = await client.downloadProfilePhoto(entity as GramJs.Chat | GramJs.User, mediaMatchType === 'profile');\n    const mimeType = data && getMimeType(data);\n\n    return { mimeType, data };\n  }\n}\n\n// eslint-disable-next-line no-async-without-await/no-async-without-await\nasync function parseMedia(\n  data: Buffer | File, mediaFormat: ApiMediaFormat, mimeType?: string,\n): Promise<ApiParsedMedia | undefined> {\n  if (data instanceof File) {\n    return data;\n  }\n\n  switch (mediaFormat) {\n    case ApiMediaFormat.BlobUrl:\n      return new Blob([data], { type: mimeType });\n    case ApiMediaFormat.Text:\n      return data.toString();\n    case ApiMediaFormat.Progressive:\n    case ApiMediaFormat.DownloadUrl:\n      return data.buffer;\n  }\n\n  return undefined;\n}\n\nfunction getMimeType(data: Uint8Array, fallbackMimeType = 'image/jpeg') {\n  if (data.length < 4) {\n    return fallbackMimeType;\n  }\n\n  let type = fallbackMimeType;\n  const signature = data.subarray(0, 4).reduce((result, byte) => result + byte.toString(16), '');\n\n  // https://en.wikipedia.org/wiki/List_of_file_signatures\n  switch (signature) {\n    case '89504e47':\n      type = 'image/png';\n      break;\n    case '47494638':\n      type = 'image/gif';\n      break;\n    case 'ffd8ffe0':\n    case 'ffd8ffe1':\n    case 'ffd8ffe2':\n    case 'ffd8ffe3':\n    case 'ffd8ffe8':\n      type = 'image/jpeg';\n      break;\n    case '52494646':\n      // In our case only webp is expected\n      type = 'image/webp';\n      break;\n  }\n\n  return type;\n}\n\nexport function parseMediaUrl(url: string) {\n  const mediaMatch = url.startsWith('staticMap')\n    ? url.match(/(staticMap):([0-9-]+)(\\?.+)/)\n    : url.startsWith('webDocument')\n      ? url.match(/(webDocument):(.+)/)\n      : url.match(\n        // eslint-disable-next-line max-len\n        /(avatar|profile|photo|stickerSet|sticker|wallpaper|document)([-\\d\\w./]+)(?::\\d+)?(\\?size=\\w+)?/,\n      );\n  if (!mediaMatch) {\n    return undefined;\n  }\n\n  const mediaMatchType = mediaMatch[1];\n  const entityId: string | number = mediaMatch[2];\n\n  let entityType: EntityType;\n  const params = mediaMatch[3];\n  const sizeType = params?.replace('?size=', '') as SizeType || undefined;\n\n  if (mediaMatch[1] === 'avatar' || mediaMatch[1] === 'profile') {\n    entityType = getEntityTypeById(entityId);\n  } else {\n    entityType = mediaMatch[1] as EntityType;\n  }\n\n  return {\n    mediaMatchType,\n    entityType,\n    entityId,\n    sizeType,\n    params,\n  };\n}\n","import type { ThreadId } from '../../types';\n\nexport class ChatAbortController extends AbortController {\n  private threads = new Map<ThreadId, AbortController>();\n\n  public getThreadSignal(threadId: ThreadId): AbortSignal {\n    let controller = this.threads.get(threadId);\n    if (!controller) {\n      controller = new AbortController();\n      this.threads.set(threadId, controller);\n    }\n    return controller.signal;\n  }\n\n  public abortThread(threadId: ThreadId, reason?: string): void {\n    this.threads.get(threadId)?.abort(reason);\n    this.threads.delete(threadId);\n  }\n\n  public abort(reason?: string): void {\n    super.abort(reason);\n    this.threads.forEach((controller) => controller.abort(reason));\n    this.threads.clear();\n  }\n}\n","import {\n  Api as GramJs,\n  sessions,\n  type Update,\n} from '../../../lib/gramjs';\nimport type { TwoFaParams } from '../../../lib/gramjs/client/2fa';\nimport TelegramClient from '../../../lib/gramjs/client/TelegramClient';\nimport { RPCError } from '../../../lib/gramjs/errors';\nimport { Logger as GramJsLogger } from '../../../lib/gramjs/extensions/index';\n\nimport type { ThreadId } from '../../../types';\nimport type {\n  ApiInitialArgs,\n  ApiMediaFormat,\n  ApiOnProgress,\n  ApiSessionData,\n} from '../../types';\n\nimport {\n  APP_CODE_NAME,\n  DEBUG, DEBUG_GRAMJS, IS_TEST, LANG_PACK, UPLOAD_WORKERS,\n} from '../../../config';\nimport { pause } from '../../../util/schedulers';\nimport {\n  buildApiMessage,\n  setMessageBuilderCurrentUserId,\n} from '../apiBuilders/messages';\nimport { buildApiPeerId } from '../apiBuilders/peers';\nimport { buildApiStory } from '../apiBuilders/stories';\nimport { buildApiUser, buildApiUserFullInfo } from '../apiBuilders/users';\nimport { buildInputPeerFromLocalDb, getEntityTypeById } from '../gramjsBuilders';\nimport {\n  addStoryToLocalDb, addUserToLocalDb,\n} from '../helpers/localDb';\nimport {\n  isResponseUpdate, log,\n} from '../helpers/misc';\nimport localDb, { clearLocalDb, type RepairInfo } from '../localDb';\nimport { sendApiUpdate } from '../updates/apiUpdateEmitter';\nimport { processAndUpdateEntities, processMessageAndUpdateThreadInfo } from '../updates/entityProcessor';\nimport {\n  getDifference,\n  init as initUpdatesManager,\n  processUpdate,\n  reset as resetUpdatesManager,\n  scheduleGetChannelDifference,\n  updateChannelState,\n} from '../updates/updateManager';\nimport {\n  onAuthError, onAuthReady, onCurrentUserUpdate, onRequestCode, onRequestPassword, onRequestPhoneNumber,\n  onRequestQrCode, onRequestRegistration, onWebAuthTokenFailed,\n} from './auth';\nimport downloadMediaWithClient, { parseMediaUrl } from './media';\n\nimport { ChatAbortController } from '../ChatAbortController';\n\nconst DEFAULT_USER_AGENT = 'Unknown UserAgent';\nconst DEFAULT_PLATFORM = 'Unknown platform';\n\nGramJsLogger.setLevel(DEBUG_GRAMJS ? 'debug' : 'warn');\n\nconst gramJsUpdateEventBuilder = { build: (update: Update) => update };\n\nconst CHAT_ABORT_CONTROLLERS = new Map<string, ChatAbortController>();\nconst ABORT_CONTROLLERS = new Map<string, AbortController>();\n\nlet client: TelegramClient;\nlet currentUserId: string | undefined;\n\nexport async function init(initialArgs: ApiInitialArgs) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START INIT API');\n  }\n\n  const {\n    userAgent, platform, sessionData, isWebmSupported, maxBufferSize, webAuthToken, dcId,\n    mockScenario, shouldForceHttpTransport, shouldAllowHttpTransport,\n    shouldDebugExportedSenders, langCode, isTestServerRequested,\n  } = initialArgs;\n\n  const session = new sessions.CallbackSession(sessionData, onSessionUpdate);\n\n  // eslint-disable-next-line no-restricted-globals\n  (self as any).isWebmSupported = isWebmSupported;\n  // eslint-disable-next-line no-restricted-globals\n  (self as any).maxBufferSize = maxBufferSize;\n\n  client = new TelegramClient(\n    session,\n    Number(process.env.TELEGRAM_API_ID),\n    process.env.TELEGRAM_API_HASH,\n    {\n      deviceModel: navigator.userAgent || userAgent || DEFAULT_USER_AGENT,\n      systemVersion: platform || DEFAULT_PLATFORM,\n      appVersion: `${APP_VERSION} ${APP_CODE_NAME}`,\n      useWSS: true,\n      additionalDcsDisabled: IS_TEST,\n      shouldDebugExportedSenders,\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      dcId,\n      langPack: LANG_PACK,\n      langCode,\n      systemLangCode: navigator.language,\n      isTestServerRequested,\n    } as any,\n  );\n\n  client.addEventHandler(handleGramJsUpdate, gramJsUpdateEventBuilder);\n\n  try {\n    if (DEBUG) {\n      log('CONNECTING');\n\n      // eslint-disable-next-line no-restricted-globals\n      (self as any).invoke = invokeRequest;\n      // eslint-disable-next-line no-restricted-globals\n      (self as any).GramJs = GramJs;\n    }\n\n    try {\n      client.setPingCallback(getDifference);\n      await client.start({\n        phoneNumber: onRequestPhoneNumber,\n        phoneCode: onRequestCode,\n        password: onRequestPassword,\n        firstAndLastNames: onRequestRegistration,\n        qrCode: onRequestQrCode,\n        onError: onAuthError,\n        initialMethod: platform === 'iOS' || platform === 'Android' ? 'phoneNumber' : 'qrCode',\n        shouldThrowIfUnauthorized: Boolean(sessionData),\n        webAuthToken,\n        webAuthTokenFailed: onWebAuthTokenFailed,\n        mockScenario,\n      });\n    } catch (err: any) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n\n      if (err.message !== 'Disconnect' && err.message !== 'Cannot send requests while disconnected') {\n        sendApiUpdate({\n          '@type': 'updateConnectionState',\n          connectionState: 'connectionStateBroken',\n        });\n\n        return;\n      }\n    }\n\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.log('>>> FINISH INIT API');\n      log('CONNECTED');\n    }\n\n    onAuthReady();\n    onSessionUpdate(session.getSessionData());\n    sendApiUpdate({ '@type': 'updateApiReady' });\n\n    initUpdatesManager(invokeRequest);\n\n    void fetchCurrentUser();\n  } catch (err) {\n    if (DEBUG) {\n      log('CONNECTING ERROR', err);\n    }\n\n    throw err;\n  }\n}\n\nexport function setIsPremium({ isPremium }: { isPremium: boolean }) {\n  client.setIsPremium(isPremium);\n}\n\nconst LOG_OUT_TIMEOUT = 2500;\nexport async function destroy(noLogOut = false, noClearLocalDb = false) {\n  if (!noLogOut && client.isConnected()) {\n    await Promise.race([\n      invokeRequest(new GramJs.auth.LogOut()),\n      pause(LOG_OUT_TIMEOUT),\n    ]);\n  }\n\n  if (!noClearLocalDb) {\n    clearLocalDb();\n    resetUpdatesManager();\n  }\n\n  await client.destroy();\n}\n\nexport async function disconnect() {\n  await client.disconnect();\n}\n\nexport function getClient() {\n  return client;\n}\n\nfunction onSessionUpdate(sessionData?: ApiSessionData) {\n  sendApiUpdate({\n    '@type': 'updateSession',\n    sessionData,\n  });\n}\n\ntype UpdateConfig = GramJs.UpdateConfig & { _entities?: (GramJs.TypeUser | GramJs.TypeChat)[] };\n\nexport function handleGramJsUpdate(update: any) {\n  processUpdate(update);\n\n  if (update instanceof GramJs.UpdatesTooLong) {\n    void handleTerminatedSession();\n  } else {\n    const updates = 'updates' in update ? update.updates : [update];\n    updates.forEach((nestedUpdate: any) => {\n      if (!(nestedUpdate instanceof GramJs.UpdateConfig)) return;\n      // eslint-disable-next-line no-underscore-dangle\n      const currentUser = (nestedUpdate as UpdateConfig)._entities\n        ?.find((entity) => entity instanceof GramJs.User && buildApiPeerId(entity.id, 'user') === currentUserId);\n      if (!(currentUser instanceof GramJs.User)) return;\n\n      setIsPremium({ isPremium: Boolean(currentUser.premium) });\n    });\n  }\n}\n\ntype InvokeRequestParams = {\n  shouldThrow?: boolean;\n  shouldIgnoreUpdates?: boolean;\n  dcId?: number;\n  shouldIgnoreErrors?: boolean;\n  abortControllerChatId?: string;\n  abortControllerThreadId?: ThreadId;\n  abortControllerGroup?: 'call';\n  shouldRetryOnTimeout?: boolean;\n};\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  params?: InvokeRequestParams & { shouldReturnTrue?: false },\n): Promise<T['__response'] | undefined>;\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  params?: InvokeRequestParams & { shouldReturnTrue: true },\n): Promise<true | undefined>;\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  params: InvokeRequestParams & { shouldReturnTrue?: boolean } = {},\n) {\n  const {\n    shouldThrow, shouldIgnoreUpdates, dcId, shouldIgnoreErrors, abortControllerChatId, abortControllerThreadId,\n    shouldRetryOnTimeout, abortControllerGroup,\n  } = params;\n  const shouldReturnTrue = Boolean(params.shouldReturnTrue);\n\n  let abortSignal: AbortSignal | undefined;\n  if (abortControllerChatId) {\n    let controller = CHAT_ABORT_CONTROLLERS.get(abortControllerChatId);\n    if (!controller) {\n      controller = new ChatAbortController();\n      CHAT_ABORT_CONTROLLERS.set(abortControllerChatId, controller);\n    }\n\n    abortSignal = abortControllerThreadId ? controller.getThreadSignal(abortControllerThreadId) : controller.signal;\n  }\n\n  if (abortControllerGroup) {\n    let controller = ABORT_CONTROLLERS.get(abortControllerGroup);\n    if (!controller) {\n      controller = new AbortController();\n      ABORT_CONTROLLERS.set(abortControllerGroup, controller);\n    }\n    abortSignal = controller.signal;\n  }\n\n  try {\n    if (DEBUG) {\n      log('INVOKE', request.className);\n    }\n\n    const result = await client.invoke(request, dcId, abortSignal, shouldRetryOnTimeout);\n\n    processAndUpdateEntities(result);\n\n    if (DEBUG) {\n      log('RESPONSE', request.className, result);\n    }\n\n    if (!shouldIgnoreUpdates && isResponseUpdate(result)) {\n      processUpdate(result);\n    }\n\n    return shouldReturnTrue ? result && true : result;\n  } catch (err: any) {\n    if (shouldIgnoreErrors) return undefined;\n    if (DEBUG) {\n      log('INVOKE ERROR', request.className);\n      // eslint-disable-next-line no-console\n      console.debug('invokeRequest failed with payload', request);\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n\n    if (shouldThrow) {\n      throw err;\n    }\n\n    dispatchErrorUpdate(err, request);\n\n    return undefined;\n  }\n}\n\nexport function invokeRequestBeacon<T extends GramJs.AnyRequest>(\n  request: T,\n  dcId?: number,\n) {\n  if (DEBUG) {\n    log('BEACON', request.className);\n  }\n\n  client.invokeBeacon(request, dcId);\n}\n\nexport async function downloadMedia(\n  args: {\n    url: string; mediaFormat: ApiMediaFormat; start?: number; end?: number; isHtmlAllowed?: boolean;\n  },\n  onProgress?: ApiOnProgress,\n) {\n  try {\n    return (await downloadMediaWithClient(args, client, onProgress));\n  } catch (err: unknown) {\n    if (err instanceof RPCError) {\n      if (err.errorMessage.startsWith('FILE_REFERENCE')) {\n        const isFileReferenceRepaired = await repairFileReference({ url: args.url });\n        if (isFileReferenceRepaired) {\n          return downloadMediaWithClient(args, client, onProgress);\n        }\n\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error('Failed to repair file reference', args.url);\n        }\n      }\n\n      if (err.errorMessage === 'FILE_ID_INVALID' && args.url.includes('avatar')) {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.warn('Inaccessible avatar image', args.url);\n        }\n        return undefined;\n      }\n    }\n\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Failed to download media', args.url, err);\n    }\n\n    throw err;\n  }\n}\n\nexport function uploadFile(file: File, onProgress?: ApiOnProgress) {\n  return client.uploadFile({ file, onProgress, workers: UPLOAD_WORKERS });\n}\n\nexport function updateTwoFaSettings(params: TwoFaParams) {\n  return client.updateTwoFaSettings(params);\n}\n\nexport function getTmpPassword(currentPassword: string, ttl?: number) {\n  return client.getTmpPassword(currentPassword, ttl);\n}\n\nexport function getCurrentPassword(currentPassword?: string) {\n  return client.getCurrentPassword(currentPassword);\n}\n\nexport function abortChatRequests(params: { chatId: string; threadId?: ThreadId }) {\n  const { chatId, threadId } = params;\n  const controller = CHAT_ABORT_CONTROLLERS.get(chatId);\n  if (!threadId) {\n    controller?.abort('Chat change');\n    CHAT_ABORT_CONTROLLERS.delete(chatId);\n    return;\n  }\n\n  controller?.abortThread(threadId, 'Thread change');\n}\n\nexport function abortRequestGroup(group: string) {\n  ABORT_CONTROLLERS.get(group)?.abort();\n  ABORT_CONTROLLERS.delete(group);\n}\n\nexport async function fetchCurrentUser() {\n  const userFull = await invokeRequest(new GramJs.users.GetFullUser({\n    id: new GramJs.InputUserSelf(),\n  }));\n\n  if (!userFull || !(userFull.users[0] instanceof GramJs.User)) {\n    return;\n  }\n\n  const user = userFull.users[0];\n\n  addUserToLocalDb(user);\n  const currentUserFullInfo = buildApiUserFullInfo(userFull);\n  const currentUser = buildApiUser(user)!;\n\n  setMessageBuilderCurrentUserId(currentUser.id);\n  onCurrentUserUpdate(currentUser, currentUserFullInfo);\n\n  currentUserId = currentUser.id;\n  setIsPremium({ isPremium: Boolean(currentUser.isPremium) });\n}\n\nexport function dispatchErrorUpdate<T extends GramJs.AnyRequest>(err: Error, request: T) {\n  const message = err instanceof RPCError ? err.errorMessage : err.message;\n  const isSlowMode = message === 'FLOOD' && (\n    request instanceof GramJs.messages.SendMessage\n    || request instanceof GramJs.messages.SendMedia\n    || request instanceof GramJs.messages.SendMultiMedia\n  );\n\n  sendApiUpdate({\n    '@type': 'error',\n    error: {\n      message,\n      isSlowMode,\n      hasErrorKey: true,\n    },\n  });\n}\n\nasync function handleTerminatedSession() {\n  try {\n    await invokeRequest(new GramJs.users.GetFullUser({\n      id: new GramJs.InputUserSelf(),\n    }), {\n      shouldThrow: true,\n    });\n  } catch (err: any) {\n    if (err.errorMessage === 'AUTH_KEY_UNREGISTERED' || err.errorMessage === 'SESSION_REVOKED') {\n      sendApiUpdate({\n        '@type': 'updateConnectionState',\n        connectionState: 'connectionStateBroken',\n      });\n    }\n  }\n}\n\nexport async function repairFileReference({\n  url,\n}: {\n  url: string;\n}) {\n  const parsed = parseMediaUrl(url);\n\n  if (!parsed) return undefined;\n\n  const {\n    entityId, mediaMatchType,\n  } = parsed;\n\n  if (mediaMatchType === 'document' || mediaMatchType === 'photo' || mediaMatchType === 'webDocument') {\n    const entity = mediaMatchType === 'document'\n      ? localDb.documents[entityId] : mediaMatchType === 'webDocument'\n        ? localDb.webDocuments[entityId] : localDb.photos[entityId];\n    if (!entity) return false;\n    const repairableEntity = entity as RepairInfo;\n    if (!repairableEntity.localRepairInfo) return false;\n    const { localRepairInfo } = repairableEntity;\n\n    if (localRepairInfo.type === 'story') {\n      const result = await repairStoryMedia(localRepairInfo.peerId, localRepairInfo.id);\n      return result;\n    }\n\n    if (localRepairInfo.type === 'message') {\n      const result = await repairMessageMedia(localRepairInfo.peerId, localRepairInfo.id);\n      return result;\n    }\n  }\n\n  return false;\n}\n\nasync function repairMessageMedia(peerId: string, messageId: number) {\n  const type = getEntityTypeById(peerId);\n  const peer = buildInputPeerFromLocalDb(peerId);\n  if (!peer) return false;\n  const result = await invokeRequest(\n    type === 'channel'\n      ? new GramJs.channels.GetMessages({\n        channel: peer,\n        id: [new GramJs.InputMessageID({ id: messageId })],\n      })\n      : new GramJs.messages.GetMessages({\n        id: [new GramJs.InputMessageID({ id: messageId })],\n      }),\n    {\n      shouldIgnoreErrors: true,\n    },\n  );\n\n  if (!result || result instanceof GramJs.messages.MessagesNotModified) return false;\n\n  if (peer && 'pts' in result) {\n    updateChannelState(peerId, result.pts);\n  }\n\n  const message = result.messages[0];\n  if (message instanceof GramJs.MessageEmpty) return false;\n\n  processMessageAndUpdateThreadInfo(message);\n\n  const apiMessage = buildApiMessage(message);\n  if (apiMessage) {\n    sendApiUpdate({\n      '@type': 'updateMessage',\n      chatId: apiMessage.chatId,\n      id: apiMessage.id,\n      message: apiMessage,\n    });\n  }\n  return true;\n}\n\nasync function repairStoryMedia(peerId: string, storyId: number) {\n  const peer = buildInputPeerFromLocalDb(peerId);\n  if (!peer) return false;\n\n  const result = await invokeRequest(new GramJs.stories.GetStoriesByID({\n    peer,\n    id: [storyId],\n  }), {\n    shouldIgnoreErrors: true,\n  });\n  if (!result) return false;\n\n  result.stories.forEach((story) => {\n    const apiStory = buildApiStory(peerId, story);\n    if (!apiStory || 'isDeleted' in apiStory) return;\n\n    addStoryToLocalDb(story, peerId);\n    sendApiUpdate({\n      '@type': 'updateStory',\n      peerId,\n      story: apiStory,\n    });\n  });\n  return true;\n}\n\nexport function setForceHttpTransport(forceHttpTransport: boolean) {\n  client.setForceHttpTransport(forceHttpTransport);\n}\n\nexport function setAllowHttpTransport(allowHttpTransport: boolean) {\n  client.setAllowHttpTransport(allowHttpTransport);\n}\n\nexport function setShouldDebugExportedSenders(value: boolean) {\n  client.setShouldDebugExportedSenders(value);\n}\n\nexport function requestChannelDifference(channelId: string) {\n  scheduleGetChannelDifference(channelId);\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiPeer, ApiPhoto, ApiReportReason,\n} from '../../types';\n\nimport { buildApiChatLink } from '../apiBuilders/misc';\nimport { buildInputPeer, buildInputPhoto, buildInputReportReason } from '../gramjsBuilders';\nimport { invokeRequest } from './client';\n\nexport async function reportPeer({\n  peer,\n  reason,\n  description,\n}: {\n  peer: ApiPeer; reason: ApiReportReason; description?: string;\n}) {\n  const result = await invokeRequest(new GramJs.account.ReportPeer({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    reason: buildInputReportReason(reason),\n    message: description,\n  }));\n\n  return result;\n}\n\nexport async function reportProfilePhoto({\n  peer,\n  photo,\n  reason,\n  description,\n}: {\n  peer: ApiPeer; photo: ApiPhoto; reason: ApiReportReason; description?: string;\n}) {\n  const photoId = buildInputPhoto(photo);\n  if (!photoId) return undefined;\n\n  const result = await invokeRequest(new GramJs.account.ReportProfilePhoto({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    photoId,\n    reason: buildInputReportReason(reason),\n    message: description,\n  }));\n\n  return result;\n}\n\nexport async function changeSessionSettings({\n  hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n}: {\n  hash: string; areCallsEnabled?: boolean; areSecretChatsEnabled?: boolean; isConfirmed?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.account.ChangeAuthorizationSettings({\n    hash: BigInt(hash),\n    ...(areCallsEnabled !== undefined ? { callRequestsDisabled: !areCallsEnabled } : undefined),\n    ...(areSecretChatsEnabled !== undefined ? { encryptedRequestsDisabled: !areSecretChatsEnabled } : undefined),\n    ...(isConfirmed && { confirmed: isConfirmed }),\n  }));\n\n  return result;\n}\n\nexport async function changeSessionTtl({\n  days,\n}: {\n  days: number;\n}) {\n  const result = await invokeRequest(new GramJs.account.SetAuthorizationTTL({\n    authorizationTtlDays: days,\n  }));\n\n  return result;\n}\n\nexport async function resolveBusinessChatLink({ slug } : { slug: string }) {\n  const result = await invokeRequest(new GramJs.account.ResolveBusinessChatLink({\n    slug,\n  }), {\n    shouldIgnoreErrors: true,\n  });\n  if (!result) return undefined;\n\n  const chatLink = buildApiChatLink(result);\n\n  return {\n    chatLink,\n  };\n}\n\nexport function toggleSponsoredMessages({\n  enabled,\n}: {\n  enabled: boolean;\n}) {\n  return invokeRequest(new GramJs.account.ToggleSponsoredMessages({\n    enabled,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport { RPCError } from '../../../lib/gramjs/errors';\n\nimport type {\n  ApiChat,\n  ApiChatAdminRights,\n  ApiChatBannedRights,\n  ApiChatFolder,\n  ApiChatFullInfo,\n  ApiChatReactions,\n  ApiDraft,\n  ApiGroupCall,\n  ApiMessage,\n  ApiMissingInvitedUser,\n  ApiPeer,\n  ApiPhoto,\n  ApiTopic,\n  ApiUser,\n  ApiUserStatus,\n} from '../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  DEBUG,\n  GENERAL_TOPIC_ID,\n  GLOBAL_SEARCH_CONTACTS_LIMIT,\n  MAX_INT_32,\n  MEMBERS_LOAD_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TOPICS_SLICE,\n} from '../../../config';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  buildApiChatBotCommands,\n  buildApiChatFolder,\n  buildApiChatFolderFromSuggested,\n  buildApiChatFromDialog,\n  buildApiChatFromPreview,\n  buildApiChatFromSavedDialog,\n  buildApiChatInviteInfo,\n  buildApiChatlistExportedInvite,\n  buildApiChatlistInvite,\n  buildApiChatReactions,\n  buildApiChatSettings,\n  buildApiMissingInvitedUser,\n  buildApiTopic,\n  buildChatMember,\n  buildChatMembers,\n  getPeerKey,\n} from '../apiBuilders/chats';\nimport { buildApiBotVerification, buildApiPhoto } from '../apiBuilders/common';\nimport { buildApiMessage, buildMessageDraft } from '../apiBuilders/messages';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from '../apiBuilders/peers';\nimport { buildStickerSet } from '../apiBuilders/symbols';\nimport { buildApiUser, buildApiUserStatuses } from '../apiBuilders/users';\nimport {\n  buildChatAdminRights,\n  buildChatBannedRights,\n  buildFilterFromApiFolder,\n  buildInputChatReactions,\n  buildInputEntity,\n  buildInputPeer,\n  buildInputPhoto,\n  buildInputReplyTo,\n  buildMtpMessageEntity,\n  generateRandomBigInt,\n} from '../gramjsBuilders';\nimport {\n  addPhotoToLocalDb,\n} from '../helpers/localDb';\nimport { isChatFolder } from '../helpers/misc';\nimport { scheduleMutedChatUpdate } from '../scheduleUnmute';\nimport { sendApiUpdate } from '../updates/apiUpdateEmitter';\nimport {\n  applyState, processAffectedHistory, updateChannelState,\n} from '../updates/updateManager';\nimport { handleGramJsUpdate, invokeRequest, uploadFile } from './client';\n\ntype FullChatData = {\n  fullInfo: ApiChatFullInfo;\n  chats: ApiChat[];\n  userStatusesById: { [userId: string]: ApiUserStatus };\n  groupCall?: Partial<ApiGroupCall>;\n  membersCount?: number;\n  isForumAsMessages?: true;\n};\n\ntype ChatListData = {\n  chatIds: string[];\n  chats: ApiChat[];\n  users: ApiUser[];\n  userStatusesById: Record<string, ApiUserStatus>;\n  draftsById: Record<string, ApiDraft>;\n  orderedPinnedIds: string[] | undefined;\n  totalChatCount: number;\n  messages: ApiMessage[];\n  lastMessageByChatId: Record<string, number>;\n  nextOffsetId?: number;\n  nextOffsetPeerId?: string;\n  nextOffsetDate?: number;\n};\n\nexport async function fetchChats({\n  limit,\n  offsetDate,\n  offsetPeer,\n  offsetId,\n  archived,\n  withPinned,\n  lastLocalServiceMessageId,\n}: {\n  limit: number;\n  offsetDate?: number;\n  offsetPeer?: ApiPeer;\n  offsetId?: number;\n  archived?: boolean;\n  withPinned?: boolean;\n  lastLocalServiceMessageId?: number;\n}): Promise<ChatListData | undefined> {\n  const peer = (offsetPeer && buildInputPeer(offsetPeer.id, offsetPeer.accessHash)) || new GramJs.InputPeerEmpty();\n  const result = await invokeRequest(new GramJs.messages.GetDialogs({\n    offsetPeer: peer,\n    offsetId,\n    limit,\n    offsetDate,\n    folderId: archived ? ARCHIVED_FOLDER_ID : undefined,\n    ...(withPinned && { excludePinned: true }),\n  }));\n  const resultPinned = withPinned\n    ? await invokeRequest(new GramJs.messages.GetPinnedDialogs({\n      folderId: archived ? ARCHIVED_FOLDER_ID : undefined,\n    }))\n    : undefined;\n\n  if (!result || result instanceof GramJs.messages.DialogsNotModified) {\n    return undefined;\n  }\n\n  const messages = (resultPinned ? resultPinned.messages : [])\n    .concat(result.messages)\n    .map(buildApiMessage)\n    .filter(Boolean);\n\n  const peersByKey = preparePeers(result);\n  if (resultPinned) {\n    Object.assign(peersByKey, preparePeers(resultPinned, peersByKey));\n  }\n\n  const chats: ApiChat[] = [];\n  const draftsById: Record<string, ApiDraft> = {};\n\n  const dialogs = (resultPinned?.dialogs || []).concat(result.dialogs);\n\n  const orderedPinnedIds: string[] = [];\n  const lastMessageByChatId: Record<string, number> = {};\n\n  dialogs.forEach((dialog) => {\n    if (\n      !(dialog instanceof GramJs.Dialog)\n      // This request can return dialogs not belonging to specified folder\n      || (!archived && dialog.folderId === ARCHIVED_FOLDER_ID)\n      || (archived && dialog.folderId !== ARCHIVED_FOLDER_ID)\n    ) {\n      return;\n    }\n\n    const peerEntity = peersByKey[getPeerKey(dialog.peer)];\n    const chat = buildApiChatFromDialog(dialog, peerEntity);\n    lastMessageByChatId[chat.id] = dialog.topMessage;\n\n    if (dialog.pts) {\n      updateChannelState(chat.id, dialog.pts);\n    }\n\n    if (\n      chat.id === SERVICE_NOTIFICATIONS_USER_ID\n      && lastLocalServiceMessageId\n      && (lastLocalServiceMessageId > dialog.topMessage)\n    ) {\n      lastMessageByChatId[chat.id] = lastLocalServiceMessageId;\n    }\n\n    chat.isListed = true;\n\n    chats.push(chat);\n\n    scheduleMutedChatUpdate(chat.id, chat.muteUntil, sendApiUpdate);\n\n    if (withPinned && dialog.pinned) {\n      orderedPinnedIds.push(chat.id);\n    }\n\n    if (dialog.draft) {\n      const draft = buildMessageDraft(dialog.draft);\n      if (draft) {\n        draftsById[chat.id] = draft;\n      }\n    }\n  });\n\n  const chatIds = chats.map((chat) => chat.id);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const userStatusesById = buildApiUserStatuses((resultPinned?.users || []).concat(result.users));\n\n  let totalChatCount: number;\n  if (result instanceof GramJs.messages.DialogsSlice) {\n    totalChatCount = result.count;\n  } else {\n    totalChatCount = chatIds.length;\n  }\n\n  const lastDialog = chats[chats.length - 1];\n  const lastMessageId = lastMessageByChatId[lastDialog?.id];\n  const nextOffsetId = lastMessageId;\n  const nextOffsetPeerId = lastDialog?.id;\n  const nextOffsetDate = messages.reverse()\n    .find((message) => message.chatId === lastDialog?.id && message.id === lastMessageId)?.date;\n\n  return {\n    chatIds,\n    chats,\n    users,\n    userStatusesById,\n    draftsById,\n    orderedPinnedIds: withPinned ? orderedPinnedIds : undefined,\n    totalChatCount,\n    lastMessageByChatId,\n    messages,\n    nextOffsetId,\n    nextOffsetPeerId,\n    nextOffsetDate,\n  };\n}\n\nexport async function fetchSavedChats({\n  limit,\n  offsetDate,\n  offsetPeer,\n  offsetId,\n  withPinned,\n}: {\n  limit: number;\n  offsetDate?: number;\n  offsetPeer?: ApiPeer;\n  offsetId?: number;\n  withPinned?: boolean;\n}): Promise<ChatListData | undefined> {\n  const peer = (offsetPeer && buildInputPeer(offsetPeer.id, offsetPeer.accessHash)) || new GramJs.InputPeerEmpty();\n  const result = await invokeRequest(new GramJs.messages.GetSavedDialogs({\n    offsetPeer: peer,\n    offsetId,\n    limit,\n    offsetDate,\n    ...(withPinned && { excludePinned: true }),\n  }));\n  const resultPinned = withPinned\n    ? await invokeRequest(new GramJs.messages.GetPinnedSavedDialogs())\n    : undefined;\n\n  if (!result || result instanceof GramJs.messages.SavedDialogsNotModified) {\n    return undefined;\n  }\n\n  const hasPinned = resultPinned && !(resultPinned instanceof GramJs.messages.SavedDialogsNotModified);\n\n  const messages = (hasPinned ? resultPinned.messages : [])\n    .concat(result.messages)\n    .map(buildApiMessage)\n    .filter(Boolean);\n\n  const peersByKey = preparePeers(result);\n  if (hasPinned) {\n    Object.assign(peersByKey, preparePeers(resultPinned, peersByKey));\n  }\n\n  const dialogs = (hasPinned ? resultPinned.dialogs : []).concat(result.dialogs);\n\n  const chatIds: string[] = [];\n  const orderedPinnedIds: string[] = [];\n  const lastMessageByChatId: Record<string, number> = {};\n\n  const chats: ApiChat[] = [];\n\n  dialogs.forEach((dialog) => {\n    const peerEntity = peersByKey[getPeerKey(dialog.peer)];\n    const chat = buildApiChatFromSavedDialog(dialog, peerEntity);\n    const chatId = getApiChatIdFromMtpPeer(dialog.peer);\n\n    chatIds.push(chatId);\n    if (withPinned && dialog.pinned) {\n      orderedPinnedIds.push(chatId);\n    }\n\n    lastMessageByChatId[chatId] = dialog.topMessage;\n\n    chats.push(chat);\n  });\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const userStatusesById = buildApiUserStatuses((hasPinned ? resultPinned.users : [])\n    .concat(result.users));\n\n  let totalChatCount: number;\n  if (result instanceof GramJs.messages.SavedDialogsSlice) {\n    totalChatCount = result.count;\n  } else {\n    totalChatCount = chatIds.length;\n  }\n\n  const lastDialog = chats[chats.length - 1];\n  const lastMessageId = lastMessageByChatId[lastDialog?.id];\n  const nextOffsetId = lastMessageId;\n  const nextOffsetPeerId = lastDialog?.id;\n  const nextOffsetDate = messages.reverse()\n    .find((message) => message.chatId === lastDialog?.id && message.id === lastMessageId)?.date;\n\n  return {\n    chatIds,\n    chats,\n    users,\n    userStatusesById,\n    orderedPinnedIds: withPinned ? orderedPinnedIds : undefined,\n    totalChatCount,\n    lastMessageByChatId,\n    messages,\n    draftsById: {},\n    nextOffsetId,\n    nextOffsetPeerId,\n    nextOffsetDate,\n  };\n}\n\nexport function fetchFullChat(chat: ApiChat) {\n  const { id, accessHash } = chat;\n\n  const input = buildInputEntity(id, accessHash);\n\n  return input instanceof GramJs.InputChannel\n    ? getFullChannelInfo(chat)\n    : getFullChatInfo(id);\n}\n\nexport async function fetchChatSettings(chat: ApiChat) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetPeerSettings({\n    peer: buildInputPeer(id, accessHash),\n  }), {\n    abortControllerChatId: id,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    settings: buildApiChatSettings(result.settings),\n  };\n}\n\nexport async function searchChats({ query }: { query: string }) {\n  const result = await invokeRequest(new GramJs.contacts.Search({ q: query, limit: GLOBAL_SEARCH_CONTACTS_LIMIT }));\n  if (!result) {\n    return undefined;\n  }\n\n  const accountPeerIds = result.myResults.map(getApiChatIdFromMtpPeer);\n  const globalPeerIds = result.results.map(getApiChatIdFromMtpPeer)\n    .filter((id) => !accountPeerIds.includes(id));\n\n  return {\n    accountResultIds: accountPeerIds,\n    globalResultIds: globalPeerIds,\n  };\n}\n\nexport async function fetchChat({\n  type, user,\n}: {\n  type: 'user' | 'self' | 'support'; user?: ApiUser;\n}) {\n  let mtpUser: GramJs.User | undefined;\n\n  if (type === 'self' || type === 'user') {\n    const result = await invokeRequest(new GramJs.users.GetUsers({\n      id: [\n        type === 'user' && user\n          ? buildInputEntity(user.id, user.accessHash) as GramJs.InputUser\n          : new GramJs.InputUserSelf(),\n      ],\n    }));\n    if (!result || !result.length) {\n      return undefined;\n    }\n\n    [mtpUser] = result;\n  } else if (type === 'support') {\n    const result = await invokeRequest(new GramJs.help.GetSupport());\n    if (!result || !result.user) {\n      return undefined;\n    }\n\n    mtpUser = result.user;\n  }\n\n  const chat = buildApiChatFromPreview(mtpUser!, type === 'support');\n  if (!chat) {\n    return undefined;\n  }\n\n  sendApiUpdate({\n    '@type': 'updateChat',\n    id: chat.id,\n    chat,\n  });\n\n  return { chatId: chat.id };\n}\n\nexport async function requestChatUpdate({\n  chat,\n  lastLocalMessage,\n  noLastMessage,\n}: {\n  chat: ApiChat; lastLocalMessage?: ApiMessage; noLastMessage?: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetPeerDialogs({\n    peers: [new GramJs.InputDialogPeer({\n      peer: buildInputPeer(id, accessHash),\n    })],\n  }));\n\n  if (!result) {\n    return;\n  }\n\n  const dialog = result.dialogs[0];\n  if (!dialog || !(dialog instanceof GramJs.Dialog)) {\n    return;\n  }\n\n  const peersByKey = preparePeers(result);\n  const peerEntity = peersByKey[getPeerKey(dialog.peer)];\n  if (!peerEntity) {\n    return;\n  }\n\n  const lastRemoteMessage = buildApiMessage(result.messages[0]);\n\n  const lastMessage = lastLocalMessage && (!lastRemoteMessage || (lastLocalMessage.date > lastRemoteMessage.date))\n    ? lastLocalMessage\n    : lastRemoteMessage;\n\n  const chatUpdate = buildApiChatFromDialog(dialog, peerEntity);\n\n  sendApiUpdate({\n    '@type': 'updateChat',\n    id,\n    chat: chatUpdate,\n  });\n\n  if (!noLastMessage && lastMessage) {\n    sendApiUpdate({\n      '@type': 'updateChatLastMessage',\n      id,\n      lastMessage,\n    });\n  }\n\n  applyState(result.state);\n\n  scheduleMutedChatUpdate(chatUpdate.id, chatUpdate.muteUntil, sendApiUpdate);\n}\n\nexport function saveDraft({\n  chat,\n  draft,\n}: {\n  chat: ApiChat;\n  draft?: ApiDraft;\n}) {\n  return invokeRequest(new GramJs.messages.SaveDraft({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    message: draft?.text?.text || '',\n    entities: draft?.text?.entities?.map(buildMtpMessageEntity),\n    replyTo: draft?.replyInfo && buildInputReplyTo(draft.replyInfo),\n  }));\n}\n\nasync function getFullChatInfo(chatId: string): Promise<FullChatData | undefined> {\n  const result = await invokeRequest(new GramJs.messages.GetFullChat({\n    chatId: buildInputEntity(chatId) as BigInt.BigInteger,\n  }));\n\n  if (!result || !(result.fullChat instanceof GramJs.ChatFull)) {\n    return undefined;\n  }\n\n  const {\n    about,\n    participants,\n    exportedInvite,\n    botInfo,\n    call,\n    availableReactions,\n    recentRequesters,\n    requestsPending,\n    chatPhoto,\n    translationsDisabled,\n    reactionsLimit,\n    hasScheduled,\n  } = result.fullChat;\n\n  if (chatPhoto) {\n    addPhotoToLocalDb(chatPhoto);\n  }\n\n  const members = buildChatMembers(participants);\n  const adminMembers = members ? members.filter(({ isAdmin, isOwner }) => isAdmin || isOwner) : undefined;\n  const botCommands = botInfo ? buildApiChatBotCommands(botInfo) : undefined;\n  const inviteLink = exportedInvite instanceof GramJs.ChatInviteExported ? exportedInvite.link : undefined;\n  const userStatusesById = buildApiUserStatuses(result.users);\n  const chats = result.chats.map((chat) => buildApiChatFromPreview(chat)).filter(Boolean);\n\n  return {\n    fullInfo: {\n      ...(chatPhoto instanceof GramJs.Photo && { profilePhoto: buildApiPhoto(chatPhoto) }),\n      about,\n      members,\n      adminMembersById: adminMembers ? buildCollectionByKey(adminMembers, 'userId') : undefined,\n      canViewMembers: true,\n      botCommands,\n      inviteLink,\n      groupCallId: call?.id.toString(),\n      enabledReactions: buildApiChatReactions(availableReactions),\n      reactionsLimit,\n      requestsPending,\n      recentRequesterIds: recentRequesters?.map((userId) => buildApiPeerId(userId, 'user')),\n      isTranslationDisabled: translationsDisabled,\n      isPreHistoryHidden: true,\n      hasScheduledMessages: hasScheduled,\n    },\n    chats,\n    userStatusesById,\n    groupCall: call ? {\n      chatId,\n      isLoaded: false,\n      id: call.id.toString(),\n      accessHash: call.accessHash.toString(),\n      connectionState: 'disconnected',\n      participantsCount: 0,\n      version: 0,\n      participants: {},\n    } : undefined,\n    membersCount: members?.length,\n  };\n}\n\nasync function getFullChannelInfo(\n  chat: ApiChat,\n): Promise<FullChatData | undefined> {\n  const { id, adminRights } = chat;\n  const accessHash = chat.accessHash!;\n  const result = await invokeRequest(new GramJs.channels.GetFullChannel({\n    channel: buildInputEntity(id, accessHash) as GramJs.InputChannel,\n  }));\n\n  if (!result || !(result.fullChat instanceof GramJs.ChannelFull)) {\n    return undefined;\n  }\n\n  const {\n    about,\n    onlineCount,\n    exportedInvite,\n    slowmodeSeconds,\n    slowmodeNextSendDate,\n    migratedFromChatId,\n    migratedFromMaxId,\n    canViewParticipants,\n    canViewStats,\n    linkedChatId,\n    hiddenPrehistory,\n    call,\n    botInfo,\n    availableReactions,\n    reactionsLimit,\n    defaultSendAs,\n    requestsPending,\n    recentRequesters,\n    statsDc,\n    participantsCount,\n    stickerset,\n    chatPhoto,\n    participantsHidden,\n    translationsDisabled,\n    storiesPinnedAvailable,\n    viewForumAsMessages,\n    emojiset,\n    boostsApplied,\n    boostsUnrestrict,\n    botVerification,\n    canViewRevenue: canViewMonetization,\n    paidReactionsAvailable,\n    hasScheduled,\n    stargiftsCount,\n    stargiftsAvailable,\n  } = result.fullChat;\n\n  if (chatPhoto) {\n    addPhotoToLocalDb(chatPhoto);\n  }\n\n  const inviteLink = exportedInvite instanceof GramJs.ChatInviteExported\n    ? exportedInvite.link\n    : undefined;\n\n  const { members, userStatusesById } = (canViewParticipants && await fetchMembers(id, accessHash)) || {};\n  const { members: kickedMembers, userStatusesById: bannedStatusesById } = (\n    canViewParticipants && adminRights && await fetchMembers(id, accessHash, 'kicked')\n  ) || {};\n  const { members: adminMembers, userStatusesById: adminStatusesById } = (\n    canViewParticipants && await fetchMembers(id, accessHash, 'admin')\n  ) || {};\n  const botCommands = botInfo ? buildApiChatBotCommands(botInfo) : undefined;\n  const memberInfoRequest = !chat.isNotJoined && chat.type === 'chatTypeChannel'\n    ? await fetchMember({ chat }) : undefined;\n  const memberInfo = memberInfoRequest?.member;\n  const joinInfo = memberInfo?.joinedDate ? {\n    joinedDate: memberInfo.joinedDate,\n    inviter: memberInfo.inviterId,\n    isViaRequest: memberInfo.isViaRequest,\n  } : undefined;\n\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  if (result?.chats?.length > 1) {\n    const [, mtpLinkedChat] = result.chats;\n    const linkedChat = buildApiChatFromPreview(mtpLinkedChat);\n    if (linkedChat) {\n      sendApiUpdate({\n        '@type': 'updateChat',\n        id: linkedChat.id,\n        chat: linkedChat,\n      });\n    }\n  }\n\n  if (result.fullChat.pts) {\n    updateChannelState(chat.id, result.fullChat.pts);\n  }\n\n  const statusesById = {\n    ...userStatusesById,\n    ...bannedStatusesById,\n    ...adminStatusesById,\n  };\n\n  return {\n    fullInfo: {\n      ...(chatPhoto instanceof GramJs.Photo && { profilePhoto: buildApiPhoto(chatPhoto) }),\n      about,\n      onlineCount,\n      inviteLink,\n      slowMode: slowmodeSeconds ? {\n        seconds: slowmodeSeconds,\n        nextSendDate: slowmodeNextSendDate,\n      } : undefined,\n      migratedFrom: migratedFromChatId ? {\n        chatId: buildApiPeerId(migratedFromChatId, 'chat'),\n        maxMessageId: migratedFromMaxId,\n      } : undefined,\n      canViewMembers: canViewParticipants,\n      canViewStatistics: canViewStats,\n      canViewMonetization,\n      isPreHistoryHidden: hiddenPrehistory,\n      joinInfo,\n      members,\n      kickedMembers,\n      adminMembersById: adminMembers ? buildCollectionByKey(adminMembers, 'userId') : undefined,\n      groupCallId: call ? String(call.id) : undefined,\n      linkedChatId: linkedChatId ? buildApiPeerId(linkedChatId, 'channel') : undefined,\n      botCommands,\n      enabledReactions: buildApiChatReactions(availableReactions),\n      reactionsLimit,\n      sendAsId: defaultSendAs ? getApiChatIdFromMtpPeer(defaultSendAs) : undefined,\n      requestsPending,\n      recentRequesterIds: recentRequesters?.map((userId) => buildApiPeerId(userId, 'user')),\n      statisticsDcId: statsDc,\n      stickerSet: stickerset ? buildStickerSet(stickerset) : undefined,\n      emojiSet: emojiset ? buildStickerSet(emojiset) : undefined,\n      areParticipantsHidden: participantsHidden,\n      isTranslationDisabled: translationsDisabled,\n      hasPinnedStories: Boolean(storiesPinnedAvailable),\n      boostsApplied,\n      boostsToUnrestrict: boostsUnrestrict,\n      botVerification: botVerification && buildApiBotVerification(botVerification),\n      isPaidReactionAvailable: paidReactionsAvailable,\n      hasScheduledMessages: hasScheduled,\n      starGiftCount: stargiftsCount,\n      areStarGiftsAvailable: Boolean(stargiftsAvailable),\n    },\n    chats,\n    userStatusesById: statusesById,\n    groupCall: call ? {\n      chatId: id,\n      isLoaded: false,\n      id: call.id.toString(),\n      accessHash: call?.accessHash.toString(),\n      participants: {},\n      version: 0,\n      participantsCount: 0,\n      connectionState: 'disconnected',\n    } : undefined,\n    membersCount: participantsCount,\n    ...(viewForumAsMessages && { isForumAsMessages: true }),\n  };\n}\n\nexport async function updateChatMutedState({\n  chat, isMuted, muteUntil = 0,\n}: {\n  chat: ApiChat; isMuted: boolean; muteUntil?: number;\n}) {\n  if (isMuted && !muteUntil) {\n    muteUntil = MAX_INT_32;\n  }\n  await invokeRequest(new GramJs.account.UpdateNotifySettings({\n    peer: new GramJs.InputNotifyPeer({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n    }),\n    settings: new GramJs.InputPeerNotifySettings({ muteUntil }),\n  }));\n\n  sendApiUpdate({\n    '@type': 'updateNotifyExceptions',\n    chatId: chat.id,\n    isMuted,\n  });\n\n  void requestChatUpdate({\n    chat,\n    noLastMessage: true,\n  });\n}\n\nexport async function updateTopicMutedState({\n  chat, topicId, isMuted, muteUntil = 0,\n}: {\n  chat: ApiChat; topicId: number; isMuted: boolean; muteUntil?: number;\n}) {\n  if (isMuted && !muteUntil) {\n    muteUntil = MAX_INT_32;\n  }\n  await invokeRequest(new GramJs.account.UpdateNotifySettings({\n    peer: new GramJs.InputNotifyForumTopic({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      topMsgId: topicId,\n    }),\n    settings: new GramJs.InputPeerNotifySettings({ muteUntil }),\n  }));\n\n  sendApiUpdate({\n    '@type': 'updateTopicNotifyExceptions',\n    chatId: chat.id,\n    topicId,\n    isMuted,\n  });\n\n  // TODO[forums] Request forum topic thread update\n}\n\nexport async function createChannel({\n  title, about = '', users,\n}: {\n  title: string; about?: string; users?: ApiUser[];\n}) {\n  const result = await invokeRequest(new GramJs.channels.CreateChannel({\n    broadcast: true,\n    title,\n    about,\n  }), {\n    shouldThrow: true,\n  });\n\n  // `createChannel` can return a lot of different update types according to docs,\n  // but currently channel creation returns only `Updates` type.\n  // Errors are added to catch unexpected cases in future testing\n  if (!(result instanceof GramJs.Updates)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Unexpected channel creation update', result);\n    }\n    return undefined;\n  }\n\n  const newChannel = result.chats[0];\n  if (!newChannel || !(newChannel instanceof GramJs.Channel)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Created channel not found', result);\n    }\n    return undefined;\n  }\n\n  const channel = buildApiChatFromPreview(newChannel)!;\n\n  let missingUsers: ApiMissingInvitedUser[] | undefined;\n\n  if (users?.length) {\n    const invitedUsers = await invokeRequest(new GramJs.channels.InviteToChannel({\n      channel: buildInputEntity(channel.id, channel.accessHash) as GramJs.InputChannel,\n      users: users.map(({ id, accessHash }) => buildInputEntity(id, accessHash)) as GramJs.InputUser[],\n    }));\n    if (!invitedUsers) return undefined;\n\n    handleGramJsUpdate(invitedUsers.updates);\n    missingUsers = invitedUsers.missingInvitees.map(buildApiMissingInvitedUser);\n  }\n\n  return { channel, missingUsers };\n}\n\nexport function joinChannel({\n  channelId, accessHash,\n}: {\n  channelId: string; accessHash: string;\n}) {\n  return invokeRequest(new GramJs.channels.JoinChannel({\n    channel: buildInputEntity(channelId, accessHash) as GramJs.InputChannel,\n  }), {\n    shouldReturnTrue: true,\n    shouldThrow: true,\n  });\n}\n\nexport function deleteChatUser({\n  chat, user,\n}: {\n  chat: ApiChat; user: ApiUser;\n}) {\n  if (chat.type !== 'chatTypeBasicGroup') return undefined;\n  return invokeRequest(new GramJs.messages.DeleteChatUser({\n    chatId: buildInputEntity(chat.id, chat.accessHash) as BigInt.BigInteger,\n    userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function deleteChat({\n  chatId,\n}: {\n  chatId: string;\n}) {\n  return invokeRequest(new GramJs.messages.DeleteChat({\n    chatId: buildInputEntity(chatId) as BigInt.BigInteger,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function leaveChannel({\n  channelId, accessHash,\n}: {\n  channelId: string; accessHash: string;\n}) {\n  return invokeRequest(new GramJs.channels.LeaveChannel({\n    channel: buildInputEntity(channelId, accessHash) as GramJs.InputChannel,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function deleteChannel({\n  channelId, accessHash,\n}: {\n  channelId: string; accessHash: string;\n}) {\n  return invokeRequest(new GramJs.channels.DeleteChannel({\n    channel: buildInputEntity(channelId, accessHash) as GramJs.InputChannel,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function createGroupChat({\n  title, users,\n}: {\n  title: string; users: ApiUser[];\n}) {\n  const invitedUsers = await invokeRequest(new GramJs.messages.CreateChat({\n    title,\n    users: users.map(({ id, accessHash }) => buildInputEntity(id, accessHash)) as GramJs.InputUser[],\n  }));\n  if (!invitedUsers) return undefined;\n\n  handleGramJsUpdate(invitedUsers.updates);\n  const missingUsers = invitedUsers.missingInvitees.map(buildApiMissingInvitedUser);\n\n  const newChat = (invitedUsers.updates as GramJs.Updates).chats[0];\n  if (!newChat || !(newChat instanceof GramJs.Chat)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Created chat not found', invitedUsers.updates);\n    }\n    return undefined;\n  }\n\n  return { chat: buildApiChatFromPreview(newChat), missingUsers };\n}\n\nexport async function editChatPhoto({\n  chatId, accessHash, photo,\n}: {\n  chatId: string; accessHash?: string; photo?: File | ApiPhoto;\n}) {\n  const inputEntity = buildInputEntity(chatId, accessHash);\n  let inputPhoto: GramJs.TypeInputChatPhoto;\n  if (photo instanceof File) {\n    const uploadedPhoto = await uploadFile(photo);\n    inputPhoto = new GramJs.InputChatUploadedPhoto({\n      file: uploadedPhoto,\n    });\n  } else if (photo) {\n    const photoId = buildInputPhoto(photo);\n    if (!photoId) return false;\n    inputPhoto = new GramJs.InputChatPhoto({\n      id: photoId,\n    });\n  } else {\n    inputPhoto = new GramJs.InputChatPhotoEmpty();\n  }\n  return invokeRequest(\n    inputEntity instanceof GramJs.InputChannel\n      ? new GramJs.channels.EditPhoto({\n        channel: inputEntity as GramJs.InputChannel,\n        photo: inputPhoto,\n      })\n      : new GramJs.messages.EditChatPhoto({\n        chatId: inputEntity as BigInt.BigInteger,\n        photo: inputPhoto,\n      }),\n    {\n      shouldReturnTrue: true,\n    },\n  );\n}\n\nexport async function toggleChatPinned({\n  chat,\n  shouldBePinned,\n}: {\n  chat: ApiChat;\n  shouldBePinned: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.ToggleDialogPin({\n    peer: new GramJs.InputDialogPeer({\n      peer: buildInputPeer(id, accessHash),\n    }),\n    pinned: shouldBePinned || undefined,\n  }));\n\n  if (isActionSuccessful) {\n    sendApiUpdate({\n      '@type': 'updateChatPinned',\n      id: chat.id,\n      isPinned: shouldBePinned,\n    });\n  }\n}\n\nexport async function toggleSavedDialogPinned({\n  chat, shouldBePinned,\n}: {\n  chat: ApiChat;\n  shouldBePinned: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.ToggleSavedDialogPin({\n    peer: new GramJs.InputDialogPeer({\n      peer: buildInputPeer(id, accessHash),\n    }),\n    pinned: shouldBePinned || undefined,\n  }));\n\n  if (isActionSuccessful) {\n    sendApiUpdate({\n      '@type': 'updateSavedDialogPinned',\n      id: chat.id,\n      isPinned: shouldBePinned,\n    });\n  }\n}\n\nexport function toggleChatArchived({\n  chat, folderId,\n}: {\n  chat: ApiChat; folderId: number;\n}) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.folders.EditPeerFolders({\n    folderPeers: [new GramJs.InputFolderPeer({\n      peer: buildInputPeer(id, accessHash),\n      folderId,\n    })],\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function fetchChatFolders() {\n  const result = await invokeRequest(new GramJs.messages.GetDialogFilters());\n\n  if (!result) {\n    return undefined;\n  }\n  const { filters } = result;\n\n  const defaultFolderPosition = filters.findIndex((folder) => folder instanceof GramJs.DialogFilterDefault);\n  const dialogFilters = filters.filter(isChatFolder);\n  const orderedIds = dialogFilters.map(({ id }) => id);\n  if (defaultFolderPosition !== -1) {\n    orderedIds.splice(defaultFolderPosition, 0, ALL_FOLDER_ID);\n  }\n  return {\n    byId: buildCollectionByKey(\n      dialogFilters\n        .map(buildApiChatFolder), 'id',\n    ) as Record<number, ApiChatFolder>,\n    orderedIds,\n  };\n}\n\nexport async function fetchRecommendedChatFolders() {\n  const results = await invokeRequest(new GramJs.messages.GetSuggestedDialogFilters());\n\n  if (!results) {\n    return undefined;\n  }\n\n  return results.map(buildApiChatFolderFromSuggested).filter(Boolean);\n}\n\nexport async function editChatFolder({\n  id,\n  folderUpdate,\n}: {\n  id: number;\n  folderUpdate: ApiChatFolder;\n}) {\n  // Telegram ignores excluded chats if they also present in the included list\n  folderUpdate.excludedChatIds = folderUpdate.excludedChatIds.filter((chatId) => {\n    return !folderUpdate.includedChatIds.includes(chatId);\n  });\n\n  const filter = buildFilterFromApiFolder(folderUpdate);\n\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.UpdateDialogFilter({\n    id,\n    filter,\n  }));\n\n  if (isActionSuccessful) {\n    sendApiUpdate({\n      '@type': 'updateChatFolder',\n      id,\n      folder: folderUpdate,\n    });\n  }\n}\n\nexport async function deleteChatFolder(id: number) {\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.UpdateDialogFilter({\n    id,\n    filter: undefined,\n  }));\n  const recommendedChatFolders = await fetchRecommendedChatFolders();\n\n  if (isActionSuccessful) {\n    sendApiUpdate({\n      '@type': 'updateChatFolder',\n      id,\n      folder: undefined,\n    });\n  }\n  if (recommendedChatFolders) {\n    sendApiUpdate({\n      '@type': 'updateRecommendedChatFolders',\n      folders: recommendedChatFolders,\n    });\n  }\n}\n\nexport function sortChatFolders(ids: number[]) {\n  return invokeRequest(new GramJs.messages.UpdateDialogFiltersOrder({\n    order: ids,\n  }));\n}\n\nexport async function toggleDialogUnread({\n  chat, hasUnreadMark,\n}: {\n  chat: ApiChat; hasUnreadMark: boolean | undefined;\n}) {\n  const { id, accessHash } = chat;\n\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.MarkDialogUnread({\n    peer: new GramJs.InputDialogPeer({\n      peer: buildInputPeer(id, accessHash),\n    }),\n    unread: hasUnreadMark || undefined,\n  }));\n\n  if (isActionSuccessful) {\n    sendApiUpdate({\n      '@type': 'updateChat',\n      id: chat.id,\n      chat: { hasUnreadMark },\n    });\n  }\n}\n\nexport async function getChatByPhoneNumber(phoneNumber: string) {\n  const result = await invokeRequest(new GramJs.contacts.ResolvePhone({\n    phone: phoneNumber,\n  }));\n\n  return processResolvedPeer(result);\n}\n\nexport async function getChatByUsername(username: string, referrer?: string) {\n  const result = await invokeRequest(new GramJs.contacts.ResolveUsername({\n    username,\n    referer: referrer,\n  }));\n\n  return processResolvedPeer(result);\n}\n\nfunction processResolvedPeer(result?: GramJs.contacts.TypeResolvedPeer) {\n  if (!result) {\n    return undefined;\n  }\n\n  const { users, chats } = result;\n\n  const chat = chats.length\n    ? buildApiChatFromPreview(chats[0])\n    : buildApiChatFromPreview(users[0]);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return {\n    chat,\n    user: buildApiUser(users[0]),\n  };\n}\n\nexport function togglePreHistoryHidden({\n  chat, isEnabled,\n}: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n  const channel = buildInputEntity(id, accessHash);\n\n  return invokeRequest(new GramJs.channels.TogglePreHistoryHidden({\n    channel: channel as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function updateChatDefaultBannedRights({\n  chat, bannedRights,\n}: { chat: ApiChat; bannedRights: ApiChatBannedRights }) {\n  const { id, accessHash } = chat;\n  const peer = buildInputPeer(id, accessHash);\n\n  return invokeRequest(new GramJs.messages.EditChatDefaultBannedRights({\n    peer,\n    bannedRights: buildChatBannedRights(bannedRights),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function updateChatMemberBannedRights({\n  chat, user, bannedRights, untilDate,\n}: { chat: ApiChat; user: ApiUser; bannedRights: ApiChatBannedRights; untilDate?: number }) {\n  const channel = buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel;\n  const participant = buildInputPeer(user.id, user.accessHash) as GramJs.InputUser;\n\n  return invokeRequest(new GramJs.channels.EditBanned({\n    channel,\n    participant,\n    bannedRights: buildChatBannedRights(bannedRights, untilDate),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function updateChatAdmin({\n  chat, user, adminRights, customTitle = '',\n}: { chat: ApiChat; user: ApiUser; adminRights: ApiChatAdminRights; customTitle?: string }) {\n  const channel = buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel;\n  const userId = buildInputEntity(user.id, user.accessHash) as GramJs.InputUser;\n\n  return invokeRequest(new GramJs.channels.EditAdmin({\n    channel,\n    userId,\n    adminRights: buildChatAdminRights(adminRights),\n    rank: customTitle,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function updateChatTitle(chat: ApiChat, title: string) {\n  const inputEntity = buildInputEntity(chat.id, chat.accessHash);\n  await invokeRequest(\n    inputEntity instanceof GramJs.InputChannel\n      ? new GramJs.channels.EditTitle({\n        channel: inputEntity as GramJs.InputChannel,\n        title,\n      }) : new GramJs.messages.EditChatTitle({\n        chatId: inputEntity as BigInt.BigInteger,\n        title,\n      }),\n    {\n      shouldReturnTrue: true,\n    },\n  );\n}\n\nexport async function updateChatAbout(chat: ApiChat, about: string) {\n  const result = await invokeRequest(new GramJs.messages.EditChatAbout({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    about,\n  }));\n\n  if (!result) {\n    return;\n  }\n\n  sendApiUpdate({\n    '@type': 'updateChatFullInfo',\n    id: chat.id,\n    fullInfo: {\n      about,\n    },\n  });\n}\n\nexport function toggleSignatures({\n  chat, areSignaturesEnabled, areProfilesEnabled,\n}: {\n  chat: ApiChat;\n  areSignaturesEnabled: boolean;\n  areProfilesEnabled: boolean;\n}) {\n  const { id, accessHash } = chat;\n  const channel = buildInputEntity(id, accessHash);\n\n  return invokeRequest(new GramJs.channels.ToggleSignatures({\n    channel: channel as GramJs.InputChannel,\n    signaturesEnabled: areSignaturesEnabled || undefined,\n    profilesEnabled: areProfilesEnabled || undefined,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\ntype ChannelMembersFilter =\n  'kicked'\n  | 'admin'\n  | 'recent';\n\nexport async function fetchMembers(\n  chatId: string,\n  accessHash: string,\n  memberFilter: ChannelMembersFilter = 'recent',\n  offset?: number,\n) {\n  let filter: GramJs.TypeChannelParticipantsFilter;\n\n  switch (memberFilter) {\n    case 'kicked':\n      filter = new GramJs.ChannelParticipantsKicked({ q: '' });\n      break;\n    case 'admin':\n      filter = new GramJs.ChannelParticipantsAdmins();\n      break;\n    default:\n      filter = new GramJs.ChannelParticipantsRecent();\n      break;\n  }\n\n  const result = await invokeRequest(new GramJs.channels.GetParticipants({\n    channel: buildInputEntity(chatId, accessHash) as GramJs.InputChannel,\n    filter,\n    offset,\n    limit: MEMBERS_LOAD_SLICE,\n  }), {\n    abortControllerChatId: chatId,\n  });\n\n  if (!result || result instanceof GramJs.channels.ChannelParticipantsNotModified) {\n    return undefined;\n  }\n\n  const userStatusesById = buildApiUserStatuses(result.users);\n\n  return {\n    members: buildChatMembers(result),\n    userStatusesById,\n  };\n}\n\nexport async function fetchMember({\n  chat,\n  peer,\n}: {\n  chat: ApiChat;\n  peer?: ApiPeer;\n}) {\n  const participant = peer ? buildInputPeer(peer.id, peer.accessHash) : new GramJs.InputPeerSelf();\n\n  const result = await invokeRequest(new GramJs.channels.GetParticipant({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    participant,\n  }), {\n    abortControllerChatId: chat.id,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  const userStatusesById = buildApiUserStatuses(result.users);\n  const member = buildChatMember(result.participant);\n\n  if (!member) {\n    return undefined;\n  }\n\n  return {\n    member,\n    userStatusesById,\n  };\n}\n\nexport async function fetchGroupsForDiscussion() {\n  const result = await invokeRequest(new GramJs.channels.GetGroupsForDiscussion());\n\n  if (!result) {\n    return undefined;\n  }\n\n  return result.chats.map((chat) => buildApiChatFromPreview(chat));\n}\n\nexport function setDiscussionGroup({\n  channel,\n  chat,\n}: {\n  channel: ApiChat;\n  chat?: ApiChat;\n}) {\n  return invokeRequest(new GramJs.channels.SetDiscussionGroup({\n    broadcast: buildInputPeer(channel.id, channel.accessHash),\n    group: chat ? buildInputPeer(chat.id, chat.accessHash) : new GramJs.InputChannelEmpty(),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function migrateChat(chat: ApiChat) {\n  const result = await invokeRequest(\n    new GramJs.messages.MigrateChat({ chatId: buildInputEntity(chat.id) as BigInt.BigInteger }),\n    {\n      shouldThrow: true,\n    },\n  );\n\n  // `migrateChat` can return a lot of different update types according to docs,\n  // but currently chat migrations returns only `Updates` type.\n  // Errors are added to catch unexpected cases in future testing\n  if (!result || !(result instanceof GramJs.Updates)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Unexpected channel creation update', result);\n    }\n\n    return undefined;\n  }\n\n  const newChannelId = result.updates\n    .find((update): update is GramJs.UpdateChannel => update instanceof GramJs.UpdateChannel)!.channelId;\n\n  const newChannel = result.chats.find((c) => (\n    c instanceof GramJs.Channel && c.id.toString() === newChannelId.toString()\n  ))!;\n\n  return buildApiChatFromPreview(newChannel);\n}\n\nexport async function checkChatInvite(hash: string) {\n  const result = await invokeRequest(new GramJs.messages.CheckChatInvite({ hash }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  if (result instanceof GramJs.ChatInvite) {\n    return {\n      chat: undefined,\n      invite: buildApiChatInviteInfo(result),\n      users: result.participants?.map(buildApiUser).filter(Boolean),\n    };\n  }\n\n  const chat = buildApiChatFromPreview(result.chat);\n  if (!chat) {\n    return undefined;\n  }\n\n  return { chat, invite: undefined, users: undefined };\n}\n\nexport async function addChatMembers(chat: ApiChat, users: ApiUser[]) {\n  try {\n    if (chat.type === 'chatTypeChannel' || chat.type === 'chatTypeSuperGroup') {\n      const invitedUsers = await invokeRequest(new GramJs.channels.InviteToChannel({\n        channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n        users: users.map((user) => buildInputEntity(user.id, user.accessHash)) as GramJs.InputUser[],\n      }));\n      if (!invitedUsers) return undefined;\n      handleGramJsUpdate(invitedUsers.updates);\n      return invitedUsers.missingInvitees.map(buildApiMissingInvitedUser);\n    }\n\n    const addChatUsersResult = await Promise.all(\n      users.map(async (user) => {\n        const invitedUsers = await invokeRequest(new GramJs.messages.AddChatUser({\n          chatId: buildInputEntity(chat.id) as BigInt.BigInteger,\n          userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n        }));\n        if (!invitedUsers) return undefined;\n        handleGramJsUpdate(invitedUsers.updates);\n        return invitedUsers.missingInvitees.map(buildApiMissingInvitedUser);\n      }),\n    );\n    if (addChatUsersResult) {\n      return addChatUsersResult.flat().filter(Boolean);\n    }\n  } catch (err: unknown) {\n    const message = err instanceof RPCError ? err.errorMessage : (err as Error).message;\n    sendApiUpdate({\n      '@type': 'error',\n      error: {\n        message,\n      },\n    });\n  }\n  return undefined;\n}\n\nexport function deleteChatMember(chat: ApiChat, user: ApiUser) {\n  if (chat.type === 'chatTypeChannel' || chat.type === 'chatTypeSuperGroup') {\n    return updateChatMemberBannedRights({\n      chat,\n      user,\n      bannedRights: {\n        viewMessages: true,\n        sendMessages: true,\n        sendMedia: true,\n        sendStickers: true,\n        sendGifs: true,\n        sendGames: true,\n        sendInline: true,\n        embedLinks: true,\n        sendPolls: true,\n        changeInfo: true,\n        inviteUsers: true,\n        pinMessages: true,\n        manageTopics: true,\n        sendPhotos: true,\n        sendVideos: true,\n        sendRoundvideos: true,\n        sendAudios: true,\n        sendVoices: true,\n        sendDocs: true,\n        sendPlain: true,\n      },\n      untilDate: MAX_INT_32,\n    });\n  } else {\n    return invokeRequest(new GramJs.messages.DeleteChatUser({\n      chatId: buildInputEntity(chat.id) as BigInt.BigInteger,\n      userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n    }), {\n      shouldReturnTrue: true,\n    });\n  }\n}\n\nexport function toggleJoinToSend(chat: ApiChat, isEnabled: boolean) {\n  return invokeRequest(new GramJs.channels.ToggleJoinToSend({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function toggleJoinRequest(chat: ApiChat, isEnabled: boolean) {\n  return invokeRequest(new GramJs.channels.ToggleJoinRequest({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nfunction preparePeers(\n  result: GramJs.messages.Dialogs | GramJs.messages.DialogsSlice | GramJs.messages.PeerDialogs |\n  GramJs.messages.SavedDialogs | GramJs.messages.SavedDialogsSlice,\n  currentStore?: Record<string, GramJs.TypeChat | GramJs.TypeUser>,\n) {\n  const store: Record<string, GramJs.TypeChat | GramJs.TypeUser> = {};\n\n  result.chats?.forEach((chat) => {\n    const key = `chat${chat.id}`;\n\n    if (currentStore?.[key] && 'min' in chat && chat.min) {\n      return;\n    }\n\n    store[key] = chat;\n  });\n\n  result.users?.forEach((user) => {\n    const key = `user${user.id}`;\n\n    if (currentStore?.[key] && 'min' in user && user.min) {\n      return;\n    }\n\n    store[key] = user;\n  });\n\n  return store;\n}\n\nexport async function importChatInvite({ hash }: { hash: string }) {\n  const updates = await invokeRequest(new GramJs.messages.ImportChatInvite({ hash }));\n  if (!(updates instanceof GramJs.Updates) || !updates.chats.length) {\n    return undefined;\n  }\n\n  return buildApiChatFromPreview(updates.chats[0]);\n}\n\nexport function setChatEnabledReactions({\n  chat, enabledReactions, reactionsLimit,\n}: {\n  chat: ApiChat; enabledReactions?: ApiChatReactions; reactionsLimit?: number;\n}) {\n  return invokeRequest(new GramJs.messages.SetChatAvailableReactions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    availableReactions: buildInputChatReactions(enabledReactions),\n    reactionsLimit,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function toggleIsProtected({\n  chat, isProtected,\n}: { chat: ApiChat; isProtected: boolean }) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.messages.ToggleNoForwards({\n    peer: buildInputPeer(id, accessHash),\n    enabled: isProtected,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function toggleParticipantsHidden({\n  chat, isEnabled,\n}: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.ToggleParticipantsHidden({\n    channel: buildInputPeer(id, accessHash),\n    enabled: isEnabled,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function toggleForum({\n  chat, isEnabled,\n}: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.ToggleForum({\n    channel: buildInputPeer(id, accessHash),\n    enabled: isEnabled,\n  }), {\n    shouldReturnTrue: true,\n    shouldThrow: true,\n  });\n}\n\nexport async function createTopic({\n  chat, title, iconColor, iconEmojiId, sendAs,\n}: {\n  chat: ApiChat;\n  title: string;\n  iconColor?: number;\n  iconEmojiId?: string;\n  sendAs?: ApiPeer;\n}) {\n  const { id, accessHash } = chat;\n\n  const updates = await invokeRequest(new GramJs.channels.CreateForumTopic({\n    channel: buildInputPeer(id, accessHash),\n    title,\n    iconColor,\n    iconEmojiId: iconEmojiId ? BigInt(iconEmojiId) : undefined,\n    sendAs: sendAs ? buildInputPeer(sendAs.id, sendAs.accessHash) : undefined,\n    randomId: generateRandomBigInt(),\n  }));\n\n  if (!(updates instanceof GramJs.Updates) || !updates.updates.length) {\n    return undefined;\n  }\n\n  // Finding topic id in updates\n  return updates.updates?.find((update): update is GramJs.UpdateMessageID => (\n    update instanceof GramJs.UpdateMessageID\n  ))?.id;\n}\n\nexport async function fetchTopics({\n  chat, query, offsetTopicId, offsetId, offsetDate, limit = TOPICS_SLICE,\n}: {\n  chat: ApiChat;\n  query?: string;\n  offsetTopicId?: number;\n  offsetId?: number;\n  offsetDate?: number;\n  limit?: number;\n}): Promise<{\n    topics: ApiTopic[];\n    messages: ApiMessage[];\n    count: number;\n    shouldOrderByCreateDate?: boolean;\n    draftsById: Record<number, ReturnType<typeof buildMessageDraft>>;\n    readInboxMessageIdByTopicId: Record<number, number>;\n  } | undefined> {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.channels.GetForumTopics({\n    channel: buildInputPeer(id, accessHash),\n    limit,\n    q: query,\n    offsetTopic: offsetTopicId,\n    offsetId,\n    offsetDate,\n  }));\n\n  if (!result) return undefined;\n\n  const { count, orderByCreateDate } = result;\n\n  const topics = result.topics.map(buildApiTopic).filter(Boolean);\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  const draftsById = result.topics.reduce((acc, topic) => {\n    if (topic instanceof GramJs.ForumTopic && topic.draft) {\n      acc[topic.id] = buildMessageDraft(topic.draft);\n    }\n    return acc;\n  }, {} as Record<number, ReturnType<typeof buildMessageDraft>>);\n  const readInboxMessageIdByTopicId = result.topics.reduce((acc, topic) => {\n    if (topic instanceof GramJs.ForumTopic && topic.readInboxMaxId) {\n      acc[topic.id] = topic.readInboxMaxId;\n    }\n    return acc;\n  }, {} as Record<number, number>);\n\n  return {\n    topics,\n    messages,\n    // Include general topic\n    count: count + 1,\n    shouldOrderByCreateDate: orderByCreateDate,\n    draftsById,\n    readInboxMessageIdByTopicId,\n  };\n}\n\nexport async function fetchTopicById({\n  chat, topicId,\n}: {\n  chat: ApiChat;\n  topicId: number;\n}): Promise<{\n    topic: ApiTopic;\n    messages: ApiMessage[];\n  } | undefined> {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.channels.GetForumTopicsByID({\n    channel: buildInputPeer(id, accessHash),\n    topics: [topicId],\n  }));\n\n  if (!result?.topics.length || !(result.topics[0] instanceof GramJs.ForumTopic)) {\n    return undefined;\n  }\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n\n  return {\n    topic: buildApiTopic(result.topics[0])!,\n    messages,\n  };\n}\n\nexport async function deleteTopic({\n  chat, topicId,\n}: {\n  chat: ApiChat;\n  topicId: number;\n}) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.channels.DeleteTopicHistory({\n    channel: buildInputPeer(id, accessHash),\n    topMsgId: topicId,\n  }));\n\n  if (!result) return;\n\n  processAffectedHistory(chat, result);\n\n  if (result.offset) {\n    await deleteTopic({ chat, topicId });\n  }\n}\n\nexport function togglePinnedTopic({\n  chat, topicId, isPinned,\n}: {\n  chat: ApiChat;\n  topicId: number;\n  isPinned: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.UpdatePinnedForumTopic({\n    channel: buildInputPeer(id, accessHash),\n    topicId,\n    pinned: isPinned,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function editTopic({\n  chat, topicId, title, iconEmojiId, isClosed, isHidden,\n}: {\n  chat: ApiChat;\n  topicId: number;\n  title?: string;\n  iconEmojiId?: string;\n  isClosed?: boolean;\n  isHidden?: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.EditForumTopic({\n    channel: buildInputPeer(id, accessHash),\n    topicId,\n    title,\n    iconEmojiId: topicId !== GENERAL_TOPIC_ID && iconEmojiId ? BigInt(iconEmojiId) : undefined,\n    closed: isClosed,\n    hidden: isHidden,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function checkChatlistInvite({\n  slug,\n}: {\n  slug: string;\n}) {\n  const result = await invokeRequest(new GramJs.chatlists.CheckChatlistInvite({\n    slug,\n  }));\n\n  const invite = buildApiChatlistInvite(result, slug);\n\n  if (!result || !invite) return undefined;\n\n  return {\n    invite,\n  };\n}\n\nexport function joinChatlistInvite({\n  slug,\n  peers,\n}: {\n  slug: string;\n  peers: ApiChat[];\n}) {\n  return invokeRequest(new GramJs.chatlists.JoinChatlistInvite({\n    slug,\n    peers: peers.map((peer) => buildInputPeer(peer.id, peer.accessHash)),\n  }), {\n    shouldReturnTrue: true,\n    shouldThrow: true,\n  });\n}\n\nexport async function fetchLeaveChatlistSuggestions({\n  folderId,\n}: {\n  folderId: number;\n}) {\n  const result = await invokeRequest(new GramJs.chatlists.GetLeaveChatlistSuggestions({\n    chatlist: new GramJs.InputChatlistDialogFilter({\n      filterId: folderId,\n    }),\n  }));\n\n  if (!result) return undefined;\n\n  return result.map(getApiChatIdFromMtpPeer);\n}\n\nexport function leaveChatlist({\n  folderId,\n  peers,\n}: {\n  folderId: number;\n  peers: ApiChat[];\n}) {\n  return invokeRequest(new GramJs.chatlists.LeaveChatlist({\n    chatlist: new GramJs.InputChatlistDialogFilter({\n      filterId: folderId,\n    }),\n    peers: peers.map((peer) => buildInputPeer(peer.id, peer.accessHash)),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function createChalistInvite({\n  folderId, title, peers,\n}: {\n  folderId: number;\n  title?: string;\n  peers: ApiPeer[];\n}) {\n  const result = await invokeRequest(new GramJs.chatlists.ExportChatlistInvite({\n    chatlist: new GramJs.InputChatlistDialogFilter({\n      filterId: folderId,\n    }),\n    title: title || '',\n    peers: peers.map((peer) => buildInputPeer(peer.id, peer.accessHash)),\n  }), {\n    shouldThrow: true,\n  });\n\n  if (!result || result.filter instanceof GramJs.DialogFilterDefault) return undefined;\n\n  return {\n    filter: buildApiChatFolder(result.filter),\n    invite: buildApiChatlistExportedInvite(result.invite),\n  };\n}\n\nexport function deleteChatlistInvite({\n  folderId, slug,\n}: {\n  folderId: number;\n  slug: string;\n}) {\n  return invokeRequest(new GramJs.chatlists.DeleteExportedInvite({\n    chatlist: new GramJs.InputChatlistDialogFilter({\n      filterId: folderId,\n    }),\n    slug,\n  }));\n}\n\nexport async function editChatlistInvite({\n  folderId, slug, title, peers,\n}: {\n  folderId: number;\n  slug: string;\n  title?: string;\n  peers: ApiPeer[];\n}) {\n  const result = await invokeRequest(new GramJs.chatlists.EditExportedInvite({\n    chatlist: new GramJs.InputChatlistDialogFilter({\n      filterId: folderId,\n    }),\n    slug,\n    title,\n    peers: peers.map((peer) => buildInputPeer(peer.id, peer.accessHash)),\n  }), {\n    shouldThrow: true,\n  });\n  if (!result) return undefined;\n\n  return buildApiChatlistExportedInvite(result);\n}\n\nexport async function fetchChatlistInvites({\n  folderId,\n}: {\n  folderId: number;\n}) {\n  const result = await invokeRequest(new GramJs.chatlists.GetExportedInvites({\n    chatlist: new GramJs.InputChatlistDialogFilter({\n      filterId: folderId,\n    }),\n  }));\n\n  if (!result) return undefined;\n\n  return {\n    invites: result.invites.map(buildApiChatlistExportedInvite).filter(Boolean),\n  };\n}\n\nexport function togglePeerTranslations({\n  chat, isEnabled,\n}: {\n  chat: ApiChat;\n  isEnabled: boolean;\n}) {\n  return invokeRequest(new GramJs.messages.TogglePeerTranslations({\n    disabled: isEnabled ? undefined : true,\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }));\n}\n\nexport function setViewForumAsMessages({ chat, isEnabled }: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n  const channel = buildInputEntity(id, accessHash);\n\n  return invokeRequest(new GramJs.channels.ToggleViewForumAsMessages({\n    channel: channel as GramJs.InputChannel,\n    enabled: Boolean(isEnabled),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function fetchChannelRecommendations({ chat }: { chat?: ApiChat }) {\n  const result = await invokeRequest(new GramJs.channels.GetChannelRecommendations({\n    channel: chat && buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  const similarChannels = result?.chats\n    .map((c) => buildApiChatFromPreview(c))\n    .filter(Boolean);\n\n  return {\n    similarChannels,\n    count: result instanceof GramJs.messages.ChatsSlice ? result.count : similarChannels.length,\n  };\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport { RPCError } from '../../../lib/gramjs/errors';\n\nimport type { ThreadId, WebPageMediaSize } from '../../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiContact,\n  ApiError,\n  ApiFormattedText,\n  ApiGlobalMessageSearchType,\n  ApiInputReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiMessageSearchContext,\n  ApiMessageSearchType,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiPoll,\n  ApiReaction,\n  ApiSendMessageAction,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUserStatus,\n  ApiVideo,\n  MediaContent,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../types';\n\nimport {\n  API_GENERAL_ID_LIMIT,\n  DEBUG,\n  GIF_MIME_TYPE,\n  MAX_INT_32,\n  MENTION_UNREAD_SLICE,\n  MESSAGE_ID_REQUIRED_ERROR,\n  PINNED_MESSAGES_LIMIT,\n  REACTION_UNREAD_SLICE,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { fetchFile } from '../../../util/files';\nimport { compact, split } from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { getServerTime, getServerTimeOffset } from '../../../util/serverTime';\nimport { interpolateArray } from '../../../util/waveform';\nimport {\n  buildApiChatFromPreview,\n  buildApiSendAsPeerId,\n  buildApiSponsoredMessageReportResult,\n} from '../apiBuilders/chats';\nimport { buildApiFormattedText } from '../apiBuilders/common';\nimport {\n  buildMessageMediaContent, buildMessageTextContent, buildPollFromMedia, buildWebPage,\n} from '../apiBuilders/messageContent';\nimport {\n  buildApiFactCheck,\n  buildApiMessage,\n  buildApiQuickReply,\n  buildApiReportResult,\n  buildApiSponsoredMessage,\n  buildApiThreadInfo,\n  buildLocalForwardedMessage,\n  buildLocalMessage,\n  buildUploadingMedia,\n} from '../apiBuilders/messages';\nimport { getApiChatIdFromMtpPeer } from '../apiBuilders/peers';\nimport { buildApiUser, buildApiUserStatuses } from '../apiBuilders/users';\nimport {\n  buildInputEntity,\n  buildInputMediaDocument,\n  buildInputPeer,\n  buildInputPoll,\n  buildInputPollFromExisting,\n  buildInputReaction,\n  buildInputReplyTo,\n  buildInputStory,\n  buildInputTextWithEntities,\n  buildMessageFromUpdate,\n  buildMtpMessageEntity,\n  buildPeer,\n  buildSendMessageAction,\n  generateRandomBigInt,\n  getEntityTypeById,\n} from '../gramjsBuilders';\nimport {\n  deserializeBytes,\n  resolveMessageApiChatId,\n} from '../helpers/misc';\nimport { sendApiUpdate } from '../updates/apiUpdateEmitter';\nimport { processMessageAndUpdateThreadInfo } from '../updates/entityProcessor';\nimport { processAffectedHistory, updateChannelState } from '../updates/updateManager';\nimport { requestChatUpdate } from './chats';\nimport { handleGramJsUpdate, invokeRequest, uploadFile } from './client';\n\nconst FAST_SEND_TIMEOUT = 1000;\nconst INPUT_WAVEFORM_LENGTH = 63;\n\ntype TranslateTextParams = ({\n  text: ApiFormattedText[];\n} | {\n  chat: ApiChat;\n  messageIds: number[];\n}) & {\n  toLanguageCode: string;\n};\n\ntype SearchResults = {\n  messages: ApiMessage[];\n  userStatusesById: Record<number, ApiUserStatus>;\n  totalCount: number;\n  nextOffsetRate?: number;\n  nextOffsetPeerId?: string;\n  nextOffsetId?: number;\n};\n\nexport async function fetchMessages({\n  chat,\n  threadId,\n  offsetId,\n  isSavedDialog,\n  ...pagination\n}: {\n  chat: ApiChat;\n  threadId?: ThreadId;\n  offsetId?: number;\n  isSavedDialog?: boolean;\n  addOffset?: number;\n  limit: number;\n}) {\n  const RequestClass = threadId === MAIN_THREAD_ID\n    ? GramJs.messages.GetHistory : isSavedDialog\n      ? GramJs.messages.GetSavedHistory : GramJs.messages.GetReplies;\n  let result;\n\n  try {\n    result = await invokeRequest(new RequestClass({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      ...(threadId !== MAIN_THREAD_ID && !isSavedDialog && {\n        msgId: Number(threadId),\n      }),\n      ...(offsetId && {\n        // Workaround for local message IDs overflowing some internal `Buffer` range check\n        offsetId: Math.min(offsetId, MAX_INT_32),\n      }),\n      ...pagination,\n    }), {\n      shouldThrow: true,\n      abortControllerChatId: chat.id,\n      abortControllerThreadId: threadId,\n    });\n  } catch (err: any) {\n    if (err.errorMessage === 'CHANNEL_PRIVATE') {\n      sendApiUpdate({\n        '@type': 'updateChat',\n        id: chat.id,\n        chat: {\n          isRestricted: true,\n        },\n      });\n    }\n  }\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const count = !(result instanceof GramJs.messages.Messages) && result.count;\n\n  return {\n    messages,\n    users,\n    chats,\n    count,\n  };\n}\n\nexport async function fetchMessage({ chat, messageId }: { chat: ApiChat; messageId: number }) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  let result;\n  try {\n    result = await invokeRequest(\n      isChannel\n        ? new GramJs.channels.GetMessages({\n          channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        })\n        : new GramJs.messages.GetMessages({\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        }),\n      {\n        shouldThrow: true,\n        abortControllerChatId: chat.id,\n      },\n    );\n  } catch (err: any) {\n    const { message } = err;\n\n    // When fetching messages for the bot @replies, there may be situations when the user was banned\n    // in the comment group or this group was deleted\n    if (message !== 'CHANNEL_PRIVATE') {\n      sendApiUpdate({\n        '@type': 'error',\n        error: {\n          message,\n          isSlowMode: false,\n          hasErrorKey: true,\n        },\n      });\n    }\n  }\n\n  if (!result || result instanceof GramJs.messages.MessagesNotModified) {\n    return undefined;\n  }\n\n  if ('pts' in result) {\n    updateChannelState(chat.id, result.pts);\n  }\n\n  const mtpMessage = result.messages[0];\n  if (!mtpMessage) {\n    return undefined;\n  }\n\n  if (mtpMessage instanceof GramJs.MessageEmpty) {\n    return MESSAGE_DELETED;\n  }\n\n  processMessageAndUpdateThreadInfo(mtpMessage);\n  const message = buildApiMessage(mtpMessage);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return { message };\n}\n\nlet mediaQueue = Promise.resolve();\n\nexport function sendMessage(\n  {\n    chat,\n    lastMessageId,\n    text,\n    entities,\n    replyInfo,\n    attachment,\n    sticker,\n    story,\n    gif,\n    poll,\n    contact,\n    isSilent,\n    scheduledAt,\n    groupedId,\n    noWebPage,\n    sendAs,\n    shouldUpdateStickerSetOrder,\n    wasDrafted,\n    isInvertedMedia,\n    effectId,\n    webPageMediaSize,\n    webPageUrl,\n  }: {\n    chat: ApiChat;\n    lastMessageId?: number;\n    text?: string;\n    entities?: ApiMessageEntity[];\n    replyInfo?: ApiInputReplyInfo;\n    attachment?: ApiAttachment;\n    sticker?: ApiSticker;\n    story?: ApiStory | ApiStorySkipped;\n    gif?: ApiVideo;\n    poll?: ApiNewPoll;\n    contact?: ApiContact;\n    isSilent?: boolean;\n    scheduledAt?: number;\n    groupedId?: string;\n    noWebPage?: boolean;\n    sendAs?: ApiPeer;\n    shouldUpdateStickerSetOrder?: boolean;\n    wasDrafted?: boolean;\n    isInvertedMedia?: true;\n    effectId?: string;\n    webPageMediaSize?: WebPageMediaSize;\n    webPageUrl?: string;\n  },\n  onProgress?: ApiOnProgress,\n) {\n  const {\n    message: localMessage,\n    poll: localPoll,\n  } = buildLocalMessage(\n    chat,\n    lastMessageId,\n    text,\n    entities,\n    replyInfo,\n    attachment,\n    sticker,\n    gif,\n    poll,\n    contact,\n    groupedId,\n    scheduledAt,\n    sendAs,\n    story,\n    isInvertedMedia,\n    effectId,\n  );\n\n  sendApiUpdate({\n    '@type': localMessage.isScheduled ? 'newScheduledMessage' : 'newMessage',\n    id: localMessage.id,\n    chatId: chat.id,\n    message: localMessage,\n    poll: localPoll,\n    wasDrafted,\n  });\n\n  // This is expected to arrive after `updateMessageSendSucceeded` which replaces the local ID,\n  // so in most cases this will be simply ignored\n  const timeout = setTimeout(() => {\n    sendApiUpdate({\n      '@type': localMessage.isScheduled ? 'updateScheduledMessage' : 'updateMessage',\n      id: localMessage.id,\n      chatId: chat.id,\n      message: {\n        sendingState: 'messageSendingStatePending',\n      },\n    });\n  }, FAST_SEND_TIMEOUT);\n\n  const randomId = generateRandomBigInt();\n\n  if (groupedId) {\n    return sendGroupedMedia({\n      chat,\n      text,\n      entities,\n      replyInfo,\n      attachment: attachment!,\n      groupedId,\n      isSilent,\n      scheduledAt,\n    }, randomId, localMessage, onProgress);\n  }\n\n  const messagePromise = (async () => {\n    let media: GramJs.TypeInputMedia | undefined;\n    if (attachment) {\n      try {\n        media = await uploadMedia(localMessage, attachment, onProgress!);\n      } catch (err) {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.warn(err);\n        }\n\n        await mediaQueue;\n\n        return;\n      }\n    } else if (sticker) {\n      media = buildInputMediaDocument(sticker);\n    } else if (gif) {\n      media = buildInputMediaDocument(gif);\n    } else if (poll) {\n      media = buildInputPoll(poll, randomId);\n    } else if (story) {\n      media = buildInputStory(story);\n    } else if (webPageUrl && webPageMediaSize) {\n      media = new GramJs.InputMediaWebPage({\n        url: webPageUrl,\n        forceLargeMedia: webPageMediaSize === 'large' ? true : undefined,\n        forceSmallMedia: webPageMediaSize === 'small' ? true : undefined,\n      });\n    } else if (contact) {\n      media = new GramJs.InputMediaContact({\n        phoneNumber: contact.phoneNumber,\n        firstName: contact.firstName,\n        lastName: contact.lastName,\n        vcard: '',\n      });\n    }\n\n    const RequestClass = media ? GramJs.messages.SendMedia : GramJs.messages.SendMessage;\n\n    try {\n      const update = await invokeRequest(new RequestClass({\n        clearDraft: true,\n        message: text || '',\n        entities: entities ? entities.map(buildMtpMessageEntity) : undefined,\n        peer: buildInputPeer(chat.id, chat.accessHash),\n        randomId,\n        replyTo: replyInfo && buildInputReplyTo(replyInfo),\n        ...(isSilent && { silent: isSilent }),\n        ...(scheduledAt && { scheduleDate: scheduledAt }),\n        ...(media && { media }),\n        ...(noWebPage && { noWebpage: noWebPage }),\n        ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n        ...(shouldUpdateStickerSetOrder && { updateStickersetsOrder: shouldUpdateStickerSetOrder }),\n        ...(isInvertedMedia && { invertMedia: isInvertedMedia }),\n        ...(effectId && { effect: BigInt(effectId) }),\n      }), {\n        shouldThrow: true,\n        shouldIgnoreUpdates: true,\n      });\n      if (update) handleLocalMessageUpdate(localMessage, update);\n    } catch (error: any) {\n      if (error.errorMessage === 'PRIVACY_PREMIUM_REQUIRED') {\n        sendApiUpdate({ '@type': 'updateRequestUserUpdate', id: chat.id });\n      }\n\n      sendApiUpdate({\n        '@type': 'updateMessageSendFailed',\n        chatId: chat.id,\n        localId: localMessage.id,\n        error: error.message,\n      });\n      clearTimeout(timeout);\n    }\n  })();\n\n  return messagePromise;\n}\n\nconst groupedUploads: Record<string, {\n  counter: number;\n  singleMediaByIndex: Record<number, GramJs.InputSingleMedia>;\n  localMessages: Record<string, ApiMessage>;\n}> = {};\n\nfunction sendGroupedMedia(\n  {\n    chat,\n    text,\n    entities,\n    replyInfo,\n    attachment,\n    groupedId,\n    isSilent,\n    scheduledAt,\n    sendAs,\n  }: {\n    chat: ApiChat;\n    text?: string;\n    entities?: ApiMessageEntity[];\n    replyInfo?: ApiInputReplyInfo;\n    attachment: ApiAttachment;\n    groupedId: string;\n    isSilent?: boolean;\n    scheduledAt?: number;\n    sendAs?: ApiPeer;\n  },\n  randomId: GramJs.long,\n  localMessage: ApiMessage,\n  onProgress?: ApiOnProgress,\n) {\n  let groupIndex = -1;\n  if (!groupedUploads[groupedId]) {\n    groupedUploads[groupedId] = {\n      counter: 0,\n      singleMediaByIndex: {},\n      localMessages: {},\n    };\n  }\n\n  groupIndex = groupedUploads[groupedId].counter++;\n\n  const prevMediaQueue = mediaQueue;\n  mediaQueue = (async () => {\n    let media;\n    try {\n      media = await uploadMedia(localMessage, attachment, onProgress!);\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.warn(err);\n      }\n\n      groupedUploads[groupedId].counter--;\n\n      await prevMediaQueue;\n\n      return;\n    }\n\n    const inputMedia = await fetchInputMedia(\n      buildInputPeer(chat.id, chat.accessHash),\n      media as GramJs.InputMediaUploadedPhoto | GramJs.InputMediaUploadedDocument,\n    );\n\n    await prevMediaQueue;\n\n    if (!inputMedia) {\n      groupedUploads[groupedId].counter--;\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.warn('Failed to upload grouped media');\n      }\n\n      return;\n    }\n\n    groupedUploads[groupedId].singleMediaByIndex[groupIndex] = new GramJs.InputSingleMedia({\n      media: inputMedia,\n      randomId,\n      message: text || '',\n      entities: entities ? entities.map(buildMtpMessageEntity) : undefined,\n    });\n    groupedUploads[groupedId].localMessages[randomId.toString()] = localMessage;\n\n    if (Object.keys(groupedUploads[groupedId].singleMediaByIndex).length < groupedUploads[groupedId].counter) {\n      return;\n    }\n\n    const { singleMediaByIndex, localMessages } = groupedUploads[groupedId];\n    delete groupedUploads[groupedId];\n\n    const update = await invokeRequest(new GramJs.messages.SendMultiMedia({\n      clearDraft: true,\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      multiMedia: Object.values(singleMediaByIndex), // Object keys are usually ordered\n      replyTo: replyInfo && buildInputReplyTo(replyInfo),\n      ...(isSilent && { silent: isSilent }),\n      ...(scheduledAt && { scheduleDate: scheduledAt }),\n      ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n    }), {\n      shouldIgnoreUpdates: true,\n    });\n\n    if (update) handleMultipleLocalMessagesUpdate(localMessages, update);\n  })();\n\n  return mediaQueue;\n}\n\nasync function fetchInputMedia(\n  peer: GramJs.TypeInputPeer,\n  uploadedMedia: GramJs.InputMediaUploadedPhoto | GramJs.InputMediaUploadedDocument,\n) {\n  const messageMedia = await invokeRequest(new GramJs.messages.UploadMedia({\n    peer,\n    media: uploadedMedia,\n  }));\n  const isSpoiler = uploadedMedia.spoiler;\n\n  if ((\n    messageMedia instanceof GramJs.MessageMediaPhoto\n    && messageMedia.photo\n    && messageMedia.photo instanceof GramJs.Photo)\n  ) {\n    const { photo: { id, accessHash, fileReference } } = messageMedia;\n\n    return new GramJs.InputMediaPhoto({\n      id: new GramJs.InputPhoto({ id, accessHash, fileReference }),\n      spoiler: isSpoiler,\n    });\n  }\n\n  if ((\n    messageMedia instanceof GramJs.MessageMediaDocument\n    && messageMedia.document\n    && messageMedia.document instanceof GramJs.Document)\n  ) {\n    const { document: { id, accessHash, fileReference } } = messageMedia;\n\n    return new GramJs.InputMediaDocument({\n      id: new GramJs.InputDocument({ id, accessHash, fileReference }),\n      spoiler: isSpoiler,\n    });\n  }\n\n  return undefined;\n}\n\nexport async function editMessage({\n  chat,\n  message,\n  text,\n  entities,\n  attachment,\n  noWebPage,\n}: {\n  chat: ApiChat;\n  message: ApiMessage;\n  text: string;\n  entities?: ApiMessageEntity[];\n  attachment?: ApiAttachment;\n  noWebPage?: boolean;\n}, onProgress?: ApiOnProgress) {\n  const isScheduled = message.date * 1000 > Date.now() + getServerTimeOffset() * 1000;\n\n  const media = attachment && buildUploadingMedia(attachment);\n\n  const isInvertedMedia = text && !attachment?.shouldSendAsFile ? message.isInvertedMedia : undefined;\n\n  const newContent = {\n    ...(media || message.content),\n    ...(text && {\n      text: {\n        text,\n        entities,\n      },\n    }),\n  };\n\n  const messageUpdate: Partial<ApiMessage> = {\n    ...message,\n    content: newContent,\n    isInvertedMedia,\n  };\n\n  sendApiUpdate({\n    '@type': isScheduled ? 'updateScheduledMessage' : 'updateMessage',\n    id: message.id,\n    chatId: chat.id,\n    message: messageUpdate,\n  });\n\n  try {\n    let mediaUpdate: GramJs.TypeInputMedia | undefined;\n    if (attachment) {\n      mediaUpdate = await uploadMedia(message, attachment, onProgress!);\n    }\n\n    const mtpEntities = entities && entities.map(buildMtpMessageEntity);\n\n    await invokeRequest(new GramJs.messages.EditMessage({\n      message: text || '',\n      entities: mtpEntities,\n      media: mediaUpdate,\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      id: message.id,\n      ...(isScheduled && { scheduleDate: message.date }),\n      ...(noWebPage && { noWebpage: noWebPage }),\n      ...(isInvertedMedia && { invertMedia: isInvertedMedia }),\n    }), { shouldThrow: true });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn(err);\n    }\n\n    const { message: messageErr } = err as Error;\n\n    sendApiUpdate({\n      '@type': 'error',\n      error: {\n        message: messageErr,\n        hasErrorKey: true,\n      },\n    });\n\n    // Rollback changes\n    sendApiUpdate({\n      '@type': isScheduled ? 'updateScheduledMessage' : 'updateMessage',\n      id: message.id,\n      chatId: chat.id,\n      message,\n    });\n  }\n}\n\nexport async function rescheduleMessage({\n  chat,\n  message,\n  scheduledAt,\n}: {\n  chat: ApiChat;\n  message: ApiMessage;\n  scheduledAt: number;\n}) {\n  await invokeRequest(new GramJs.messages.EditMessage({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: message.id,\n    scheduleDate: scheduledAt,\n  }));\n}\n\nasync function uploadMedia(message: ApiMessage, attachment: ApiAttachment, onProgress: ApiOnProgress) {\n  const {\n    filename, blobUrl, mimeType, quick, voice, audio, previewBlobUrl, shouldSendAsFile, shouldSendAsSpoiler, ttlSeconds,\n  } = attachment;\n\n  const patchedOnProgress: ApiOnProgress = (progress) => {\n    if (onProgress.isCanceled) {\n      patchedOnProgress.isCanceled = true;\n    } else {\n      onProgress(progress, getMessageKey(message));\n    }\n  };\n\n  const fetchAndUpload = async (url: string, progressCallback?: (progress: number) => void) => {\n    const file = await fetchFile(url, filename);\n    return uploadFile(file, progressCallback);\n  };\n\n  const isVideo = SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType);\n  const shouldUploadThumb = audio || isVideo || shouldSendAsFile;\n\n  const [inputFile, thumb] = await Promise.all(compact([\n    fetchAndUpload(blobUrl, patchedOnProgress),\n    shouldUploadThumb && previewBlobUrl && fetchAndUpload(previewBlobUrl),\n  ]));\n\n  const attributes: GramJs.TypeDocumentAttribute[] = [new GramJs.DocumentAttributeFilename({ fileName: filename })];\n  if (!shouldSendAsFile) {\n    if (quick) {\n      if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) && mimeType !== GIF_MIME_TYPE) {\n        return new GramJs.InputMediaUploadedPhoto({\n          file: inputFile,\n          spoiler: shouldSendAsSpoiler,\n        });\n      }\n\n      if (isVideo) {\n        const { width, height, duration } = quick;\n        if (duration !== undefined) {\n          attributes.push(new GramJs.DocumentAttributeVideo({\n            duration,\n            w: width,\n            h: height,\n            supportsStreaming: true,\n          }));\n        }\n      }\n    }\n\n    if (audio) {\n      const { duration, title, performer } = audio;\n      attributes.push(new GramJs.DocumentAttributeAudio({\n        duration,\n        title,\n        performer,\n      }));\n    }\n\n    if (voice) {\n      const { duration, waveform } = voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      attributes.push(new GramJs.DocumentAttributeAudio({\n        voice: true,\n        duration,\n        waveform: Buffer.from(inputWaveform),\n      }));\n    }\n  }\n\n  return new GramJs.InputMediaUploadedDocument({\n    file: inputFile,\n    mimeType,\n    attributes,\n    thumb,\n    forceFile: shouldSendAsFile,\n    spoiler: shouldSendAsSpoiler,\n    ttlSeconds,\n  });\n}\n\nexport async function pinMessage({\n  chat, messageId, isUnpin, isOneSide, isSilent,\n}: { chat: ApiChat; messageId: number; isUnpin: boolean; isOneSide?: boolean; isSilent?: boolean }) {\n  await invokeRequest(new GramJs.messages.UpdatePinnedMessage({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: messageId,\n    ...(isUnpin && { unpin: true }),\n    ...(isOneSide && { pmOneside: true }),\n    ...(isSilent && { silent: true }),\n  }));\n}\n\nexport async function unpinAllMessages({ chat, threadId }: { chat: ApiChat; threadId?: ThreadId }) {\n  const result = await invokeRequest(new GramJs.messages.UnpinAllMessages({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    ...(threadId && { topMsgId: Number(threadId) }),\n  }));\n\n  if (!result) return;\n\n  processAffectedHistory(chat, result);\n\n  if (result.offset) {\n    await unpinAllMessages({ chat, threadId });\n  }\n}\n\nexport async function deleteMessages({\n  chat, messageIds, shouldDeleteForAll,\n}: {\n  chat: ApiChat; messageIds: number[]; shouldDeleteForAll?: boolean;\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  const result = await invokeRequest(\n    isChannel\n      ? new GramJs.channels.DeleteMessages({\n        channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n        id: messageIds,\n      })\n      : new GramJs.messages.DeleteMessages({\n        id: messageIds,\n        ...(shouldDeleteForAll && { revoke: true }),\n      }),\n  );\n\n  if (!result) {\n    return;\n  }\n\n  processAffectedHistory(chat, result);\n\n  sendApiUpdate({\n    '@type': 'deleteMessages',\n    ids: messageIds,\n    ...(isChannel && { chatId: chat.id }),\n  });\n}\n\nexport function deleteScheduledMessages({\n  chat, messageIds,\n}: {\n  chat: ApiChat; messageIds: number[];\n}) {\n  invokeRequest(new GramJs.messages.DeleteScheduledMessages({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: messageIds,\n  }));\n}\n\nexport async function deleteHistory({\n  chat, shouldDeleteForAll,\n}: {\n  chat: ApiChat; shouldDeleteForAll?: boolean; maxId?: number;\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n  const result = await invokeRequest(\n    isChannel\n      ? new GramJs.channels.DeleteHistory({\n        channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n      })\n      : new GramJs.messages.DeleteHistory({\n        peer: buildInputPeer(chat.id, chat.accessHash),\n        ...(shouldDeleteForAll && { revoke: true }),\n        ...(!shouldDeleteForAll && { just_clear: true }),\n      }),\n  );\n\n  if (!result) {\n    return;\n  }\n\n  if ('offset' in result) {\n    processAffectedHistory(chat, result);\n\n    if (result.offset) {\n      await deleteHistory({ chat, shouldDeleteForAll });\n      return;\n    }\n  }\n\n  sendApiUpdate({\n    '@type': 'deleteHistory',\n    chatId: chat.id,\n  });\n}\n\nexport async function deleteSavedHistory({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  const result = await invokeRequest(new GramJs.messages.DeleteSavedHistory({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result) {\n    return;\n  }\n\n  processAffectedHistory(chat, result);\n\n  if (result.offset) {\n    await deleteSavedHistory({ chat });\n    return;\n  }\n\n  sendApiUpdate({\n    '@type': 'deleteSavedHistory',\n    chatId: chat.id,\n  });\n}\n\nexport async function reportMessages({\n  peer, messageIds, description, option,\n}: {\n  peer: ApiPeer; messageIds: number[]; description: string; option: string;\n}) {\n  try {\n    const result = await invokeRequest(new GramJs.messages.Report({\n      peer: buildInputPeer(peer.id, peer.accessHash),\n      id: messageIds,\n      option: deserializeBytes(option),\n      message: description,\n    }), { shouldThrow: true });\n\n    if (!result) return undefined;\n\n    return { result: buildApiReportResult(result), error: undefined };\n  } catch (err: any) {\n    const errorMessage = (err as ApiError).message;\n\n    if (errorMessage === MESSAGE_ID_REQUIRED_ERROR) {\n      return {\n        result: undefined,\n        error: errorMessage,\n      };\n    }\n\n    throw err;\n  }\n}\n\nexport function reportChannelSpam({\n  peer, chat, messageIds,\n}: {\n  peer: ApiPeer; chat: ApiChat; messageIds: number[];\n}) {\n  return invokeRequest(new GramJs.channels.ReportSpam({\n    participant: buildInputPeer(peer.id, peer.accessHash),\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    id: messageIds,\n  }));\n}\n\nexport async function sendMessageAction({\n  peer, threadId, action,\n}: {\n  peer: ApiPeer; threadId?: ThreadId; action: ApiSendMessageAction;\n}) {\n  const gramAction = buildSendMessageAction(action);\n  if (!gramAction) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn('Unsupported message action', action);\n    }\n    return undefined;\n  }\n\n  try {\n    const result = await invokeRequest(new GramJs.messages.SetTyping({\n      peer: buildInputPeer(peer.id, peer.accessHash),\n      topMsgId: Number(threadId),\n      action: gramAction,\n    }), {\n      shouldThrow: true,\n      abortControllerChatId: peer.id,\n      abortControllerThreadId: threadId,\n    });\n    return result;\n  } catch (error) {\n    // Prevent error from being displayed in UI\n  }\n  return undefined;\n}\n\nexport async function markMessageListRead({\n  chat, threadId, maxId = 0,\n}: {\n  chat: ApiChat; threadId: ThreadId; maxId?: number;\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  // Workaround for local message IDs overflowing some internal `Buffer` range check\n  const fixedMaxId = Math.min(maxId, MAX_INT_32);\n  if (isChannel && threadId === MAIN_THREAD_ID) {\n    await invokeRequest(new GramJs.channels.ReadHistory({\n      channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n      maxId: fixedMaxId,\n    }));\n  } else if (isChannel) {\n    await invokeRequest(new GramJs.messages.ReadDiscussion({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      msgId: Number(threadId),\n      readMaxId: fixedMaxId,\n    }));\n  } else {\n    const result = await invokeRequest(new GramJs.messages.ReadHistory({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      maxId: fixedMaxId,\n    }));\n\n    if (result) {\n      processAffectedHistory(chat, result);\n    }\n  }\n\n  if (threadId === MAIN_THREAD_ID) {\n    void requestChatUpdate({ chat, noLastMessage: true });\n  } else if (chat.isForum) {\n    sendApiUpdate({\n      '@type': 'updateTopic',\n      chatId: chat.id,\n      topicId: Number(threadId),\n    });\n  }\n}\n\nexport async function markMessagesRead({\n  chat, messageIds,\n}: {\n  chat: ApiChat; messageIds: number[];\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  const result = await invokeRequest(\n    isChannel\n      ? new GramJs.channels.ReadMessageContents({\n        channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n        id: messageIds,\n      })\n      : new GramJs.messages.ReadMessageContents({\n        id: messageIds,\n      }),\n  );\n\n  if (!result) {\n    return;\n  }\n\n  if (result !== true) {\n    processAffectedHistory(chat, result);\n  }\n\n  sendApiUpdate({\n    ...(isChannel ? {\n      '@type': 'updateChannelMessages',\n      channelId: chat.id,\n    } : {\n      '@type': 'updateCommonBoxMessages',\n    }),\n    ids: messageIds,\n    messageUpdate: {\n      hasUnreadMention: false,\n      isMediaUnread: false,\n    },\n  });\n}\n\nexport async function fetchMessageViews({\n  chat, ids, shouldIncrement,\n}: {\n  chat: ApiChat;\n  ids: number[];\n  shouldIncrement?: boolean;\n}) {\n  const chunks = split(ids, API_GENERAL_ID_LIMIT);\n  const results = await Promise.all(chunks.map((chunkIds) => (\n    invokeRequest(new GramJs.messages.GetMessagesViews({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      id: chunkIds,\n      increment: shouldIncrement,\n    }))\n  )));\n\n  if (!results || results.some((result) => !result)) return undefined;\n\n  const viewsList = results.flatMap((result) => result!.views);\n\n  const viewsInfo = ids.map((id, index) => {\n    const { views, forwards, replies } = viewsList[index];\n    return {\n      id,\n      views,\n      forwards,\n      threadInfo: replies ? buildApiThreadInfo(replies, id, chat.id) : undefined,\n    };\n  });\n\n  return {\n    viewsInfo,\n  };\n}\n\nexport async function fetchFactChecks({\n  chat, ids,\n}: {\n  chat: ApiChat;\n  ids: number[];\n}) {\n  const chunks = split(ids, API_GENERAL_ID_LIMIT);\n  const results = await Promise.all(chunks.map((chunkIds) => (\n    invokeRequest(new GramJs.messages.GetFactCheck({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      msgId: chunkIds,\n    }))\n  )));\n\n  if (!results || results.some((result) => !result)) return undefined;\n\n  return results.flatMap((result) => result!).map(buildApiFactCheck);\n}\n\nexport function fetchPaidReactionPrivacy() {\n  return invokeRequest(new GramJs.messages.GetPaidReactionPrivacy(), { shouldReturnTrue: true });\n}\n\nexport function reportMessagesDelivery({\n  chat, messageIds,\n}: {\n  chat: ApiChat;\n  messageIds: number[];\n}) {\n  return invokeRequest(new GramJs.messages.ReportMessagesDelivery({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: messageIds,\n  }));\n}\n\nexport async function fetchDiscussionMessage({\n  chat, messageId,\n}: {\n  chat: ApiChat;\n  messageId: number;\n}) {\n  const [result, replies] = await Promise.all([\n    invokeRequest(new GramJs.messages.GetDiscussionMessage({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      msgId: messageId,\n    }), {\n      abortControllerChatId: chat.id,\n      abortControllerThreadId: messageId,\n    }),\n    fetchMessages({\n      chat,\n      threadId: messageId,\n      offsetId: 1,\n      addOffset: -1,\n      limit: 1,\n    }),\n  ]);\n\n  if (!result || !replies) return undefined;\n\n  const topMessages = result.messages.map(buildApiMessage).filter(Boolean);\n  const messages = topMessages.concat(replies.messages);\n  const threadId = result.messages[result.messages.length - 1]?.id;\n\n  if (!threadId) return undefined;\n\n  const {\n    unreadCount, maxId, readInboxMaxId, readOutboxMaxId,\n  } = result;\n\n  return {\n    messages,\n    topMessages,\n    unreadCount,\n    threadId,\n    lastReadInboxMessageId: readInboxMaxId,\n    lastReadOutboxMessageId: readOutboxMaxId,\n    lastMessageId: maxId,\n    chatId: topMessages[0]?.chatId,\n    firstMessageId: replies.messages[0]?.id,\n  };\n}\n\nexport async function searchMessagesInChat({\n  peer, isSavedDialog, savedTag, type, query = '', threadId, minDate, maxDate, ...pagination\n}: {\n  peer: ApiPeer;\n  isSavedDialog?: boolean;\n  savedTag?: ApiReaction;\n  type?: ApiMessageSearchType | ApiGlobalMessageSearchType;\n  query?: string;\n  threadId?: ThreadId;\n  offsetId?: number;\n  addOffset?: number;\n  limit: number;\n  minDate?: number;\n  maxDate?: number;\n}): Promise<SearchResults | undefined> {\n  let filter;\n  switch (type) {\n    case 'media':\n      filter = new GramJs.InputMessagesFilterPhotoVideo();\n      break;\n    case 'documents':\n      filter = new GramJs.InputMessagesFilterDocument();\n      break;\n    case 'links':\n      filter = new GramJs.InputMessagesFilterUrl();\n      break;\n    case 'audio':\n      filter = new GramJs.InputMessagesFilterMusic();\n      break;\n    case 'voice':\n      filter = new GramJs.InputMessagesFilterRoundVoice();\n      break;\n    case 'profilePhoto':\n      filter = new GramJs.InputMessagesFilterChatPhotos();\n      break;\n    case 'text':\n    default: {\n      filter = new GramJs.InputMessagesFilterEmpty();\n    }\n  }\n\n  const inputPeer = buildInputPeer(peer.id, peer.accessHash);\n\n  const result = await invokeRequest(new GramJs.messages.Search({\n    peer: isSavedDialog ? new GramJs.InputPeerSelf() : inputPeer,\n    savedPeerId: isSavedDialog ? inputPeer : undefined,\n    savedReaction: savedTag && [buildInputReaction(savedTag)],\n    topMsgId: threadId !== MAIN_THREAD_ID && !isSavedDialog ? Number(threadId) : undefined,\n    filter,\n    q: query,\n    minDate,\n    maxDate,\n    ...pagination,\n  }), {\n    abortControllerChatId: peer.id,\n    abortControllerThreadId: threadId,\n  });\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  const userStatusesById = buildApiUserStatuses(result.users);\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n\n  let totalCount = messages.length;\n  let nextOffsetId: number | undefined;\n  if (result instanceof GramJs.messages.MessagesSlice || result instanceof GramJs.messages.ChannelMessages) {\n    totalCount = result.count;\n\n    if (messages.length) {\n      nextOffsetId = messages[messages.length - 1].id;\n    }\n  }\n\n  return {\n    userStatusesById,\n    messages,\n    totalCount,\n    nextOffsetId,\n  };\n}\n\nexport async function searchMessagesGlobal({\n  query, offsetRate = 0, offsetPeer, offsetId, limit, type = 'text', minDate, maxDate, context = 'all',\n}: {\n  query: string;\n  offsetRate?: number;\n  offsetPeer?: ApiPeer;\n  offsetId?: number;\n  limit: number;\n  type?: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  minDate?: number;\n  maxDate?: number;\n}): Promise<SearchResults | undefined> {\n  let filter;\n  switch (type) {\n    case 'media':\n      filter = new GramJs.InputMessagesFilterPhotoVideo();\n      break;\n    case 'documents':\n      filter = new GramJs.InputMessagesFilterDocument();\n      break;\n    case 'links':\n      filter = new GramJs.InputMessagesFilterUrl();\n      break;\n    case 'audio':\n      filter = new GramJs.InputMessagesFilterMusic();\n      break;\n    case 'voice':\n      filter = new GramJs.InputMessagesFilterRoundVoice();\n      break;\n    case 'text':\n    default: {\n      if (!query && !(maxDate && minDate)) {\n        return undefined;\n      }\n\n      filter = new GramJs.InputMessagesFilterEmpty();\n    }\n  }\n\n  const peer = (offsetPeer && buildInputPeer(offsetPeer.id, offsetPeer.accessHash)) || new GramJs.InputPeerEmpty();\n\n  const result = await invokeRequest(new GramJs.messages.SearchGlobal({\n    q: query,\n    offsetRate,\n    offsetPeer: peer,\n    offsetId,\n    broadcastsOnly: type === 'channels' || context === 'channels' || undefined,\n    groupsOnly: context === 'groups' || undefined,\n    usersOnly: context === 'users' || undefined,\n    limit,\n    filter,\n    minDate,\n    maxDate,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  const userStatusesById = buildApiUserStatuses(result.users);\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n\n  let totalCount = messages.length;\n  if (result instanceof GramJs.messages.MessagesSlice || result instanceof GramJs.messages.ChannelMessages) {\n    totalCount = result.count;\n  } else {\n    totalCount = result.messages.length;\n  }\n\n  const lastMessage = result.messages[result.messages.length - 1];\n  const nextOffsetPeerId = resolveMessageApiChatId(lastMessage);\n  const nextOffsetRate = 'nextRate' in result && result.nextRate ? result.nextRate : undefined;\n  const nextOffsetId = lastMessage?.id;\n\n  return {\n    messages,\n    userStatusesById,\n    totalCount,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    nextOffsetId,\n  };\n}\n\nexport async function searchHashtagPosts({\n  hashtag, offsetRate, offsetPeer, offsetId, limit,\n}: {\n  hashtag: string;\n  offsetRate?: number;\n  offsetPeer?: ApiPeer;\n  offsetId?: number;\n  limit?: number;\n}): Promise<SearchResults | undefined> {\n  const peer = (offsetPeer && buildInputPeer(offsetPeer.id, offsetPeer.accessHash)) || new GramJs.InputPeerEmpty();\n  const result = await invokeRequest(new GramJs.channels.SearchPosts({\n    hashtag,\n    offsetRate,\n    offsetId,\n    offsetPeer: peer,\n    limit,\n  }));\n\n  if (!result || result instanceof GramJs.messages.MessagesNotModified) {\n    return undefined;\n  }\n\n  const userStatusesById = buildApiUserStatuses(result.users);\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n\n  let totalCount = messages.length;\n  if (result instanceof GramJs.messages.MessagesSlice || result instanceof GramJs.messages.ChannelMessages) {\n    totalCount = result.count;\n  } else {\n    totalCount = result.messages.length;\n  }\n\n  const lastMessage = result.messages[result.messages.length - 1];\n  const nextOffsetPeerId = resolveMessageApiChatId(lastMessage);\n  const nextOffsetRate = 'nextRate' in result && result.nextRate ? result.nextRate : undefined;\n  const nextOffsetId = lastMessage?.id;\n\n  return {\n    messages,\n    userStatusesById,\n    totalCount,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    nextOffsetId,\n  };\n}\n\nexport async function fetchWebPagePreview({\n  text,\n}: {\n  text: ApiFormattedText;\n}) {\n  const textWithEntities = buildInputTextWithEntities(text);\n  const preview = await invokeRequest(new GramJs.messages.GetWebPagePreview({\n    message: textWithEntities.text,\n    entities: textWithEntities.entities,\n  }));\n\n  return preview && buildWebPage(preview.media);\n}\n\nexport async function sendPollVote({\n  chat, messageId, options,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  options: string[];\n}) {\n  const { id, accessHash } = chat;\n\n  await invokeRequest(new GramJs.messages.SendVote({\n    peer: buildInputPeer(id, accessHash),\n    msgId: messageId,\n    options: options.map(deserializeBytes),\n  }));\n}\n\nexport async function closePoll({\n  chat, messageId, poll,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  poll: ApiPoll;\n}) {\n  const { id, accessHash } = chat;\n\n  await invokeRequest(new GramJs.messages.EditMessage({\n    peer: buildInputPeer(id, accessHash),\n    id: messageId,\n    media: buildInputPollFromExisting(poll, true),\n  }));\n}\n\nexport async function loadPollOptionResults({\n  chat, messageId, option, offset, limit, shouldResetVoters,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  option?: string;\n  offset?: string;\n  limit?: number;\n  shouldResetVoters?: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetPollVotes({\n    peer: buildInputPeer(id, accessHash),\n    id: messageId,\n    ...(option && { option: deserializeBytes(option) }),\n    ...(offset && { offset }),\n    ...(limit && { limit }),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  const votes = result.votes.map((vote) => ({\n    peerId: getApiChatIdFromMtpPeer(vote.peer),\n    date: vote.date,\n  }));\n\n  return {\n    count: result.count,\n    votes,\n    nextOffset: result.nextOffset,\n    shouldResetVoters,\n  };\n}\n\nexport async function fetchExtendedMedia({\n  chat, ids,\n}: {\n  chat: ApiChat;\n  ids: number[];\n}) {\n  await invokeRequest(new GramJs.messages.GetExtendedMedia({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: ids,\n  }));\n}\n\nexport async function forwardMessages({\n  fromChat,\n  toChat,\n  toThreadId,\n  messages,\n  isSilent,\n  scheduledAt,\n  sendAs,\n  withMyScore,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n  wasDrafted,\n  lastMessageId,\n}: {\n  fromChat: ApiChat;\n  toChat: ApiChat;\n  toThreadId?: ThreadId;\n  messages: ApiMessage[];\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  withMyScore?: boolean;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n}) {\n  const messageIds = messages.map(({ id }) => id);\n  const randomIds = messages.map(generateRandomBigInt);\n  const localMessages: Record<string, ApiMessage> = {};\n\n  messages.forEach((message, index) => {\n    const localMessage = buildLocalForwardedMessage({\n      toChat,\n      toThreadId: Number(toThreadId),\n      message,\n      scheduledAt,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n      lastMessageId,\n      sendAs,\n    });\n    localMessages[randomIds[index].toString()] = localMessage;\n\n    sendApiUpdate({\n      '@type': localMessage.isScheduled ? 'newScheduledMessage' : 'newMessage',\n      id: localMessage.id,\n      chatId: toChat.id,\n      message: localMessage,\n      wasDrafted,\n    });\n  });\n\n  try {\n    const update = await invokeRequest(new GramJs.messages.ForwardMessages({\n      fromPeer: buildInputPeer(fromChat.id, fromChat.accessHash),\n      toPeer: buildInputPeer(toChat.id, toChat.accessHash),\n      randomId: randomIds,\n      id: messageIds,\n      withMyScore: withMyScore || undefined,\n      silent: isSilent || undefined,\n      dropAuthor: noAuthors || undefined,\n      dropMediaCaptions: noCaptions || undefined,\n      ...(toThreadId && { topMsgId: Number(toThreadId) }),\n      ...(scheduledAt && { scheduleDate: scheduledAt }),\n      ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n    }), {\n      shouldThrow: true,\n      shouldIgnoreUpdates: true,\n    });\n    if (update) handleMultipleLocalMessagesUpdate(localMessages, update);\n  } catch (error: any) {\n    Object.values(localMessages).forEach((localMessage) => {\n      sendApiUpdate({\n        '@type': 'updateMessageSendFailed',\n        chatId: toChat.id,\n        localId: localMessage.id,\n        error: error.message,\n      });\n    });\n  }\n}\n\nexport async function findFirstMessageIdAfterDate({\n  chat,\n  timestamp,\n}: {\n  chat: ApiChat;\n  timestamp: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetHistory({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    offsetDate: timestamp,\n    addOffset: -1,\n    limit: 1,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages || !result.messages.length\n  ) {\n    return undefined;\n  }\n\n  return result.messages[0].id;\n}\n\nexport async function fetchScheduledHistory({ chat }: { chat: ApiChat }) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetScheduledHistory({\n    peer: buildInputPeer(id, accessHash),\n  }), {\n    abortControllerChatId: id,\n  });\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n\n  return {\n    messages,\n  };\n}\n\nexport async function sendScheduledMessages({ chat, ids }: { chat: ApiChat; ids: number[] }) {\n  const { id, accessHash } = chat;\n\n  await invokeRequest(new GramJs.messages.SendScheduledMessages({\n    peer: buildInputPeer(id, accessHash),\n    id: ids,\n  }));\n}\n\nexport async function fetchPinnedMessages({ chat, threadId }: { chat: ApiChat; threadId: ThreadId }) {\n  const result = await invokeRequest(new GramJs.messages.Search(\n    {\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      filter: new GramJs.InputMessagesFilterPinned(),\n      q: '',\n      limit: PINNED_MESSAGES_LIMIT,\n      topMsgId: Number(threadId),\n    },\n  ), {\n    abortControllerChatId: chat.id,\n    abortControllerThreadId: threadId,\n  });\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n\n  return {\n    messages,\n  };\n}\n\nexport async function fetchSeenBy({ chat, messageId }: { chat: ApiChat; messageId: number }) {\n  const result = await invokeRequest(new GramJs.messages.GetMessageReadParticipants({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId: messageId,\n  }));\n\n  return result\n    ? result.reduce((acc, readDate) => {\n      acc[readDate.userId.toString()] = readDate.date;\n\n      return acc;\n    }, {} as Record<string, number>)\n    : undefined;\n}\n\nexport async function fetchSendAs({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  const result = await invokeRequest(new GramJs.channels.GetSendAs({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }), {\n    shouldIgnoreErrors: true,\n    abortControllerChatId: chat.id,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    sendAs: result.peers.map(buildApiSendAsPeerId),\n  };\n}\n\nexport function saveDefaultSendAs({\n  sendAs, chat,\n}: {\n  sendAs: ApiPeer; chat: ApiChat;\n}) {\n  return invokeRequest(new GramJs.messages.SaveDefaultSendAs({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    sendAs: buildInputPeer(sendAs.id, sendAs.accessHash),\n  }));\n}\n\nexport async function fetchSponsoredMessages({ peer }: { peer: ApiPeer }) {\n  const result = await invokeRequest(new GramJs.messages.GetSponsoredMessages({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.SponsoredMessagesEmpty || !result.messages.length) {\n    return undefined;\n  }\n\n  const messages = result.messages\n    .map((message) => buildApiSponsoredMessage(message, peer.id))\n    .filter(Boolean);\n\n  return {\n    messages,\n  };\n}\n\nexport async function viewSponsoredMessage({ peer, random }: { peer: ApiPeer; random: string }) {\n  await invokeRequest(new GramJs.messages.ViewSponsoredMessage({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    randomId: deserializeBytes(random),\n  }));\n}\n\nexport function clickSponsoredMessage({\n  peer,\n  random,\n  isMedia,\n  isFullscreen,\n}: {\n  peer: ApiPeer;\n  random: string;\n  isMedia?: boolean;\n  isFullscreen?: boolean;\n}) {\n  return invokeRequest(new GramJs.messages.ClickSponsoredMessage({\n    media: isMedia || undefined,\n    fullscreen: isFullscreen || undefined,\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    randomId: deserializeBytes(random),\n  }));\n}\n\nexport async function reportSponsoredMessage({\n  peer,\n  randomId,\n  option,\n}: {\n  peer: ApiPeer;\n  randomId: string;\n  option: string;\n}) {\n  try {\n    const result = await invokeRequest(new GramJs.messages.ReportSponsoredMessage({\n      peer: buildInputPeer(peer.id, peer.accessHash),\n      randomId: deserializeBytes(randomId),\n      option: deserializeBytes(option),\n    }), {\n      shouldThrow: true,\n    });\n\n    if (!result) {\n      return undefined;\n    }\n\n    return buildApiSponsoredMessageReportResult(result);\n  } catch (err: unknown) {\n    if (err instanceof RPCError && err.errorMessage === 'PREMIUM_ACCOUNT_REQUIRED') {\n      return {\n        type: 'premiumRequired' as const,\n      };\n    }\n    return undefined;\n  }\n}\n\nexport async function readAllMentions({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  const result = await invokeRequest(new GramJs.messages.ReadMentions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result) return;\n\n  processAffectedHistory(chat, result);\n\n  if (result.offset) {\n    await readAllMentions({ chat });\n  }\n}\n\nexport async function readAllReactions({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  const result = await invokeRequest(new GramJs.messages.ReadReactions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result) return;\n\n  processAffectedHistory(chat, result);\n\n  if (result.offset) {\n    await readAllReactions({ chat });\n  }\n}\n\nexport async function fetchUnreadMentions({\n  chat, ...pagination\n}: {\n  chat: ApiChat;\n  offsetId?: number;\n  addOffset?: number;\n  maxId?: number;\n  minId?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetUnreadMentions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    limit: MENTION_UNREAD_SLICE,\n    ...pagination,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n\n  return {\n    messages,\n  };\n}\n\nexport async function fetchUnreadReactions({\n  chat, ...pagination\n}: {\n  chat: ApiChat;\n  offsetId?: number;\n  addOffset?: number;\n  maxId?: number;\n  minId?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetUnreadReactions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    limit: REACTION_UNREAD_SLICE,\n    ...pagination,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n\n  return {\n    messages,\n  };\n}\n\nexport async function transcribeAudio({\n  chat, messageId,\n}: {\n  chat: ApiChat; messageId: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.TranscribeAudio({\n    msgId: messageId,\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result) return undefined;\n\n  sendApiUpdate({\n    '@type': 'updateTranscribedAudio',\n    isPending: result.pending,\n    transcriptionId: result.transcriptionId.toString(),\n    text: result.text,\n  });\n\n  return result.transcriptionId.toString();\n}\n\nexport async function translateText(params: TranslateTextParams) {\n  let result;\n  const isMessageTranslation = 'chat' in params;\n  if (isMessageTranslation) {\n    const { chat, messageIds, toLanguageCode } = params;\n    result = await invokeRequest(new GramJs.messages.TranslateText({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      id: messageIds,\n      toLang: toLanguageCode,\n    }));\n  } else {\n    const { text, toLanguageCode } = params;\n    result = await invokeRequest(new GramJs.messages.TranslateText({\n      text: text.map((t) => buildInputTextWithEntities(t)),\n      toLang: toLanguageCode,\n    }));\n  }\n\n  if (!result) return undefined;\n\n  const formattedText = result.result.map((r) => buildApiFormattedText(r));\n\n  if (isMessageTranslation) {\n    sendApiUpdate({\n      '@type': 'updateMessageTranslations',\n      chatId: params.chat.id,\n      messageIds: params.messageIds,\n      translations: formattedText,\n      toLanguageCode: params.toLanguageCode,\n    });\n  }\n\n  return formattedText;\n}\n\nfunction handleMultipleLocalMessagesUpdate(\n  localMessages: Record<string, ApiMessage>, update: GramJs.TypeUpdates,\n) {\n  if (!('updates' in update)) {\n    handleGramJsUpdate(update);\n    return;\n  }\n\n  const updateMessageIds = update.updates.filter((u): u is GramJs.UpdateMessageID => (\n    u instanceof GramJs.UpdateMessageID\n  ));\n\n  // Server can return `UpdateNewScheduledMessage` that we currently process as video that requires processing\n  updateMessageIds.forEach((updateMessageId) => {\n    const updateNewScheduledMessage = update.updates\n      .find((scheduledUpdate): scheduledUpdate is GramJs.UpdateNewScheduledMessage => {\n        if (!(scheduledUpdate instanceof GramJs.UpdateNewScheduledMessage)) return false;\n        return scheduledUpdate.message.id === updateMessageId.id;\n      });\n\n    const localMessage = localMessages[updateMessageId.randomId.toString()];\n    handleLocalMessageUpdate(localMessage, updateMessageId, updateNewScheduledMessage);\n  });\n\n  const otherUpdates = update.updates.filter((u) => {\n    if (u instanceof GramJs.UpdateMessageID) return false;\n    if (u instanceof GramJs.UpdateNewScheduledMessage) return false;\n    return true;\n  });\n\n  // Illegal monkey patching. Easier than creating mock update object\n  update.updates = otherUpdates;\n\n  handleGramJsUpdate(update);\n}\n\nfunction handleLocalMessageUpdate(\n  localMessage: ApiMessage, update: GramJs.TypeUpdates, scheduledMessageUpdate?: GramJs.UpdateNewScheduledMessage,\n) {\n  let messageUpdate;\n  if (update instanceof GramJs.UpdateShortSentMessage || update instanceof GramJs.UpdateMessageID) {\n    messageUpdate = update;\n  } else if ('updates' in update) {\n    messageUpdate = update.updates.find((u): u is GramJs.UpdateMessageID => u instanceof GramJs.UpdateMessageID);\n    scheduledMessageUpdate = update.updates.find((u): u is GramJs.UpdateNewScheduledMessage => (\n      u instanceof GramJs.UpdateNewScheduledMessage\n    ));\n  }\n\n  if (!messageUpdate) {\n    handleGramJsUpdate(update);\n    return;\n  }\n\n  let newContent: MediaContent | undefined;\n  let poll: ApiPoll | undefined;\n  if (messageUpdate instanceof GramJs.UpdateShortSentMessage) {\n    if (localMessage.content.text && messageUpdate.entities) {\n      newContent = {\n        text: buildMessageTextContent(localMessage.content.text.text, messageUpdate.entities),\n      };\n    }\n    if (messageUpdate.media) {\n      newContent = {\n        ...newContent,\n        ...buildMessageMediaContent(messageUpdate.media, {\n          peerId: buildPeer(localMessage.chatId), id: messageUpdate.id,\n        }),\n      };\n      poll = buildPollFromMedia(messageUpdate.media);\n    }\n\n    const mtpMessage = buildMessageFromUpdate(messageUpdate.id, localMessage.chatId, messageUpdate);\n    processMessageAndUpdateThreadInfo(mtpMessage);\n  }\n\n  const newScheduledMessage = scheduledMessageUpdate?.message && buildApiMessage(scheduledMessageUpdate.message);\n\n  // Edge case for \"Send When Online\"\n  const isSentBefore = 'date' in messageUpdate && messageUpdate.date < getServerTime();\n\n  if (newScheduledMessage?.isVideoProcessingPending) {\n    sendApiUpdate({\n      '@type': 'updateVideoProcessingPending',\n      chatId: localMessage.chatId,\n      localId: localMessage.id,\n      newScheduledMessageId: newScheduledMessage?.id,\n    });\n  } else {\n    const updatedMessage: ApiMessage = {\n      ...localMessage,\n      ...(newContent && {\n        content: {\n          ...localMessage.content,\n          ...newContent,\n        },\n      }),\n      id: messageUpdate.id,\n      sendingState: undefined,\n      ...('date' in messageUpdate && { date: messageUpdate.date }),\n    };\n\n    sendApiUpdate({\n      '@type': localMessage.isScheduled && !isSentBefore\n        ? 'updateScheduledMessageSendSucceeded'\n        : 'updateMessageSendSucceeded',\n      chatId: localMessage.chatId,\n      localId: localMessage.id,\n      message: updatedMessage,\n      poll,\n    });\n  }\n\n  handleGramJsUpdate(update);\n}\n\nexport async function fetchOutboxReadDate({ chat, messageId }: { chat: ApiChat; messageId: number }) {\n  const { id, accessHash } = chat;\n  const peer = buildInputPeer(id, accessHash);\n\n  const result = await invokeRequest(new GramJs.messages.GetOutboxReadDate({\n    peer: peer as GramJs.TypeInputPeer,\n    msgId: messageId,\n  }), { shouldThrow: true });\n\n  if (!result) return undefined;\n\n  return { date: result.date };\n}\n\nexport async function fetchQuickReplies() {\n  const result = await invokeRequest(new GramJs.messages.GetQuickReplies({}));\n  if (!result || result instanceof GramJs.messages.QuickRepliesNotModified) return undefined;\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n\n  const quickReplies = result.quickReplies.map(buildApiQuickReply);\n\n  return {\n    messages,\n    quickReplies,\n  };\n}\n\nexport async function sendQuickReply({\n  chat,\n  shortcutId,\n}: {\n  chat: ApiChat;\n  shortcutId: number;\n}) {\n  // Remove this request when the client fully supports quick replies and caches them\n  const messages = await invokeRequest(new GramJs.messages.GetQuickReplyMessages({\n    shortcutId,\n  }));\n  if (!messages || messages instanceof GramJs.messages.MessagesNotModified) return;\n\n  const ids = messages.messages.map((m) => m.id);\n  const randomIds = ids.map(generateRandomBigInt);\n\n  const result = await invokeRequest(new GramJs.messages.SendQuickReplyMessages({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    shortcutId,\n    id: ids,\n    randomId: randomIds,\n  }), {\n    shouldIgnoreUpdates: true,\n  });\n\n  if (!result) return;\n\n  // Hack to prevent client from thinking that those messages were local\n  if ('updates' in result) {\n    const filteredUpdates = result.updates\n      .filter((u): u is GramJs.UpdateMessageID => !(u instanceof GramJs.UpdateMessageID));\n    result.updates = filteredUpdates;\n  }\n\n  handleGramJsUpdate(result);\n}\n\nexport async function exportMessageLink({\n  id, chat, shouldIncludeThread, shouldIncludeGrouped,\n}: {\n  id: number;\n  chat: ApiChat;\n  shouldIncludeThread?: boolean;\n  shouldIncludeGrouped?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.channels.ExportMessageLink({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    id,\n    thread: shouldIncludeThread || undefined,\n    grouped: shouldIncludeGrouped || undefined,\n  }));\n\n  return result?.link;\n}\n","import type { ApiMessage, ApiSponsoredMessage } from '../../api/types';\n\nexport type MessageKey = `msg${string}-${number}`;\n\nexport function getMessageKey(message: ApiMessage | ApiSponsoredMessage): MessageKey {\n  const {\n    chatId,\n  } = message;\n\n  if ('randomId' in message) {\n    return buildMessageKey(chatId, Number(message.randomId));\n  }\n  return buildMessageKey(chatId, message.previousLocalId || message.id);\n}\n\nexport function getMessageServerKey(message: ApiMessage): MessageKey | undefined {\n  if (isLocalMessageId(message.id)) {\n    return undefined;\n  }\n  const { chatId, id } = message;\n  return buildMessageKey(chatId, id);\n}\n\nexport function buildMessageKey(chatId: string, msgId: number): MessageKey {\n  return `msg${chatId}-${msgId}`;\n}\n\nexport function parseMessageKey(key: MessageKey) {\n  const match = key.match(/^msg(-?\\d+)-(\\d+)/)!;\n\n  return { chatId: match[1], messageId: Number(match[2]) };\n}\n\nexport function isLocalMessageId(id: number) {\n  return !Number.isInteger(id);\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChat, ApiPeer, ApiUser,\n} from '../../types';\n\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { buildApiPhoto } from '../apiBuilders/common';\nimport { buildApiPeerId } from '../apiBuilders/peers';\nimport { buildApiUser, buildApiUserFullInfo, buildApiUserStatuses } from '../apiBuilders/users';\nimport {\n  buildInputContact,\n  buildInputEmojiStatus,\n  buildInputEntity,\n  buildInputPeer,\n  buildMtpPeerId,\n  getEntityTypeById,\n} from '../gramjsBuilders';\nimport { addPhotoToLocalDb, addUserToLocalDb } from '../helpers/localDb';\nimport localDb from '../localDb';\nimport { sendApiUpdate } from '../updates/apiUpdateEmitter';\nimport { invokeRequest } from './client';\nimport { searchMessagesInChat } from './messages';\n\nexport async function fetchFullUser({\n  id,\n  accessHash,\n}: {\n  id: string;\n  accessHash?: string;\n}) {\n  const input = buildInputEntity(id, accessHash);\n  if (!(input instanceof GramJs.InputUser)) {\n    return undefined;\n  }\n\n  const result = await invokeRequest(new GramJs.users.GetFullUser({ id: input }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  if (result.fullUser.profilePhoto) {\n    addPhotoToLocalDb(result.fullUser.profilePhoto);\n  }\n\n  if (result.fullUser.personalPhoto) {\n    addPhotoToLocalDb(result.fullUser.personalPhoto);\n  }\n\n  if (result.fullUser.fallbackPhoto) {\n    addPhotoToLocalDb(result.fullUser.fallbackPhoto);\n  }\n\n  const botInfo = result.fullUser.botInfo;\n  if (botInfo?.descriptionPhoto) {\n    addPhotoToLocalDb(botInfo.descriptionPhoto);\n  }\n  if (botInfo?.descriptionDocument instanceof GramJs.Document) {\n    localDb.documents[botInfo.descriptionDocument.id.toString()] = botInfo.descriptionDocument;\n  }\n\n  if (result.fullUser.businessIntro?.sticker instanceof GramJs.Document) {\n    localDb.documents[result.fullUser.businessIntro.sticker.id.toString()] = result.fullUser.businessIntro.sticker;\n  }\n\n  const fullInfo = buildApiUserFullInfo(result);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  const user = users.find(({ id: userId }) => userId === id)!;\n\n  sendApiUpdate({\n    '@type': 'updateUser',\n    id,\n    user,\n    fullInfo,\n  });\n\n  return {\n    user,\n    fullInfo,\n    users,\n    chats,\n  };\n}\n\nexport async function fetchCommonChats(user: ApiUser, maxId?: string) {\n  const result = await invokeRequest(new GramJs.messages.GetCommonChats({\n    userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n    maxId: maxId ? buildMtpPeerId(maxId, getEntityTypeById(maxId)) : undefined,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const chatIds = chats.map(({ id: chatId }) => chatId);\n  const count = 'count' in result ? result.count : chatIds.length;\n\n  return { chatIds, count };\n}\n\nexport async function fetchNearestCountry() {\n  const dcInfo = await invokeRequest(new GramJs.help.GetNearestDc());\n\n  return dcInfo?.country;\n}\n\nexport async function fetchTopUsers() {\n  const topPeers = await invokeRequest(new GramJs.contacts.GetTopPeers({\n    correspondents: true,\n  }));\n  if (!(topPeers instanceof GramJs.contacts.TopPeers)) {\n    return undefined;\n  }\n\n  const users = topPeers.users.map(buildApiUser).filter((user): user is ApiUser => Boolean(user) && !user.isSelf);\n  const ids = users.map(({ id }) => id);\n\n  return {\n    ids,\n  };\n}\n\nexport async function fetchContactList() {\n  const result = await invokeRequest(new GramJs.contacts.GetContacts({ hash: BigInt('0') }));\n  if (!result || result instanceof GramJs.contacts.ContactsNotModified) {\n    return undefined;\n  }\n\n  const users = result.users.map(buildApiUser).filter(Boolean) as ApiUser[];\n  const userStatusesById = buildApiUserStatuses(result.users);\n\n  return {\n    users,\n    userStatusesById,\n  };\n}\n\nexport async function fetchUsers({ users }: { users: ApiUser[] }) {\n  const result = await invokeRequest(new GramJs.users.GetUsers({\n    id: users.map(({ id, accessHash }) => buildInputPeer(id, accessHash)),\n  }));\n  if (!result || !result.length) {\n    return undefined;\n  }\n\n  const apiUsers = result.map(buildApiUser).filter(Boolean) as ApiUser[];\n  const userStatusesById = buildApiUserStatuses(result);\n\n  return {\n    users: apiUsers,\n    userStatusesById,\n  };\n}\n\nexport async function importContact({\n  phone,\n  firstName,\n  lastName,\n}: {\n  phone?: string;\n  firstName?: string;\n  lastName?: string;\n}) {\n  const result = await invokeRequest(new GramJs.contacts.ImportContacts({\n    contacts: [buildInputContact({\n      phone: phone || '',\n      firstName: firstName || '',\n      lastName: lastName || '',\n    })],\n  }));\n\n  if (result instanceof GramJs.contacts.ImportedContacts && result.users.length) {\n    addUserToLocalDb(result.users[0]);\n  }\n\n  return result?.imported.length ? buildApiPeerId(result.imported[0].userId, 'user') : undefined;\n}\n\nexport function updateContact({\n  id,\n  accessHash,\n  phoneNumber = '',\n  firstName = '',\n  lastName = '',\n  shouldSharePhoneNumber = false,\n}: {\n  id: string;\n  accessHash?: string;\n  phoneNumber?: string;\n  firstName?: string;\n  lastName?: string;\n  shouldSharePhoneNumber?: boolean;\n}) {\n  return invokeRequest(new GramJs.contacts.AddContact({\n    id: buildInputEntity(id, accessHash) as GramJs.InputUser,\n    firstName,\n    lastName,\n    phone: phoneNumber,\n    ...(shouldSharePhoneNumber && { addPhonePrivacyException: shouldSharePhoneNumber }),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function deleteContact({\n  id,\n  accessHash,\n}: {\n  id: string;\n  accessHash?: string;\n}) {\n  const input = buildInputEntity(id, accessHash);\n  if (!(input instanceof GramJs.InputUser)) {\n    return;\n  }\n\n  const result = await invokeRequest(new GramJs.contacts.DeleteContacts({ id: [input] }));\n\n  if (!result) {\n    return;\n  }\n\n  sendApiUpdate({\n    '@type': 'deleteContact',\n    id,\n  });\n}\n\nexport async function fetchProfilePhotos({\n  peer,\n  offset = 0,\n  limit = 0,\n}: {\n  peer: ApiPeer;\n  offset?: number;\n  limit?: number;\n}) {\n  const chat = 'title' in peer ? peer as ApiChat : undefined;\n  const user = !chat ? peer as ApiUser : undefined;\n  if (user) {\n    const { id, accessHash } = user;\n\n    const result = await invokeRequest(new GramJs.photos.GetUserPhotos({\n      userId: buildInputEntity(id, accessHash) as GramJs.InputUser,\n      limit,\n      offset,\n      maxId: BigInt('0'),\n    }));\n\n    if (!result) {\n      return undefined;\n    }\n\n    result.photos.forEach(addPhotoToLocalDb);\n\n    const count = result instanceof GramJs.photos.PhotosSlice ? result.count : result.photos.length;\n    const proposedNextOffsetId = offset + result.photos.length;\n    const nextOffsetId = proposedNextOffsetId < count ? proposedNextOffsetId : undefined;\n\n    return {\n      count,\n      photos: result.photos\n        .filter((photo): photo is GramJs.Photo => photo instanceof GramJs.Photo)\n        .map((photo) => buildApiPhoto(photo)),\n      nextOffsetId,\n    };\n  }\n\n  if (chat?.isRestricted) return undefined;\n\n  const result = await searchMessagesInChat({\n    peer,\n    type: 'profilePhoto',\n    limit,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    messages, totalCount, nextOffsetId,\n  } = result;\n\n  return {\n    count: totalCount,\n    photos: messages.map((message) => message.content.action!.photo).filter(Boolean),\n    nextOffsetId,\n  };\n}\n\nexport function reportSpam(userOrChat: ApiPeer) {\n  const { id, accessHash } = userOrChat;\n\n  return invokeRequest(new GramJs.messages.ReportSpam({\n    peer: buildInputPeer(id, accessHash),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function updateEmojiStatus(emojiStatusId: string, expires?: number) {\n  return invokeRequest(new GramJs.account.UpdateEmojiStatus({\n    emojiStatus: buildInputEmojiStatus(emojiStatusId, expires),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function saveCloseFriends(userIds: string[]) {\n  const id = userIds.map((userId) => buildMtpPeerId(userId, 'user'));\n\n  return invokeRequest(new GramJs.contacts.EditCloseFriends({ id }), {\n    shouldReturnTrue: true,\n  });\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiSticker, ApiStickerSetInfo, ApiVideo,\n} from '../../types';\n\nimport { DEFAULT_GIF_SEARCH_BOT_USERNAME, RECENT_STATUS_LIMIT, RECENT_STICKERS_LIMIT } from '../../../config';\nimport { buildVideoFromDocument } from '../apiBuilders/messageContent';\nimport { buildApiEmojiStatus } from '../apiBuilders/peers';\nimport {\n  buildStickerSet, buildStickerSetCovered, processStickerPackResult, processStickerResult,\n} from '../apiBuilders/symbols';\nimport { buildInputDocument, buildInputStickerSet, buildInputStickerSetShortName } from '../gramjsBuilders';\nimport localDb from '../localDb';\nimport { sendApiUpdate } from '../updates/apiUpdateEmitter';\nimport { invokeRequest } from './client';\n\nexport async function fetchCustomEmojiSets({ hash = '0' }: { hash?: string }) {\n  const allStickers = await invokeRequest(new GramJs.messages.GetEmojiStickers({ hash: BigInt(hash) }));\n\n  if (!allStickers || allStickers instanceof GramJs.messages.AllStickersNotModified) {\n    return undefined;\n  }\n\n  allStickers.sets.forEach((stickerSet) => {\n    if (stickerSet.thumbs?.length || stickerSet.thumbDocumentId) {\n      localDb.stickerSets[String(stickerSet.id)] = stickerSet;\n    }\n  });\n\n  return {\n    hash: String(allStickers.hash),\n    sets: allStickers.sets.map(buildStickerSet),\n  };\n}\n\nexport async function fetchStickerSets({ hash = '0' }: { hash?: string }) {\n  const allStickers = await invokeRequest(new GramJs.messages.GetAllStickers({ hash: BigInt(hash) }));\n\n  if (!allStickers || allStickers instanceof GramJs.messages.AllStickersNotModified) {\n    return undefined;\n  }\n\n  allStickers.sets.forEach((stickerSet) => {\n    if (stickerSet.thumbs?.length) {\n      localDb.stickerSets[String(stickerSet.id)] = stickerSet;\n    }\n  });\n\n  return {\n    hash: String(allStickers.hash),\n    sets: allStickers.sets.map(buildStickerSet),\n  };\n}\n\nexport async function fetchRecentStickers({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetRecentStickers({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.RecentStickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    stickers: processStickerResult(result.stickers.slice(0, RECENT_STICKERS_LIMIT)),\n  };\n}\n\nexport async function fetchFavoriteStickers({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetFavedStickers({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.FavedStickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    stickers: processStickerResult(result.stickers),\n  };\n}\n\nexport async function fetchFeaturedStickers({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetFeaturedStickers({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.FeaturedStickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    isPremium: Boolean(result.premium),\n    sets: result.sets.map(buildStickerSetCovered),\n  };\n}\n\nexport async function fetchFeaturedEmojiStickers() {\n  const result = await invokeRequest(new GramJs.messages.GetFeaturedEmojiStickers({ hash: BigInt(0) }));\n\n  if (!result || result instanceof GramJs.messages.FeaturedStickersNotModified) {\n    return undefined;\n  }\n\n  result.sets.forEach(({ set }) => {\n    if (set.thumbDocumentId) {\n      localDb.stickerSets[String(set.id)] = set;\n    }\n  });\n\n  return {\n    isPremium: Boolean(result.premium),\n    sets: result.sets.map(buildStickerSetCovered),\n  };\n}\n\nexport async function faveSticker({\n  sticker,\n  unfave,\n}: {\n  sticker: ApiSticker;\n  unfave?: boolean;\n}) {\n  const request = new GramJs.messages.FaveSticker({\n    id: buildInputDocument(sticker),\n    unfave,\n  });\n\n  const result = await invokeRequest(request);\n  if (result) {\n    sendApiUpdate({\n      '@type': 'updateFavoriteStickers',\n    });\n  }\n}\n\nexport function removeRecentSticker({\n  sticker,\n}: {\n  sticker: ApiSticker;\n}) {\n  const request = new GramJs.messages.SaveRecentSticker({\n    id: buildInputDocument(sticker),\n    unsave: true,\n  });\n\n  return invokeRequest(request);\n}\n\nexport function clearRecentStickers() {\n  return invokeRequest(new GramJs.messages.ClearRecentStickers());\n}\n\nexport async function fetchStickers(\n  { stickerSetInfo }:\n  { stickerSetInfo: ApiStickerSetInfo },\n) {\n  if ('isMissing' in stickerSetInfo) return undefined;\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: 'id' in stickerSetInfo\n      ? buildInputStickerSet(stickerSetInfo.id, stickerSetInfo.accessHash)\n      : buildInputStickerSetShortName(stickerSetInfo.shortName),\n  }), {\n    shouldThrow: true,\n  });\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  localDb.stickerSets[String(result.set.id)] = result.set;\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n    packs: processStickerPackResult(result.packs),\n  };\n}\n\nexport async function fetchCustomEmoji({ documentId }: { documentId: string[] }) {\n  if (!documentId.length) return undefined;\n  const result = await invokeRequest(new GramJs.messages.GetCustomEmojiDocuments({\n    documentId: documentId.map((id) => BigInt(id)),\n  }));\n  if (!result) return undefined;\n\n  return processStickerResult(result);\n}\n\nexport async function fetchAnimatedEmojis() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetAnimatedEmoji(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchAnimatedEmojiEffects() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetAnimatedEmojiAnimations(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchGenericEmojiEffects() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetEmojiGenericAnimations(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchPremiumGifts() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetPremiumGifts(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchDefaultTopicIcons() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetEmojiDefaultTopicIcons(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchDefaultStatusEmojis() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetEmojiDefaultStatuses(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function searchStickers({ query, hash = '0' }: { query: string; hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.SearchStickerSets({\n    q: query,\n    hash: BigInt(hash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.FoundStickerSetsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    sets: result.sets.map(buildStickerSetCovered),\n  };\n}\n\nexport async function fetchSavedGifs({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetSavedGifs({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.SavedGifsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    gifs: processGifResult(result.gifs),\n  };\n}\n\nexport function saveGif({ gif, shouldUnsave }: { gif: ApiVideo; shouldUnsave?: boolean }) {\n  const request = new GramJs.messages.SaveGif({\n    id: buildInputDocument(gif),\n    unsave: shouldUnsave,\n  });\n\n  return invokeRequest(request, { shouldReturnTrue: true });\n}\n\nexport async function installStickerSet({ stickerSetId, accessHash }: { stickerSetId: string; accessHash: string }) {\n  const result = await invokeRequest(new GramJs.messages.InstallStickerSet({\n    stickerset: buildInputStickerSet(stickerSetId, accessHash),\n  }));\n\n  if (result) {\n    sendApiUpdate({\n      '@type': 'updateStickerSet',\n      id: stickerSetId,\n      stickerSet: { installedDate: Date.now() },\n    });\n  }\n}\n\nexport async function uninstallStickerSet({ stickerSetId, accessHash }: { stickerSetId: string; accessHash: string }) {\n  const result = await invokeRequest(new GramJs.messages.UninstallStickerSet({\n    stickerset: buildInputStickerSet(stickerSetId, accessHash),\n  }));\n\n  if (result) {\n    sendApiUpdate({\n      '@type': 'updateStickerSet',\n      id: stickerSetId,\n      stickerSet: { installedDate: undefined },\n    });\n  }\n}\n\nlet inputGifBot: GramJs.InputUser | undefined;\n\nexport async function searchGifs({\n  query,\n  offset = '',\n  username = DEFAULT_GIF_SEARCH_BOT_USERNAME,\n}: { query: string; offset?: string; username?: string }) {\n  if (!inputGifBot) {\n    const resolvedPeer = await invokeRequest(new GramJs.contacts.ResolveUsername({\n      username,\n    }));\n    if (!resolvedPeer || !(resolvedPeer.users[0] instanceof GramJs.User)) {\n      return undefined;\n    }\n\n    inputGifBot = new GramJs.InputUser({\n      userId: (resolvedPeer.peer as GramJs.PeerUser).userId,\n      accessHash: resolvedPeer.users[0].accessHash!,\n    });\n  }\n\n  const result = await invokeRequest(new GramJs.messages.GetInlineBotResults({\n    bot: inputGifBot,\n    peer: new GramJs.InputPeerEmpty(),\n    query,\n    offset,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  const documents = result.results\n    .map((foundGif) => {\n      if (foundGif instanceof GramJs.BotInlineMediaResult) {\n        return foundGif.document;\n      }\n\n      return undefined;\n    })\n    .filter(Boolean);\n\n  return {\n    nextOffset: result.nextOffset,\n    gifs: processGifResult(documents),\n  };\n}\n\nexport async function fetchStickersForEmoji({\n  emoji, hash = '0',\n}: { emoji: string; hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetStickers({\n    emoticon: emoji,\n    hash: BigInt(hash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.StickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    stickers: processStickerResult(result.stickers),\n    hash: String(result.hash),\n  };\n}\n\nexport async function fetchEmojiKeywords({ language, fromVersion }: {\n  language: string;\n  fromVersion?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetEmojiKeywordsDifference({\n    langCode: language,\n    fromVersion,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    language: result.langCode,\n    version: result.version,\n    keywords: result.keywords.reduce((acc, emojiKeyword) => {\n      acc[emojiKeyword.keyword] = emojiKeyword.emoticons;\n\n      return acc;\n    }, {} as Record<string, string[]>),\n  };\n}\n\nexport async function fetchRecentEmojiStatuses(hash = '0') {\n  const result = await invokeRequest(new GramJs.account.GetRecentEmojiStatuses({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.account.EmojiStatusesNotModified) {\n    return undefined;\n  }\n\n  const documentIds = result.statuses\n    .slice(0, RECENT_STATUS_LIMIT)\n    .map(buildApiEmojiStatus)\n    .filter(Boolean)\n    .map(({ documentId }) => documentId);\n  const emojiStatuses = await fetchCustomEmoji({ documentId: documentIds });\n\n  return {\n    hash: String(result.hash),\n    emojiStatuses,\n  };\n}\n\nfunction processGifResult(gifs: GramJs.TypeDocument[]) {\n  return gifs\n    .map((document) => {\n      if (document instanceof GramJs.Document) {\n        const gif = buildVideoFromDocument(document);\n        if (gif) {\n          localDb.documents[String(document.id)] = document;\n\n          return gif;\n        }\n      }\n\n      return undefined;\n    })\n    .filter(Boolean);\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChat, ApiError, ApiUser, ApiUsername,\n} from '../../types';\n\nimport { ACCEPTABLE_USERNAME_ERRORS } from '../../../config';\nimport { buildApiExportedInvite, buildChatInviteImporter } from '../apiBuilders/chats';\nimport { buildInputEntity, buildInputPeer } from '../gramjsBuilders';\nimport { sendApiUpdate } from '../updates/apiUpdateEmitter';\nimport { invokeRequest } from './client';\n\nexport async function checkChatUsername({ username }: { username: string }) {\n  try {\n    const result = await invokeRequest(new GramJs.channels.CheckUsername({\n      channel: new GramJs.InputChannelEmpty(),\n      username,\n    }), {\n      shouldThrow: true,\n    });\n\n    return { result, error: undefined };\n  } catch (error) {\n    const errorMessage = (error as ApiError).message;\n\n    if (ACCEPTABLE_USERNAME_ERRORS.has(errorMessage)) {\n      return {\n        result: false,\n        error: errorMessage,\n      };\n    }\n\n    throw error;\n  }\n}\n\nexport async function setChatUsername(\n  { chat, username }: { chat: ApiChat; username: string },\n) {\n  const result = await invokeRequest(new GramJs.channels.UpdateUsername({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    username,\n  }));\n\n  let usernames: ApiUsername[] = username ? [{ username, isEditable: true, isActive: true }] : [];\n  if (chat.usernames) {\n    // User can remove username from chat when changing it type to private, so we need to filter out empty usernames\n    usernames = usernames.concat(chat.usernames.filter((u) => u.username && !u.isEditable));\n  }\n\n  if (result) {\n    sendApiUpdate({\n      '@type': 'updateChat',\n      id: chat.id,\n      chat: { usernames: usernames.length ? usernames : undefined },\n    });\n  }\n\n  return result;\n}\n\nexport async function deactivateAllUsernames({ chat }: { chat: ApiChat }) {\n  const result = await invokeRequest(new GramJs.channels.DeactivateAllUsernames({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n  }));\n\n  if (result) {\n    const usernames = chat.usernames\n      ? chat.usernames\n        .map((u) => ({ ...u, isActive: false }))\n        // User can remove username from chat when changing it type to private, so we need to filter out empty usernames\n        .filter((u) => u.username)\n      : undefined;\n\n    sendApiUpdate({\n      '@type': 'updateChat',\n      id: chat.id,\n      chat: { usernames },\n    });\n  }\n\n  return result;\n}\n\nexport async function updatePrivateLink({\n  chat, usageLimit, expireDate,\n}: {\n  chat: ApiChat; usageLimit?: number; expireDate?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.ExportChatInvite({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    usageLimit,\n    expireDate,\n  }));\n\n  if (!(result instanceof GramJs.ChatInviteExported)) return undefined;\n\n  sendApiUpdate({\n    '@type': 'updateChatFullInfo',\n    id: chat.id,\n    fullInfo: {\n      inviteLink: result.link,\n    },\n  });\n\n  return result.link;\n}\n\nexport async function fetchExportedChatInvites({\n  peer, admin, limit = 0, isRevoked,\n}: { peer: ApiChat; admin: ApiUser; limit?: number; isRevoked?: boolean }) {\n  const exportedInvites = await invokeRequest(new GramJs.messages.GetExportedChatInvites({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    adminId: buildInputEntity(admin.id, admin.accessHash) as GramJs.InputUser,\n    limit,\n    revoked: isRevoked || undefined,\n  }), {\n    abortControllerChatId: peer.id,\n  });\n\n  if (!exportedInvites) return undefined;\n\n  const invites = (exportedInvites.invites\n    .filter((invite): invite is GramJs.ChatInviteExported => invite instanceof GramJs.ChatInviteExported))\n    .map(buildApiExportedInvite);\n\n  return {\n    invites,\n  };\n}\n\nexport async function editExportedChatInvite({\n  peer, isRevoked, link, expireDate, usageLimit, isRequestNeeded, title,\n}: {\n  peer: ApiChat;\n  isRevoked?: boolean;\n  link: string;\n  expireDate?: number;\n  usageLimit?: number;\n  isRequestNeeded?: boolean;\n  title?: string;\n}) {\n  const invite = await invokeRequest(new GramJs.messages.EditExportedChatInvite({\n    link,\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    expireDate,\n    usageLimit: !isRequestNeeded ? usageLimit : undefined,\n    requestNeeded: isRequestNeeded,\n    title,\n    revoked: isRevoked || undefined,\n  }));\n\n  if (!invite) return undefined;\n\n  if (invite instanceof GramJs.messages.ExportedChatInvite && invite.invite instanceof GramJs.ChatInviteExported) {\n    const replaceInvite = buildApiExportedInvite(invite.invite);\n    return {\n      oldInvite: replaceInvite,\n      newInvite: replaceInvite,\n    };\n  }\n\n  if (invite instanceof GramJs.messages.ExportedChatInviteReplaced\n    && invite.invite instanceof GramJs.ChatInviteExported\n    && invite.newInvite instanceof GramJs.ChatInviteExported) {\n    const oldInvite = buildApiExportedInvite(invite.invite);\n    const newInvite = buildApiExportedInvite(invite.newInvite);\n    return {\n      oldInvite,\n      newInvite,\n    };\n  }\n  return undefined;\n}\n\nexport async function exportChatInvite({\n  peer, expireDate, usageLimit, isRequestNeeded, title,\n}: {\n  peer: ApiChat;\n  expireDate?: number;\n  usageLimit?: number;\n  isRequestNeeded?: boolean;\n  title?: string;\n}) {\n  const invite = await invokeRequest(new GramJs.messages.ExportChatInvite({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    expireDate,\n    usageLimit: !isRequestNeeded ? usageLimit : undefined,\n    requestNeeded: isRequestNeeded || undefined,\n    title,\n  }));\n\n  if (!(invite instanceof GramJs.ChatInviteExported)) return undefined;\n  return buildApiExportedInvite(invite);\n}\n\nexport async function deleteExportedChatInvite({\n  peer, link,\n}: {\n  peer: ApiChat; link: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.DeleteExportedChatInvite({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    link,\n  }));\n\n  return result;\n}\n\nexport async function deleteRevokedExportedChatInvites({\n  peer, admin,\n}: {\n  peer: ApiChat; admin: ApiUser;\n}) {\n  const result = await invokeRequest(new GramJs.messages.DeleteRevokedExportedChatInvites({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    adminId: buildInputEntity(admin.id, admin.accessHash) as GramJs.InputUser,\n  }));\n\n  return result;\n}\n\nexport async function fetchChatInviteImporters({\n  peer, link, offsetDate = 0, offsetUser, limit = 0, isRequested,\n}: {\n  peer: ApiChat; link?: string; offsetDate?: number; offsetUser?: ApiUser; limit?: number; isRequested?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetChatInviteImporters({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    link,\n    offsetDate,\n    offsetUser: offsetUser\n      ? buildInputEntity(offsetUser.id, offsetUser.accessHash) as GramJs.InputUser : new GramJs.InputUserEmpty(),\n    limit,\n    requested: isRequested || undefined,\n  }), {\n    abortControllerChatId: peer.id,\n  });\n\n  if (!result) return undefined;\n\n  return {\n    importers: result.importers.map((importer) => buildChatInviteImporter(importer)),\n  };\n}\n\nexport function hideChatJoinRequest({\n  peer,\n  user,\n  isApproved,\n}: {\n  peer: ApiChat;\n  user: ApiUser;\n  isApproved: boolean;\n}) {\n  return invokeRequest(new GramJs.messages.HideChatJoinRequest({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n    approved: isApproved || undefined,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function hideAllChatJoinRequests({\n  peer,\n  isApproved,\n  link,\n}: {\n  peer: ApiChat;\n  isApproved: boolean;\n  link?: string;\n}) {\n  return invokeRequest(new GramJs.messages.HideAllChatJoinRequests({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    approved: isApproved || undefined,\n    link,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function hideChatReportPane(chat: ApiChat) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.messages.HidePeerSettingsBar({\n    peer: buildInputPeer(id, accessHash),\n  }));\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiAppConfig, ApiLimitType, ApiPremiumSection } from '../../types';\n\nimport {\n  DEFAULT_LIMITS,\n  MAX_UNIQUE_REACTIONS,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  STORY_EXPIRE_PERIOD,\n  STORY_VIEWERS_EXPIRE_PERIOD,\n} from '../../../config';\nimport localDb from '../localDb';\nimport { buildJson } from './misc';\n\ntype LimitType = 'default' | 'premium';\ntype Limit =\n  | 'upload_max_fileparts'\n  | 'stickers_faved_limit'\n  | 'saved_gifs_limit'\n  | 'dialog_filters_chats_limit'\n  | 'dialog_filters_limit'\n  | 'dialogs_folder_pinned_limit'\n  | 'dialogs_pinned_limit'\n  | 'caption_length_limit'\n  | 'channels_limit'\n  | 'channels_public_limit'\n  | 'about_length_limit'\n  | 'chatlist_invites_limit'\n  | 'chatlist_joined_limit'\n  | 'recommended_channels_limit'\n  | 'saved_dialogs_pinned_limit';\ntype LimitKey = `${Limit}_${LimitType}`;\ntype LimitsConfig = Record<LimitKey, number>;\n\nexport interface GramJsAppConfig extends LimitsConfig {\n  emojies_sounds: Record<string, {\n    id: string;\n    access_hash: string;\n    file_reference_base64: string;\n  }>;\n  emojies_send_dice: string[];\n  groupcall_video_participants_max: number;\n  reactions_uniq_max: number;\n  chat_read_mark_size_threshold: number;\n  chat_read_mark_expire_period: number;\n  pm_read_date_expire_period: number;\n  reactions_user_max_default: number;\n  reactions_user_max_premium: number;\n  autologin_domains: string[];\n  autologin_token: string;\n  url_auth_domains: string[];\n  premium_purchase_blocked: boolean;\n  giveaway_gifts_purchase_available: boolean;\n  giveaway_add_peers_max: number;\n  premium_bot_username: string;\n  premium_invoice_slug: string;\n  premium_promo_order: string[];\n  default_emoji_statuses_stickerset_id: string;\n  hidden_members_group_size_min: number;\n  autoarchive_setting_available: boolean;\n  authorization_autoconfirm_period: number;\n  giveaway_boosts_per_premium: number;\n  giveaway_countries_max: number;\n  boosts_per_sent_gift: number;\n  stars_paid_reaction_amount_max: number;\n  // Forums\n  topics_pinned_limit: number;\n  // Stories\n  stories_all_hidden?: boolean;\n  story_expire_period: number;\n  story_viewers_expire_period: number;\n  stories_changelog_user_id?: number;\n  stories_pinned_to_top_count_max?: number;\n  // Boosts\n  group_transcribe_level_min?: number;\n  new_noncontact_peers_require_premium_without_ownpremium?: boolean;\n  channel_restrict_sponsored_level_min?: number;\n  channel_revenue_withdrawal_enabled?: boolean;\n  // Upload premium notifications\n  upload_premium_speedup_notify_period?: number;\n  upload_premium_speedup_download?: number;\n  upload_premium_speedup_upload?: number;\n  stars_gifts_enabled?: boolean;\n  stargifts_message_length_max?: number;\n  stargifts_convert_period_max?: number;\n  starref_start_param_prefixes?: string[];\n}\n\nfunction buildEmojiSounds(appConfig: GramJsAppConfig) {\n  const { emojies_sounds } = appConfig;\n  return emojies_sounds ? Object.keys(emojies_sounds).reduce((acc: Record<string, string>, key) => {\n    const l = emojies_sounds[key];\n    localDb.documents[l.id] = new GramJs.Document({\n      id: BigInt(l.id),\n      accessHash: BigInt(l.access_hash),\n      dcId: 1,\n      mimeType: 'audio/ogg',\n      fileReference: Buffer.alloc(0),\n      size: BigInt(0),\n    } as GramJs.Document);\n\n    acc[key] = l.id;\n    return acc;\n  }, {}) : {};\n}\n\nfunction getLimit(appConfig: GramJsAppConfig, key: Limit, fallbackKey: ApiLimitType) {\n  const defaultLimit = appConfig[`${key}_default`] || DEFAULT_LIMITS[fallbackKey][0];\n  const premiumLimit = appConfig[`${key}_premium`] || DEFAULT_LIMITS[fallbackKey][1];\n  return [defaultLimit, premiumLimit] as const;\n}\n\nexport function buildAppConfig(json: GramJs.TypeJSONValue, hash: number): ApiAppConfig {\n  const appConfig = buildJson(json) as GramJsAppConfig;\n\n  return {\n    emojiSounds: buildEmojiSounds(appConfig),\n    seenByMaxChatMembers: appConfig.chat_read_mark_size_threshold,\n    seenByExpiresAt: appConfig.chat_read_mark_expire_period,\n    readDateExpiresAt: appConfig.pm_read_date_expire_period,\n    autologinDomains: appConfig.autologin_domains || [],\n    urlAuthDomains: appConfig.url_auth_domains || [],\n    maxUniqueReactions: appConfig.reactions_uniq_max ?? MAX_UNIQUE_REACTIONS,\n    premiumBotUsername: appConfig.premium_bot_username,\n    premiumInvoiceSlug: appConfig.premium_invoice_slug,\n    premiumPromoOrder: appConfig.premium_promo_order as ApiPremiumSection[],\n    isPremiumPurchaseBlocked: appConfig.premium_purchase_blocked,\n    isGiveawayGiftsPurchaseAvailable: appConfig.giveaway_gifts_purchase_available,\n    defaultEmojiStatusesStickerSetId: appConfig.default_emoji_statuses_stickerset_id,\n    topicsPinnedLimit: appConfig.topics_pinned_limit,\n    maxUserReactionsDefault: appConfig.reactions_user_max_default,\n    maxUserReactionsPremium: appConfig.reactions_user_max_premium,\n    hiddenMembersMinCount: appConfig.hidden_members_group_size_min,\n    giveawayAddPeersMax: appConfig.giveaway_add_peers_max,\n    giveawayBoostsPerPremium: appConfig.giveaway_boosts_per_premium,\n    giveawayCountriesMax: appConfig.giveaway_countries_max,\n    boostsPerSentGift: appConfig.boosts_per_sent_gift,\n    canDisplayAutoarchiveSetting: appConfig.autoarchive_setting_available,\n    limits: {\n      uploadMaxFileparts: getLimit(appConfig, 'upload_max_fileparts', 'uploadMaxFileparts'),\n      stickersFaved: getLimit(appConfig, 'stickers_faved_limit', 'stickersFaved'),\n      savedGifs: getLimit(appConfig, 'saved_gifs_limit', 'savedGifs'),\n      dialogFiltersChats: getLimit(appConfig, 'dialog_filters_chats_limit', 'dialogFiltersChats'),\n      dialogFilters: getLimit(appConfig, 'dialog_filters_limit', 'dialogFilters'),\n      dialogFolderPinned: getLimit(appConfig, 'dialogs_pinned_limit', 'dialogFolderPinned'),\n      captionLength: getLimit(appConfig, 'caption_length_limit', 'captionLength'),\n      channels: getLimit(appConfig, 'channels_limit', 'channels'),\n      channelsPublic: getLimit(appConfig, 'channels_public_limit', 'channelsPublic'),\n      aboutLength: getLimit(appConfig, 'about_length_limit', 'aboutLength'),\n      chatlistInvites: getLimit(appConfig, 'chatlist_invites_limit', 'chatlistInvites'),\n      chatlistJoined: getLimit(appConfig, 'chatlist_joined_limit', 'chatlistJoined'),\n      recommendedChannels: getLimit(appConfig, 'recommended_channels_limit', 'recommendedChannels'),\n      savedDialogsPinned: getLimit(appConfig, 'saved_dialogs_pinned_limit', 'savedDialogsPinned'),\n    },\n    hash,\n    areStoriesHidden: appConfig.stories_all_hidden,\n    storyExpirePeriod: appConfig.story_expire_period ?? STORY_EXPIRE_PERIOD,\n    storyViewersExpirePeriod: appConfig.story_viewers_expire_period ?? STORY_VIEWERS_EXPIRE_PERIOD,\n    storyChangelogUserId: appConfig.stories_changelog_user_id?.toString() ?? SERVICE_NOTIFICATIONS_USER_ID,\n    maxPinnedStoriesCount: appConfig.stories_pinned_to_top_count_max,\n    groupTranscribeLevelMin: appConfig.group_transcribe_level_min,\n    canLimitNewMessagesWithoutPremium: appConfig.new_noncontact_peers_require_premium_without_ownpremium,\n    bandwidthPremiumNotifyPeriod: appConfig.upload_premium_speedup_notify_period,\n    bandwidthPremiumUploadSpeedup: appConfig.upload_premium_speedup_upload,\n    bandwidthPremiumDownloadSpeedup: appConfig.upload_premium_speedup_download,\n    channelRestrictAdsLevelMin: appConfig.channel_restrict_sponsored_level_min,\n    paidReactionMaxAmount: appConfig.stars_paid_reaction_amount_max,\n    isChannelRevenueWithdrawalEnabled: appConfig.channel_revenue_withdrawal_enabled,\n    isStarsGiftEnabled: appConfig.stars_gifts_enabled,\n    starGiftMaxMessageLength: appConfig.stargifts_message_length_max,\n    starGiftMaxConvertPeriod: appConfig.stargifts_convert_period_max,\n    starRefStartPrefixes: appConfig.starref_start_param_prefixes,\n  };\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport { RPCError } from '../../../lib/gramjs/errors';\n\nimport type { LANG_PACKS } from '../../../config';\nimport type {\n  ApiAppConfig,\n  ApiConfig,\n  ApiInputPrivacyRules,\n  ApiLanguage,\n  ApiNotifyException,\n  ApiPhoto,\n  ApiPrivacyKey,\n  ApiUser,\n} from '../../types';\n\nimport {\n  ACCEPTABLE_USERNAME_ERRORS,\n  BLOCKED_LIST_LIMIT,\n  LANG_PACK,\n  MAX_INT_32,\n} from '../../../config';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\nimport { buildAppConfig } from '../apiBuilders/appConfig';\nimport { buildApiPhoto, buildPrivacyRules } from '../apiBuilders/common';\nimport {\n  buildApiConfig,\n  buildApiCountryList,\n  buildApiLanguage,\n  buildApiNotifyException,\n  buildApiPeerColors,\n  buildApiSession,\n  buildApiTimezone,\n  buildApiWallpaper,\n  buildApiWebSession,\n  buildLangStrings,\n  oldBuildLangPack,\n} from '../apiBuilders/misc';\nimport { getApiChatIdFromMtpPeer } from '../apiBuilders/peers';\nimport {\n  buildInputEntity, buildInputPeer, buildInputPhoto,\n  buildInputPrivacyKey,\n  buildInputPrivacyRules,\n} from '../gramjsBuilders';\nimport { addPhotoToLocalDb } from '../helpers/localDb';\nimport localDb from '../localDb';\nimport { getClient, invokeRequest, uploadFile } from './client';\n\nconst BETA_LANG_CODES = ['ar', 'fa', 'id', 'ko', 'uz', 'en'];\n\nexport function updateProfile({\n  firstName,\n  lastName,\n  about,\n}: {\n  firstName?: string;\n  lastName?: string;\n  about?: string;\n}) {\n  return invokeRequest(new GramJs.account.UpdateProfile({\n    firstName: firstName || '',\n    lastName: lastName || '',\n    about: about || '',\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function checkUsername(username: string) {\n  try {\n    const result = await invokeRequest(new GramJs.account.CheckUsername({\n      username,\n    }), {\n      shouldThrow: true,\n    });\n\n    return { result, error: undefined };\n  } catch (err: unknown) {\n    if (err instanceof RPCError && ACCEPTABLE_USERNAME_ERRORS.has(err.errorMessage)) {\n      return {\n        result: false,\n        error: err.errorMessage,\n      };\n    }\n\n    throw err;\n  }\n}\n\nexport function updateUsername(username: string) {\n  return invokeRequest(new GramJs.account.UpdateUsername({ username }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function updateProfilePhoto(photo?: ApiPhoto, isFallback?: boolean) {\n  const photoId = photo ? buildInputPhoto(photo) : new GramJs.InputPhotoEmpty();\n  const result = await invokeRequest(new GramJs.photos.UpdateProfilePhoto({\n    id: photoId,\n    ...(isFallback ? { fallback: true } : undefined),\n  }));\n  if (!result) return undefined;\n\n  if (result.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(result.photo);\n    return {\n      photo: buildApiPhoto(result.photo),\n    };\n  }\n  return undefined;\n}\n\nexport async function uploadProfilePhoto(\n  file: File, isFallback?: boolean, isVideo = false, videoTs = 0, bot?: ApiUser,\n) {\n  const inputFile = await uploadFile(file);\n  const result = await invokeRequest(new GramJs.photos.UploadProfilePhoto({\n    ...(bot ? { bot: buildInputPeer(bot.id, bot.accessHash) } : undefined),\n    ...(isVideo ? { video: inputFile, videoStartTs: videoTs } : { file: inputFile }),\n    ...(isFallback ? { fallback: true } : undefined),\n  }));\n\n  if (!result) return undefined;\n\n  if (result.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(result.photo);\n    return {\n      photo: buildApiPhoto(result.photo),\n    };\n  }\n  return undefined;\n}\n\nexport async function uploadContactProfilePhoto({\n  file, isSuggest, user,\n}: {\n  file?: File;\n  isSuggest?: boolean;\n  user: ApiUser;\n}) {\n  const inputFile = file ? await uploadFile(file) : undefined;\n  const result = await invokeRequest(new GramJs.photos.UploadContactProfilePhoto({\n    userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n    file: inputFile,\n    ...(isSuggest ? { suggest: true } : { save: true }),\n  }));\n\n  if (!result) return undefined;\n\n  if (result.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(result.photo);\n    return {\n      photo: buildApiPhoto(result.photo),\n    };\n  }\n\n  return {\n    photo: undefined,\n  };\n}\n\nexport async function deleteProfilePhotos(photos: ApiPhoto[]) {\n  const photoIds = photos.map(buildInputPhoto).filter(Boolean);\n  const isDeleted = await invokeRequest(new GramJs.photos.DeletePhotos({ id: photoIds }), {\n    shouldReturnTrue: true,\n  });\n  if (isDeleted) {\n    photos.forEach((photo) => {\n      delete localDb.photos[photo.id];\n    });\n  }\n  return isDeleted;\n}\n\nexport async function fetchWallpapers() {\n  const result = await invokeRequest(new GramJs.account.GetWallPapers({ hash: BigInt('0') }));\n\n  if (!result || result instanceof GramJs.account.WallPapersNotModified) {\n    return undefined;\n  }\n\n  const filteredWallpapers = result.wallpapers.filter((wallpaper) => {\n    if (\n      !(wallpaper instanceof GramJs.WallPaper)\n      || !(wallpaper.document instanceof GramJs.Document)\n    ) {\n      return false;\n    }\n\n    return true;\n  }) as GramJs.WallPaper[];\n\n  filteredWallpapers.forEach((wallpaper) => {\n    localDb.documents[String(wallpaper.document.id)] = wallpaper.document as GramJs.Document;\n  });\n\n  return {\n    wallpapers: filteredWallpapers.map(buildApiWallpaper).filter(Boolean),\n  };\n}\n\nexport async function uploadWallpaper(file: File) {\n  const inputFile = await uploadFile(file);\n\n  const result = await invokeRequest(new GramJs.account.UploadWallPaper({\n    file: inputFile,\n    mimeType: file.type,\n    settings: new GramJs.WallPaperSettings(),\n  }));\n\n  if (!result || !(result instanceof GramJs.WallPaper)) {\n    return undefined;\n  }\n\n  const wallpaper = buildApiWallpaper(result);\n  if (!wallpaper) {\n    return undefined;\n  }\n\n  localDb.documents[String(result.document.id)] = result.document as GramJs.Document;\n\n  return { wallpaper };\n}\n\nexport async function fetchBlockedUsers({\n  isOnlyStories,\n}: {\n  isOnlyStories?: true;\n}) {\n  const result = await invokeRequest(new GramJs.contacts.GetBlocked({\n    myStoriesFrom: isOnlyStories,\n    limit: BLOCKED_LIST_LIMIT,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    blockedIds: result.blocked.map((blocked) => getApiChatIdFromMtpPeer(blocked.peerId)),\n    totalCount: result instanceof GramJs.contacts.BlockedSlice ? result.count : result.blocked.length,\n  };\n}\n\nexport function blockUser({\n  user,\n  isOnlyStories,\n}: {\n  user: ApiUser;\n  isOnlyStories?: true;\n}) {\n  return invokeRequest(new GramJs.contacts.Block({\n    id: buildInputPeer(user.id, user.accessHash),\n    myStoriesFrom: isOnlyStories,\n  }));\n}\n\nexport function unblockUser({\n  user,\n  isOnlyStories,\n}: {\n  user: ApiUser;\n  isOnlyStories?: true;\n}) {\n  return invokeRequest(new GramJs.contacts.Unblock({\n    id: buildInputPeer(user.id, user.accessHash),\n    myStoriesFrom: isOnlyStories,\n  }));\n}\n\nexport async function fetchAuthorizations() {\n  const result = await invokeRequest(new GramJs.account.GetAuthorizations());\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    authorizations: buildCollectionByKey(result.authorizations.map(buildApiSession), 'hash'),\n    ttlDays: result.authorizationTtlDays,\n  };\n}\n\nexport function terminateAuthorization(hash: string) {\n  return invokeRequest(new GramJs.account.ResetAuthorization({ hash: BigInt(hash) }));\n}\n\nexport function terminateAllAuthorizations() {\n  return invokeRequest(new GramJs.auth.ResetAuthorizations());\n}\n\nexport async function fetchWebAuthorizations() {\n  const result = await invokeRequest(new GramJs.account.GetWebAuthorizations());\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    webAuthorizations: buildCollectionByKey(result.authorizations.map(buildApiWebSession), 'hash'),\n  };\n}\n\nexport function terminateWebAuthorization(hash: string) {\n  return invokeRequest(new GramJs.account.ResetWebAuthorization({ hash: BigInt(hash) }));\n}\n\nexport function terminateAllWebAuthorizations() {\n  return invokeRequest(new GramJs.account.ResetWebAuthorizations());\n}\n\nexport async function fetchNotificationExceptions() {\n  const result = await invokeRequest(new GramJs.account.GetNotifyExceptions({\n    compareSound: true,\n  }), {\n    shouldIgnoreUpdates: true,\n  });\n\n  if (!(result instanceof GramJs.Updates || result instanceof GramJs.UpdatesCombined)) {\n    return undefined;\n  }\n\n  return result.updates.reduce((acc, update) => {\n    if (!(update instanceof GramJs.UpdateNotifySettings && update.peer instanceof GramJs.NotifyPeer)) {\n      return acc;\n    }\n\n    acc.push(buildApiNotifyException(update.notifySettings, update.peer.peer));\n\n    return acc;\n  }, [] as ApiNotifyException[]);\n}\n\nexport async function fetchNotificationSettings() {\n  const [\n    isMutedContactSignUpNotification,\n    privateContactNotificationsSettings,\n    groupNotificationsSettings,\n    broadcastNotificationsSettings,\n  ] = await Promise.all([\n    invokeRequest(new GramJs.account.GetContactSignUpNotification()),\n    invokeRequest(new GramJs.account.GetNotifySettings({\n      peer: new GramJs.InputNotifyUsers(),\n    })),\n    invokeRequest(new GramJs.account.GetNotifySettings({\n      peer: new GramJs.InputNotifyChats(),\n    })),\n    invokeRequest(new GramJs.account.GetNotifySettings({\n      peer: new GramJs.InputNotifyBroadcasts(),\n    })),\n  ]);\n\n  if (!privateContactNotificationsSettings || !groupNotificationsSettings || !broadcastNotificationsSettings) {\n    return false;\n  }\n\n  const {\n    silent: privateSilent, muteUntil: privateMuteUntil, showPreviews: privateShowPreviews,\n  } = privateContactNotificationsSettings;\n  const {\n    silent: groupSilent, muteUntil: groupMuteUntil, showPreviews: groupShowPreviews,\n  } = groupNotificationsSettings;\n  const {\n    silent: broadcastSilent, muteUntil: broadcastMuteUntil, showPreviews: broadcastShowPreviews,\n  } = broadcastNotificationsSettings;\n\n  return {\n    hasContactJoinedNotifications: !isMutedContactSignUpNotification,\n    hasPrivateChatsNotifications: !(\n      privateSilent\n      || (typeof privateMuteUntil === 'number' && getServerTime() < privateMuteUntil)\n    ),\n    hasPrivateChatsMessagePreview: privateShowPreviews,\n    hasGroupNotifications: !(\n      groupSilent || (typeof groupMuteUntil === 'number'\n        && getServerTime() < groupMuteUntil)\n    ),\n    hasGroupMessagePreview: groupShowPreviews,\n    hasBroadcastNotifications: !(\n      broadcastSilent || (typeof broadcastMuteUntil === 'number'\n        && getServerTime() < broadcastMuteUntil)\n    ),\n    hasBroadcastMessagePreview: broadcastShowPreviews,\n  };\n}\n\nexport function updateContactSignUpNotification(isSilent: boolean) {\n  return invokeRequest(new GramJs.account.SetContactSignUpNotification({ silent: isSilent }));\n}\n\nexport function updateNotificationSettings(peerType: 'contact' | 'group' | 'broadcast', {\n  isSilent,\n  shouldShowPreviews,\n}: {\n  isSilent?: boolean;\n  shouldShowPreviews?: boolean;\n}) {\n  let peer: GramJs.TypeInputNotifyPeer;\n  if (peerType === 'contact') {\n    peer = new GramJs.InputNotifyUsers();\n  } else if (peerType === 'group') {\n    peer = new GramJs.InputNotifyChats();\n  } else {\n    peer = new GramJs.InputNotifyBroadcasts();\n  }\n\n  const settings = {\n    showPreviews: shouldShowPreviews,\n    silent: isSilent,\n    muteUntil: isSilent ? MAX_INT_32 : 0,\n  };\n\n  return invokeRequest(new GramJs.account.UpdateNotifySettings({\n    peer,\n    settings: new GramJs.InputPeerNotifySettings(settings),\n  }));\n}\n\nexport async function fetchLangPack({\n  langPack,\n  langCode,\n}: {\n  langPack: string;\n  langCode: string;\n}) {\n  const result = await invokeRequest(new GramJs.langpack.GetLangPack({\n    langPack,\n    langCode,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  const { strings, keysToRemove } = buildLangStrings(result.strings);\n\n  return {\n    version: result.version,\n    strings,\n    keysToRemove,\n  };\n}\n\nexport async function fetchLangDifference({\n  langPack,\n  langCode,\n  fromVersion,\n}: {\n  langPack: string;\n  langCode: string;\n  fromVersion: number;\n}) {\n  const result = await invokeRequest(new GramJs.langpack.GetDifference({\n    langPack,\n    langCode,\n    fromVersion,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  const { strings, keysToRemove } = buildLangStrings(result.strings);\n\n  return {\n    version: result.version,\n    strings,\n    keysToRemove,\n  };\n}\n\nexport async function fetchLanguages(): Promise<ApiLanguage[] | undefined> {\n  const result = await invokeRequest(new GramJs.langpack.GetLanguages({\n    langPack: LANG_PACK,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  return result.map(buildApiLanguage);\n}\n\nexport async function fetchLanguage({\n  langPack,\n  langCode,\n}: {\n  langPack: string;\n  langCode: string;\n}): Promise<ApiLanguage | undefined> {\n  const result = await invokeRequest(new GramJs.langpack.GetLanguage({\n    langPack,\n    langCode,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  return buildApiLanguage(result);\n}\n\nexport async function fetchLangStrings({\n  langPack,\n  langCode,\n  keys,\n}: {\n  langPack: string;\n  langCode: string;\n  keys: string[];\n}) {\n  const result = await invokeRequest(new GramJs.langpack.GetStrings({\n    langPack,\n    langCode,\n    keys,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  return buildLangStrings(result);\n}\n\nexport async function oldFetchLangPack({ sourceLangPacks, langCode }: {\n  sourceLangPacks: typeof LANG_PACKS;\n  langCode: string;\n}) {\n  const results = await Promise.all(sourceLangPacks.map((langPack) => {\n    return invokeRequest(new GramJs.langpack.GetLangPack({\n      langPack,\n      langCode: BETA_LANG_CODES.includes(langCode) ? `${langCode}-raw` : langCode,\n    }));\n  }));\n\n  const collections = results.filter(Boolean).map(oldBuildLangPack);\n  if (!collections.length) {\n    return undefined;\n  }\n\n  return { langPack: Object.assign({}, ...collections.reverse()) as typeof collections[0] };\n}\n\nexport async function fetchPrivacySettings(privacyKey: ApiPrivacyKey) {\n  const key = buildInputPrivacyKey(privacyKey);\n  const result = await invokeRequest(new GramJs.account.GetPrivacy({ key }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    rules: buildPrivacyRules(result.rules),\n  };\n}\n\nexport function registerDevice(token: string) {\n  const client = getClient();\n  const secret = client.session.getAuthKey().getKey();\n  return invokeRequest(new GramJs.account.RegisterDevice({\n    tokenType: 10,\n    secret,\n    appSandbox: false,\n    otherUids: [],\n    token,\n  }));\n}\n\nexport function unregisterDevice(token: string) {\n  return invokeRequest(new GramJs.account.UnregisterDevice({\n    tokenType: 10,\n    otherUids: [],\n    token,\n  }));\n}\n\nexport async function setPrivacySettings(\n  privacyKey: ApiPrivacyKey, rules: ApiInputPrivacyRules,\n) {\n  const key = buildInputPrivacyKey(privacyKey);\n  const privacyRules = buildInputPrivacyRules(rules);\n\n  const result = await invokeRequest(new GramJs.account.SetPrivacy({ key, rules: privacyRules }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    rules: buildPrivacyRules(result.rules),\n  };\n}\n\nexport async function updateIsOnline(isOnline: boolean) {\n  await invokeRequest(new GramJs.account.UpdateStatus({ offline: !isOnline }));\n}\n\nexport async function fetchContentSettings() {\n  const result = await invokeRequest(new GramJs.account.GetContentSettings());\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    isSensitiveEnabled: Boolean(result.sensitiveEnabled),\n    canChangeSensitive: Boolean(result.sensitiveCanChange),\n  };\n}\n\nexport function updateContentSettings(isEnabled: boolean) {\n  return invokeRequest(new GramJs.account.SetContentSettings({\n    sensitiveEnabled: isEnabled || undefined,\n  }));\n}\n\nexport async function fetchAppConfig(hash?: number): Promise<ApiAppConfig | undefined> {\n  const result = await invokeRequest(new GramJs.help.GetAppConfig({ hash }));\n  if (!result || result instanceof GramJs.help.AppConfigNotModified) return undefined;\n\n  const { config, hash: resultHash } = result;\n  return buildAppConfig(config, resultHash);\n}\n\nexport async function fetchConfig(): Promise<ApiConfig | undefined> {\n  const result = await invokeRequest(new GramJs.help.GetConfig());\n  if (!result) return undefined;\n\n  return buildApiConfig(result);\n}\n\nexport async function fetchPeerColors(hash?: number) {\n  const result = await invokeRequest(new GramJs.help.GetPeerColors({\n    hash,\n  }));\n  if (!result) return undefined;\n\n  const colors = buildApiPeerColors(result);\n  if (!colors) return undefined;\n\n  const newHash = result instanceof GramJs.help.PeerColors ? result.hash : undefined;\n\n  return {\n    colors,\n    hash: newHash,\n  };\n}\n\nexport async function fetchTimezones(hash?: number) {\n  const result = await invokeRequest(new GramJs.help.GetTimezonesList({\n    hash,\n  }));\n  if (!result || result instanceof GramJs.help.TimezonesListNotModified) return undefined;\n\n  const timezones = result.timezones.map(buildApiTimezone);\n\n  return {\n    timezones,\n    hash: result.hash,\n  };\n}\n\nexport async function fetchCountryList({ langCode = 'en' }: { langCode?: string }) {\n  const countryList = await invokeRequest(new GramJs.help.GetCountriesList({\n    langCode,\n  }));\n\n  if (!(countryList instanceof GramJs.help.CountriesList)) {\n    return undefined;\n  }\n  return buildApiCountryList(countryList.countries);\n}\n\nexport async function fetchGlobalPrivacySettings() {\n  const result = await invokeRequest(new GramJs.account.GetGlobalPrivacySettings());\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    shouldArchiveAndMuteNewNonContact: Boolean(result.archiveAndMuteNewNoncontactPeers),\n    shouldHideReadMarks: Boolean(result.hideReadMarks),\n    shouldNewNonContactPeersRequirePremium: Boolean(result.newNoncontactPeersRequirePremium),\n  };\n}\n\nexport async function updateGlobalPrivacySettings({\n  shouldArchiveAndMuteNewNonContact,\n  shouldHideReadMarks,\n  shouldNewNonContactPeersRequirePremium,\n}: {\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldHideReadMarks?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.account.SetGlobalPrivacySettings({\n    settings: new GramJs.GlobalPrivacySettings({\n      ...(shouldArchiveAndMuteNewNonContact && { archiveAndMuteNewNoncontactPeers: true }),\n      ...(shouldHideReadMarks && { hideReadMarks: true }),\n      ...(shouldNewNonContactPeersRequirePremium && { newNoncontactPeersRequirePremium: true }),\n    }),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    shouldArchiveAndMuteNewNonContact: Boolean(result.archiveAndMuteNewNoncontactPeers),\n    shouldHideReadMarks: Boolean(result.hideReadMarks),\n    shouldNewNonContactPeersRequirePremium: Boolean(result.newNoncontactPeersRequirePremium),\n  };\n}\n\nexport function toggleUsername({\n  chatId, accessHash, username, isActive,\n}: {\n  username: string;\n  isActive: boolean;\n  chatId?: string;\n  accessHash?: string;\n}) {\n  if (chatId) {\n    return invokeRequest(new GramJs.channels.ToggleUsername({\n      channel: buildInputEntity(chatId, accessHash) as GramJs.InputChannel,\n      username,\n      active: isActive,\n    }));\n  }\n\n  return invokeRequest(new GramJs.account.ToggleUsername({\n    username,\n    active: isActive,\n  }));\n}\n\nexport function reorderUsernames({ chatId, accessHash, usernames }: {\n  usernames: string[];\n  chatId?: string;\n  accessHash?: string;\n}) {\n  if (chatId) {\n    return invokeRequest(new GramJs.channels.ReorderUsernames({\n      channel: buildInputEntity(chatId, accessHash) as GramJs.InputChannel,\n      order: usernames,\n    }));\n  }\n\n  return invokeRequest(new GramJs.account.ReorderUsernames({\n    order: usernames,\n  }));\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport { checkErrorType, wrapError } from '../helpers/misc';\nimport { sendApiUpdate } from '../updates/apiUpdateEmitter';\nimport {\n  getCurrentPassword, getTmpPassword, invokeRequest, updateTwoFaSettings,\n} from './client';\n\nconst emailCodeController: {\n  resolve?: Function;\n  reject?: Function;\n} = {};\n\nexport async function getPasswordInfo() {\n  const result = await invokeRequest(new GramJs.account.GetPassword());\n  if (!result) {\n    return undefined;\n  }\n\n  const { hint, hasPassword } = result;\n\n  return { hint, hasPassword };\n}\n\nfunction onRequestEmailCode(length: number) {\n  sendApiUpdate({\n    '@type': 'updateTwoFaStateWaitCode',\n    length,\n  });\n\n  return new Promise<string>((resolve, reject) => {\n    emailCodeController.resolve = resolve;\n    emailCodeController.reject = reject;\n  });\n}\n\nexport function getTemporaryPaymentPassword(password: string, ttl?: number) {\n  try {\n    return getTmpPassword(password, ttl);\n  } catch (err: unknown) {\n    if (!checkErrorType(err)) return undefined;\n\n    return Promise.resolve(wrapError(err));\n  }\n}\n\nexport function getPassword(password: string) {\n  try {\n    return getCurrentPassword(password);\n  } catch (err: unknown) {\n    if (!checkErrorType(err)) return undefined;\n\n    return Promise.resolve(wrapError(err));\n  }\n}\n\nexport async function checkPassword(currentPassword: string) {\n  try {\n    await updateTwoFaSettings({ isCheckPassword: true, currentPassword });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport async function clearPassword(currentPassword: string) {\n  try {\n    await updateTwoFaSettings({ currentPassword });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport async function updatePassword(currentPassword: string, password: string, hint?: string, email?: string) {\n  try {\n    await updateTwoFaSettings({\n      currentPassword,\n      newPassword: password,\n      hint,\n      email,\n      emailCodeCallback: onRequestEmailCode,\n      onEmailCodeError: onError,\n    });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport async function updateRecoveryEmail(currentPassword: string, email: string) {\n  try {\n    await updateTwoFaSettings({\n      currentPassword,\n      newPassword: currentPassword,\n      email,\n      emailCodeCallback: onRequestEmailCode,\n      onEmailCodeError: onError,\n    });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport function provideRecoveryEmailCode(code: string) {\n  emailCodeController.resolve!(code);\n}\n\nfunction onError(err: Error) {\n  const wrappedError = wrapError(err);\n\n  sendApiUpdate({\n    '@type': 'updateTwoFaError',\n    messageKey: wrappedError.messageKey,\n  });\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiBotApp,\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiInputMessageReplyInfo,\n  ApiPeer,\n  ApiThemeParameters,\n  ApiUser,\n} from '../../types';\n\nimport { WEB_APP_PLATFORM } from '../../../config';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  buildApiAttachBot,\n  buildApiBotInlineMediaResult,\n  buildApiBotInlineResult,\n  buildApiMessagesBotApp,\n  buildBotSwitchPm,\n  buildBotSwitchWebview,\n} from '../apiBuilders/bots';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { omitVirtualClassFields } from '../apiBuilders/helpers';\nimport { buildMessageMediaContent } from '../apiBuilders/messageContent';\nimport { buildApiUrlAuthResult } from '../apiBuilders/misc';\nimport { buildApiUser } from '../apiBuilders/users';\nimport {\n  buildInputBotApp,\n  buildInputEntity,\n  buildInputPeer,\n  buildInputReplyTo,\n  buildInputThemeParams,\n  generateRandomBigInt,\n} from '../gramjsBuilders';\nimport {\n  addDocumentToLocalDb,\n  addPhotoToLocalDb,\n  addUserToLocalDb,\n  addWebDocumentToLocalDb,\n} from '../helpers/localDb';\nimport { deserializeBytes } from '../helpers/misc';\nimport { sendApiUpdate } from '../updates/apiUpdateEmitter';\nimport { invokeRequest } from './client';\n\nexport async function answerCallbackButton({\n  chatId, accessHash, messageId, data, isGame,\n}: {\n  chatId: string; accessHash?: string; messageId: number; data?: string; isGame?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetBotCallbackAnswer({\n    peer: buildInputPeer(chatId, accessHash),\n    msgId: messageId,\n    data: data ? deserializeBytes(data) : undefined,\n    game: isGame || undefined,\n  }));\n\n  return result ? omitVirtualClassFields(result) : undefined;\n}\n\nexport async function fetchTopInlineBots() {\n  const topPeers = await invokeRequest(new GramJs.contacts.GetTopPeers({\n    botsInline: true,\n  }));\n\n  if (!(topPeers instanceof GramJs.contacts.TopPeers)) {\n    return undefined;\n  }\n\n  const users = topPeers.users.map(buildApiUser).filter(Boolean);\n  const ids = users.map(({ id }) => id);\n\n  return {\n    ids,\n  };\n}\n\nexport async function fetchTopBotApps() {\n  const topPeers = await invokeRequest(new GramJs.contacts.GetTopPeers({\n    botsApp: true,\n  }));\n\n  if (!(topPeers instanceof GramJs.contacts.TopPeers)) {\n    return undefined;\n  }\n\n  const users = topPeers.users.map(buildApiUser).filter(Boolean);\n  const ids = users.map(({ id }) => id);\n\n  return {\n    ids,\n  };\n}\n\nexport async function fetchInlineBot({ username }: { username: string }) {\n  const resolvedPeer = await invokeRequest(new GramJs.contacts.ResolveUsername({ username }));\n\n  if (\n    !resolvedPeer\n    || !(\n      resolvedPeer.users[0] instanceof GramJs.User\n      && resolvedPeer.users[0].bot\n      && resolvedPeer.users[0].botInlinePlaceholder\n    )\n  ) {\n    return undefined;\n  }\n\n  addUserToLocalDb(resolvedPeer.users[0]);\n\n  return {\n    user: buildApiUser(resolvedPeer.users[0]),\n    chat: buildApiChatFromPreview(resolvedPeer.users[0]),\n  };\n}\n\nexport async function fetchInlineBotResults({\n  bot, chat, query, offset = '',\n}: {\n  bot: ApiUser; chat: ApiChat; query: string; offset?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetInlineBotResults({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    query,\n    offset,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    isGallery: Boolean(result.gallery),\n    help: bot.botPlaceholder,\n    nextOffset: getInlineBotResultsNextOffset(bot.usernames![0].username, result.nextOffset),\n    switchPm: buildBotSwitchPm(result.switchPm),\n    switchWebview: buildBotSwitchWebview(result.switchWebview),\n    results: processInlineBotResult(String(result.queryId), result.results),\n    cacheTime: result.cacheTime,\n  };\n}\n\nexport async function sendInlineBotResult({\n  chat, replyInfo, resultId, queryId, sendAs, isSilent, scheduleDate,\n}: {\n  chat: ApiChat;\n  replyInfo?: ApiInputMessageReplyInfo;\n  resultId: string;\n  queryId: string;\n  sendAs?: ApiPeer;\n  isSilent?: boolean;\n  scheduleDate?: number;\n}) {\n  const randomId = generateRandomBigInt();\n\n  await invokeRequest(new GramJs.messages.SendInlineBotResult({\n    clearDraft: true,\n    randomId,\n    queryId: BigInt(queryId),\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: resultId,\n    scheduleDate,\n    replyTo: replyInfo && buildInputReplyTo(replyInfo),\n    ...(isSilent && { silent: true }),\n    ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  }));\n}\n\nexport async function startBot({\n  bot, startParam,\n}: {\n  bot: ApiUser;\n  startParam?: string;\n}) {\n  const randomId = generateRandomBigInt();\n\n  await invokeRequest(new GramJs.messages.StartBot({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    peer: buildInputPeer(bot.id, bot.accessHash),\n    randomId,\n    startParam,\n  }));\n}\n\nexport async function requestWebView({\n  isSilent,\n  peer,\n  bot,\n  url,\n  startParam,\n  replyInfo,\n  theme,\n  sendAs,\n  isFromBotMenu,\n  isFullscreen,\n}: {\n  isSilent?: boolean;\n  peer: ApiPeer;\n  bot: ApiUser;\n  url?: string;\n  startParam?: string;\n  replyInfo?: ApiInputMessageReplyInfo;\n  theme?: ApiThemeParameters;\n  sendAs?: ApiPeer;\n  isFromBotMenu?: boolean;\n  isFullscreen?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.RequestWebView({\n    silent: isSilent || undefined,\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    url,\n    startParam,\n    themeParams: theme ? buildInputThemeParams(theme) : undefined,\n    fromBotMenu: isFromBotMenu || undefined,\n    platform: WEB_APP_PLATFORM,\n    replyTo: replyInfo && buildInputReplyTo(replyInfo),\n    fullscreen: isFullscreen ? true : undefined,\n    ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  }));\n\n  if (result instanceof GramJs.WebViewResultUrl) {\n    return {\n      url: result.url,\n      queryId: result.queryId?.toString(),\n      isFullScreen: Boolean(result.fullscreen),\n    };\n  }\n\n  return undefined;\n}\n\nexport async function requestMainWebView({\n  peer,\n  bot,\n  startParam,\n  mode,\n  theme,\n}: {\n  peer: ApiPeer;\n  bot: ApiUser;\n  startParam?: string;\n  mode?: string;\n  theme?: ApiThemeParameters;\n}) {\n  const result = await invokeRequest(new GramJs.messages.RequestMainWebView({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    startParam,\n    fullscreen: mode === 'fullscreen' || undefined,\n    themeParams: theme ? buildInputThemeParams(theme) : undefined,\n    platform: WEB_APP_PLATFORM,\n  }));\n\n  if (!(result instanceof GramJs.WebViewResultUrl)) {\n    return undefined;\n  }\n\n  return {\n    url: result.url,\n    queryId: result.queryId?.toString(),\n    isFullscreen: Boolean(result.fullscreen),\n  };\n}\n\nexport async function requestSimpleWebView({\n  bot,\n  url,\n  theme,\n  startParam,\n  isFromSwitchWebView,\n  isFromSideMenu,\n}: {\n  bot: ApiUser;\n  url?: string;\n  theme?: ApiThemeParameters;\n  startParam?: string;\n  isFromSwitchWebView?: boolean;\n  isFromSideMenu?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.RequestSimpleWebView({\n    url,\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    themeParams: theme ? buildInputThemeParams(theme) : undefined,\n    platform: WEB_APP_PLATFORM,\n    startParam,\n    fromSwitchWebview: isFromSwitchWebView || undefined,\n    fromSideMenu: isFromSideMenu || undefined,\n  }));\n\n  return result?.url;\n}\n\nexport async function fetchBotApp({\n  bot,\n  appName,\n}: {\n  bot: ApiUser;\n  appName: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetBotApp({\n    app: new GramJs.InputBotAppShortName({\n      botId: buildInputEntity(bot.id, bot.accessHash) as GramJs.InputUser,\n      shortName: appName,\n    }),\n  }));\n\n  if (!result || result instanceof GramJs.BotAppNotModified) {\n    return undefined;\n  }\n\n  return buildApiMessagesBotApp(result);\n}\n\nexport async function requestAppWebView({\n  peer,\n  app,\n  startParam,\n  mode,\n  theme,\n  isWriteAllowed,\n}: {\n  peer: ApiPeer;\n  app: ApiBotApp;\n  startParam?: string;\n  mode?: string;\n  theme?: ApiThemeParameters;\n  isWriteAllowed?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.RequestAppWebView({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    app: buildInputBotApp(app),\n    startParam,\n    themeParams: theme ? buildInputThemeParams(theme) : undefined,\n    platform: WEB_APP_PLATFORM,\n    writeAllowed: isWriteAllowed || undefined,\n    fullscreen: mode === 'fullscreen' || undefined,\n  }));\n\n  return { url: result?.url, isFullscreen: Boolean(result?.fullscreen) };\n}\n\nexport function prolongWebView({\n  isSilent,\n  peer,\n  bot,\n  queryId,\n  replyInfo,\n  sendAs,\n}: {\n  isSilent?: boolean;\n  peer: ApiPeer;\n  bot: ApiUser;\n  queryId: string;\n  replyInfo?: ApiInputMessageReplyInfo;\n  sendAs?: ApiPeer;\n}) {\n  return invokeRequest(new GramJs.messages.ProlongWebView({\n    silent: isSilent || undefined,\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    queryId: BigInt(queryId),\n    replyTo: replyInfo && buildInputReplyTo(replyInfo),\n    ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  }));\n}\n\nexport async function sendWebViewData({\n  bot, buttonText, data,\n}: {\n  bot: ApiUser;\n  buttonText: string;\n  data: string;\n}) {\n  const randomId = generateRandomBigInt();\n  await invokeRequest(new GramJs.messages.SendWebViewData({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    buttonText,\n    data,\n    randomId,\n  }));\n}\n\nexport async function loadAttachBots({\n  hash,\n}: {\n  hash?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetAttachMenuBots({\n    hash: hash ? BigInt(hash) : undefined,\n  }));\n\n  if (result instanceof GramJs.AttachMenuBots) {\n    return {\n      hash: result.hash.toString(),\n      bots: buildCollectionByKey(result.bots.map(buildApiAttachBot), 'id'),\n    };\n  }\n  return undefined;\n}\n\nexport async function loadAttachBot({\n  bot,\n}: {\n  bot: ApiUser;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetAttachMenuBot({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n  }));\n\n  if (result instanceof GramJs.AttachMenuBotsBot) {\n    return {\n      bot: buildApiAttachBot(result.bot),\n    };\n  }\n  return undefined;\n}\n\nexport function toggleAttachBot({\n  bot,\n  isWriteAllowed,\n  isEnabled,\n}: {\n  bot: ApiUser;\n  isWriteAllowed?: boolean;\n  isEnabled: boolean;\n}) {\n  return invokeRequest(new GramJs.messages.ToggleBotInAttachMenu({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    writeAllowed: isWriteAllowed || undefined,\n    enabled: isEnabled,\n  }));\n}\n\nexport async function requestBotUrlAuth({\n  chat, buttonId, messageId,\n}: {\n  chat: ApiChat;\n  buttonId: number;\n  messageId: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.RequestUrlAuth({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    buttonId,\n    msgId: messageId,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    sendApiUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nexport async function acceptBotUrlAuth({\n  chat,\n  messageId,\n  buttonId,\n  isWriteAllowed,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  buttonId: number;\n  isWriteAllowed?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.AcceptUrlAuth({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId: messageId,\n    buttonId,\n    writeAllowed: isWriteAllowed || undefined,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    sendApiUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nexport async function requestLinkUrlAuth({ url }: { url: string }) {\n  const result = await invokeRequest(new GramJs.messages.RequestUrlAuth({\n    url,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    sendApiUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nexport async function acceptLinkUrlAuth({ url, isWriteAllowed }: { url: string; isWriteAllowed?: boolean }) {\n  const result = await invokeRequest(new GramJs.messages.AcceptUrlAuth({\n    url,\n    writeAllowed: isWriteAllowed || undefined,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    sendApiUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nexport function fetchBotCanSendMessage({ bot } : { bot: ApiUser }) {\n  return invokeRequest(new GramJs.bots.CanSendMessage({\n    bot: buildInputEntity(bot.id, bot.accessHash) as GramJs.InputUser,\n  }));\n}\n\nexport function allowBotSendMessages({ bot } : { bot: ApiUser }) {\n  return invokeRequest(new GramJs.bots.AllowSendMessage({\n    bot: buildInputEntity(bot.id, bot.accessHash) as GramJs.InputUser,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function invokeWebViewCustomMethod({\n  bot,\n  customMethod,\n  parameters,\n}: {\n  bot: ApiUser;\n  customMethod: string;\n  parameters: string;\n}): Promise<{\n    result: object;\n  } | {\n    error: string;\n  }> {\n  try {\n    const result = await invokeRequest(new GramJs.bots.InvokeWebViewCustomMethod({\n      bot: buildInputPeer(bot.id, bot.accessHash),\n      params: new GramJs.DataJSON({\n        data: parameters,\n      }),\n      customMethod,\n    }), {\n      shouldThrow: true,\n    });\n\n    return {\n      result: JSON.parse(result!.data),\n    };\n  } catch (e) {\n    const error = e as Error;\n    return {\n      error: error.message,\n    };\n  }\n}\n\nexport async function fetchPreviewMedias({ bot } : { bot: ApiUser }) {\n  const result = await invokeRequest(new GramJs.bots.GetPreviewMedias({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n  }));\n\n  if (!result) return undefined;\n\n  const previews: ApiBotPreviewMedia[] = result.map((preview) => {\n    return {\n      content: buildMessageMediaContent(preview.media)!,\n      date: preview.date,\n    };\n  });\n  return previews;\n}\n\nexport function checkBotDownloadFileParams({\n  bot,\n  fileName,\n  url,\n}: {\n  bot: ApiUser;\n  fileName: string;\n  url: string;\n}) {\n  return invokeRequest(new GramJs.bots.CheckDownloadFileParams({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    fileName,\n    url,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function toggleUserEmojiStatusPermission({ bot, isEnabled } : { bot: ApiUser; isEnabled: boolean }) {\n  return invokeRequest(new GramJs.bots.ToggleUserEmojiStatusPermission({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    enabled: isEnabled,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nfunction processInlineBotResult(queryId: string, results: GramJs.TypeBotInlineResult[]) {\n  return results.map((result) => {\n    if (result instanceof GramJs.BotInlineMediaResult) {\n      if (result.document instanceof GramJs.Document) {\n        addDocumentToLocalDb(result.document);\n      }\n\n      if (result.photo instanceof GramJs.Photo) {\n        addPhotoToLocalDb(result.photo);\n      }\n\n      return buildApiBotInlineMediaResult(result, queryId);\n    }\n\n    if (result.thumb) {\n      addWebDocumentToLocalDb(result.thumb);\n    }\n\n    return buildApiBotInlineResult(result, queryId);\n  });\n}\n\nfunction getInlineBotResultsNextOffset(username: string, nextOffset?: string) {\n  return username === 'gif' && nextOffset === '0' ? '' : nextOffset;\n}\n\nexport function setBotInfo({\n  bot,\n  langCode,\n  name,\n  about,\n  description,\n}: {\n  bot: ApiUser;\n  langCode: string;\n  name?: string;\n  about?: string;\n  description?: string;\n}) {\n  return invokeRequest(new GramJs.bots.SetBotInfo({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    langCode,\n    name: name || '',\n    about: about || '',\n    description: description || '',\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function fetchPopularAppBots({\n  offset = '', limit,\n}: {\n  offset?: string;\n  limit?: number;\n}) {\n  const result = await invokeRequest(new GramJs.bots.GetPopularAppBots({\n    offset,\n    limit,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const peerIds = users.map(({ id }) => id);\n\n  return {\n    peerIds,\n    nextOffset: result.nextOffset,\n  };\n}\n\nexport async function fetchBotsRecommendations({ user }: { user: ApiChat }) {\n  if (!user) return undefined;\n  const inputUser = buildInputEntity(user.id, user.accessHash) as GramJs.InputUser;\n  const result = await invokeRequest(new GramJs.bots.GetBotRecommendations({\n    bot: inputUser,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  const similarBots = result?.users.map(buildApiUser).filter(Boolean);\n\n  return {\n    similarBots,\n    count: result instanceof GramJs.users.UsersSlice ? result.count : similarBots.length,\n  };\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { JoinGroupCallPayload } from '../../../lib/secret-sauce';\nimport type {\n  ApiChat, ApiGroupCall, ApiPhoneCall, ApiUser,\n} from '../../types';\n\nimport { GROUP_CALL_PARTICIPANTS_LIMIT } from '../../../config';\nimport {\n  buildApiGroupCall,\n  buildApiGroupCallParticipant, buildCallProtocol,\n  buildPhoneCall,\n} from '../apiBuilders/calls';\nimport {\n  buildInputGroupCall, buildInputPeer, buildInputPhoneCall, generateRandomInt,\n} from '../gramjsBuilders';\nimport { sendApiUpdate } from '../updates/apiUpdateEmitter';\nimport { invokeRequest, invokeRequestBeacon } from './client';\n\nexport async function getGroupCall({\n  call,\n}: {\n  call: Partial<ApiGroupCall>;\n}) {\n  const result = await invokeRequest(new GramJs.phone.GetGroupCall({\n    call: buildInputGroupCall(call),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    groupCall: buildApiGroupCall(result.call),\n  };\n}\n\nexport function discardGroupCall({\n  call,\n}: {\n  call: ApiGroupCall;\n}) {\n  return invokeRequest(new GramJs.phone.DiscardGroupCall({\n    call: buildInputGroupCall(call),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function editGroupCallParticipant({\n  call, participant, muted, presentationPaused, videoStopped, videoPaused, volume,\n  raiseHand,\n}: {\n  call: ApiGroupCall; participant: ApiUser; muted?: boolean; presentationPaused?: boolean;\n  videoStopped?: boolean; videoPaused?: boolean; raiseHand?: boolean; volume?: number;\n}) {\n  return invokeRequest(new GramJs.phone.EditGroupCallParticipant({\n    call: buildInputGroupCall(call),\n    participant: buildInputPeer(participant.id, participant.accessHash),\n    ...(videoStopped !== undefined && { videoStopped }),\n    ...(videoPaused !== undefined && { videoPaused }),\n    ...(muted !== undefined && { muted }),\n    ...(presentationPaused !== undefined && { presentationPaused }),\n    ...(raiseHand !== undefined && { raiseHand }),\n    ...(volume !== undefined && { volume }),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function editGroupCallTitle({\n  groupCall, title,\n}: {\n  groupCall: ApiGroupCall; title: string;\n}) {\n  return invokeRequest(new GramJs.phone.EditGroupCallTitle({\n    title,\n    call: buildInputGroupCall(groupCall),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function exportGroupCallInvite({\n  call, canSelfUnmute,\n}: {\n  call: ApiGroupCall; canSelfUnmute: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.phone.ExportGroupCallInvite({\n    canSelfUnmute: canSelfUnmute || undefined,\n    call: buildInputGroupCall(call),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return result.link;\n}\n\nexport async function fetchGroupCallParticipants({\n  call, offset,\n}: {\n  call: ApiGroupCall; offset?: string;\n}) {\n  const result = await invokeRequest(new GramJs.phone.GetGroupParticipants({\n    call: buildInputGroupCall(call),\n    ids: [],\n    sources: [],\n    offset: offset || '',\n    limit: GROUP_CALL_PARTICIPANTS_LIMIT,\n  }));\n\n  if (!result) {\n    return;\n  }\n\n  sendApiUpdate({\n    '@type': 'updateGroupCallParticipants',\n    groupCallId: call.id,\n    participants: result.participants.map(buildApiGroupCallParticipant),\n    nextOffset: result.nextOffset,\n  });\n}\n\nexport function leaveGroupCall({\n  call, isPageUnload,\n}: {\n  call: ApiGroupCall; isPageUnload?: boolean;\n}) {\n  const request = new GramJs.phone.LeaveGroupCall({\n    call: buildInputGroupCall(call),\n  });\n\n  if (isPageUnload) {\n    invokeRequestBeacon(request);\n    return;\n  }\n\n  invokeRequest(request, {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function joinGroupCall({\n  call, inviteHash, params,\n}: {\n  call: ApiGroupCall; inviteHash?: string; params: JoinGroupCallPayload;\n}) {\n  const result = await invokeRequest(new GramJs.phone.JoinGroupCall({\n    call: buildInputGroupCall(call),\n    joinAs: new GramJs.InputPeerSelf(),\n    muted: true,\n    videoStopped: true,\n    params: new GramJs.DataJSON({\n      data: JSON.stringify(params),\n    }),\n    inviteHash,\n  }), {\n    shouldRetryOnTimeout: true,\n    abortControllerGroup: 'call',\n  });\n\n  if (!result) return undefined;\n\n  if (result instanceof GramJs.Updates) {\n    const update = result.updates.find((u) => u instanceof GramJs.UpdateGroupCall);\n    if (!(update instanceof GramJs.UpdateGroupCall)) return undefined;\n\n    return buildApiGroupCall(update.call);\n  }\n\n  return undefined;\n}\n\nexport async function createGroupCall({\n  peer,\n}: {\n  peer: ApiChat;\n}) {\n  const randomId = generateRandomInt();\n  const result = await invokeRequest(new GramJs.phone.CreateGroupCall({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    randomId,\n  }));\n\n  if (!result) return undefined;\n\n  if (result instanceof GramJs.Updates) {\n    const update = result.updates[0];\n    if (update instanceof GramJs.UpdateGroupCall) {\n      return buildApiGroupCall(update.call);\n    }\n  }\n\n  return undefined;\n}\n\nexport function joinGroupCallPresentation({\n  call, params,\n}: {\n  call: ApiGroupCall; params: JoinGroupCallPayload;\n}) {\n  return invokeRequest(new GramJs.phone.JoinGroupCallPresentation({\n    call: buildInputGroupCall(call),\n    params: new GramJs.DataJSON({\n      data: JSON.stringify(params),\n    }),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function toggleGroupCallStartSubscription({\n  call, subscribed,\n}: {\n  call: ApiGroupCall; subscribed: boolean;\n}) {\n  return invokeRequest(new GramJs.phone.ToggleGroupCallStartSubscription({\n    call: buildInputGroupCall(call),\n    subscribed,\n  }), {\n    shouldReturnTrue: true,\n    shouldIgnoreErrors: true,\n  });\n}\n\nexport function leaveGroupCallPresentation({\n  call,\n}: {\n  call: ApiGroupCall;\n}) {\n  return invokeRequest(new GramJs.phone.LeaveGroupCallPresentation({\n    call: buildInputGroupCall(call),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function getDhConfig() {\n  const dhConfig = await invokeRequest(new GramJs.messages.GetDhConfig({}));\n\n  if (!dhConfig || dhConfig instanceof GramJs.messages.DhConfigNotModified) return undefined;\n\n  return {\n    g: dhConfig.g,\n    p: Array.from(dhConfig.p),\n    random: Array.from(dhConfig.random),\n  };\n}\n\nexport function discardCall({\n  call, isBusy, isPageUnload,\n}: {\n  call: ApiPhoneCall; isBusy?: boolean; isPageUnload?: boolean;\n}) {\n  const request = new GramJs.phone.DiscardCall({\n    peer: buildInputPhoneCall(call),\n    reason: isBusy ? new GramJs.PhoneCallDiscardReasonBusy() : new GramJs.PhoneCallDiscardReasonHangup(),\n  });\n\n  if (isPageUnload) {\n    invokeRequestBeacon(request);\n    return;\n  }\n\n  invokeRequest(request, {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function requestCall({\n  user, gAHash, isVideo,\n}: {\n  user: ApiUser; gAHash: number[]; isVideo?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.phone.RequestCall({\n    randomId: generateRandomInt(),\n    userId: buildInputPeer(user.id, user.accessHash),\n    gAHash: Buffer.from(gAHash),\n    ...(isVideo && { video: true }),\n    protocol: buildCallProtocol(),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  const call = buildPhoneCall(result.phoneCall);\n\n  sendApiUpdate({\n    '@type': 'updatePhoneCall',\n    call,\n  });\n\n  return true;\n}\n\nexport function setCallRating({\n  call, rating, comment,\n}: {\n  call: ApiPhoneCall; rating: number; comment: string;\n}) {\n  return invokeRequest(new GramJs.phone.SetCallRating({\n    rating,\n    peer: buildInputPhoneCall(call),\n    comment,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function receivedCall({\n  call,\n}: {\n  call: ApiPhoneCall;\n}) {\n  return invokeRequest(new GramJs.phone.ReceivedCall({\n    peer: buildInputPhoneCall(call),\n  }));\n}\n\nexport async function acceptCall({\n  call, gB,\n}: {\n  call: ApiPhoneCall; gB: number[];\n}) {\n  const result = await invokeRequest(new GramJs.phone.AcceptCall({\n    peer: buildInputPhoneCall(call),\n    gB: Buffer.from(gB),\n    protocol: buildCallProtocol(),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  call = buildPhoneCall(result.phoneCall);\n\n  sendApiUpdate({\n    '@type': 'updatePhoneCall',\n    call,\n  });\n\n  return true;\n}\n\nexport async function confirmCall({\n  call, gA, keyFingerprint,\n}: {\n  call: ApiPhoneCall; gA: number[]; keyFingerprint: string;\n}) {\n  const result = await invokeRequest(new GramJs.phone.ConfirmCall({\n    peer: buildInputPhoneCall(call),\n    gA: Buffer.from(gA),\n    keyFingerprint: BigInt(keyFingerprint),\n    protocol: buildCallProtocol(),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  call = buildPhoneCall(result.phoneCall);\n\n  sendApiUpdate({\n    '@type': 'updatePhoneCall',\n    call,\n  });\n\n  return true;\n}\n\nexport function sendSignalingData({\n  data, call,\n}: {\n  data: number[]; call: ApiPhoneCall;\n}) {\n  return invokeRequest(new GramJs.phone.SendSignalingData({\n    data: Buffer.from(data),\n    peer: buildInputPhoneCall(call),\n  }));\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChat, ApiReaction, ApiSticker,\n} from '../../types';\n\nimport {\n  API_GENERAL_ID_LIMIT,\n  REACTION_LIST_LIMIT,\n  RECENT_REACTIONS_LIMIT,\n  TOP_REACTIONS_LIMIT,\n} from '../../../config';\nimport { split } from '../../../util/iteratees';\nimport {\n  buildApiAvailableEffect,\n  buildApiAvailableReaction,\n  buildApiReaction,\n  buildApiSavedReactionTag,\n  buildMessagePeerReaction,\n} from '../apiBuilders/reactions';\nimport { buildStickerFromDocument } from '../apiBuilders/symbols';\nimport { buildInputPeer, buildInputReaction, generateRandomTimestampedBigInt } from '../gramjsBuilders';\nimport localDb from '../localDb';\nimport { invokeRequest } from './client';\n\nexport function sendWatchingEmojiInteraction({\n  chat,\n  emoticon,\n}: {\n  chat: ApiChat; emoticon: string;\n}) {\n  return invokeRequest(new GramJs.messages.SetTyping({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    action: new GramJs.SendMessageEmojiInteractionSeen({\n      emoticon,\n    }),\n  }), {\n    abortControllerChatId: chat.id,\n  });\n}\n\nexport function sendEmojiInteraction({\n  chat,\n  emoticon,\n  messageId,\n  timestamps,\n}: {\n  chat: ApiChat; messageId: number; emoticon: string; timestamps: number[];\n}) {\n  return invokeRequest(new GramJs.messages.SetTyping({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    action: new GramJs.SendMessageEmojiInteraction({\n      emoticon,\n      msgId: messageId,\n      interaction: new GramJs.DataJSON({\n        data: JSON.stringify({\n          v: 1,\n          a: timestamps.map((t: number) => ({\n            t,\n            i: 1,\n          })),\n        }),\n      }),\n    }),\n  }), {\n    abortControllerChatId: chat.id,\n  });\n}\n\nexport async function fetchAvailableReactions() {\n  const result = await invokeRequest(new GramJs.messages.GetAvailableReactions({}));\n\n  if (!result || result instanceof GramJs.messages.AvailableReactionsNotModified) {\n    return undefined;\n  }\n\n  result.reactions.forEach((reaction) => {\n    if (reaction.staticIcon instanceof GramJs.Document) {\n      localDb.documents[String(reaction.staticIcon.id)] = reaction.staticIcon;\n    }\n    if (reaction.selectAnimation instanceof GramJs.Document) {\n      localDb.documents[String(reaction.selectAnimation.id)] = reaction.selectAnimation;\n    }\n    if (reaction.aroundAnimation instanceof GramJs.Document) {\n      localDb.documents[String(reaction.aroundAnimation.id)] = reaction.aroundAnimation;\n    }\n    if (reaction.appearAnimation instanceof GramJs.Document) {\n      localDb.documents[String(reaction.appearAnimation.id)] = reaction.appearAnimation;\n    }\n    if (reaction.centerIcon instanceof GramJs.Document) {\n      localDb.documents[String(reaction.centerIcon.id)] = reaction.centerIcon;\n    }\n  });\n\n  return result.reactions.map(buildApiAvailableReaction);\n}\n\nexport async function fetchAvailableEffects() {\n  const result = await invokeRequest(new GramJs.messages.GetAvailableEffects({}));\n\n  if (!result || result instanceof GramJs.messages.AvailableEffectsNotModified) {\n    return undefined;\n  }\n\n  const documentsMap = new Map(result.documents.map((doc) => [String(doc.id), doc]));\n\n  result.documents.forEach((document) => {\n    if (document instanceof GramJs.Document) {\n      localDb.documents[String(document.id)] = document;\n    }\n  });\n\n  const effects = result.effects.map(buildApiAvailableEffect);\n\n  const stickers : ApiSticker[] = [];\n  const emojis : ApiSticker[] = [];\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const document = documentsMap.get(effect.effectStickerId);\n      const emoji = document && buildStickerFromDocument(document, false, effect.isPremium);\n      if (emoji) emojis.push(emoji);\n    } else {\n      const document = localDb.documents[effect.effectStickerId];\n      const sticker = buildStickerFromDocument(document);\n      if (sticker) { stickers.push(sticker); }\n    }\n  }\n\n  return { effects, emojis, stickers };\n}\n\nexport function sendReaction({\n  chat, messageId, reactions, shouldAddToRecent,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  reactions?: ApiReaction[];\n  shouldAddToRecent?: boolean;\n}) {\n  return invokeRequest(new GramJs.messages.SendReaction({\n    reaction: reactions?.map((r) => buildInputReaction(r)),\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId: messageId,\n    ...(shouldAddToRecent && { addToRecent: true }),\n  }), {\n    shouldReturnTrue: true,\n    shouldThrow: true,\n  });\n}\n\nexport function sendPaidReaction({\n  chat,\n  messageId,\n  count,\n  isPrivate,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  count: number;\n  isPrivate?: boolean;\n}) {\n  return invokeRequest(new GramJs.messages.SendPaidReaction({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId: messageId,\n    randomId: generateRandomTimestampedBigInt(),\n    count,\n    private: isPrivate || undefined,\n  }), {\n    shouldReturnTrue: true,\n    shouldThrow: true,\n  });\n}\n\nexport function fetchMessageReactions({\n  ids, chat,\n}: {\n  ids: number[]; chat: ApiChat;\n}) {\n  const chunks = split(ids, API_GENERAL_ID_LIMIT);\n  chunks.forEach((chunkIds) => {\n    invokeRequest(new GramJs.messages.GetMessagesReactions({\n      id: chunkIds,\n      peer: buildInputPeer(chat.id, chat.accessHash),\n    }), {\n      shouldReturnTrue: true,\n      abortControllerChatId: chat.id,\n    });\n  });\n}\n\nexport async function fetchMessageReactionsList({\n  chat, messageId, reaction, offset,\n}: {\n  chat: ApiChat; messageId: number; reaction?: ApiReaction; offset?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetMessageReactionsList({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: messageId,\n    ...(reaction && { reaction: buildInputReaction(reaction) }),\n    limit: REACTION_LIST_LIMIT,\n    ...(offset && { offset }),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  const { nextOffset, reactions, count } = result;\n\n  return {\n    nextOffset,\n    reactions: reactions.map(buildMessagePeerReaction).filter(Boolean),\n    count,\n  };\n}\n\nexport function setDefaultReaction({\n  reaction,\n}: {\n  reaction: ApiReaction;\n}) {\n  return invokeRequest(new GramJs.messages.SetDefaultReaction({\n    reaction: buildInputReaction(reaction),\n  }));\n}\n\nexport async function fetchTopReactions({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetTopReactions({\n    limit: TOP_REACTIONS_LIMIT,\n    hash: BigInt(hash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.ReactionsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    reactions: result.reactions.map((r) => buildApiReaction(r)).filter(Boolean),\n  };\n}\n\nexport async function fetchRecentReactions({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetRecentReactions({\n    limit: RECENT_REACTIONS_LIMIT,\n    hash: BigInt(hash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.ReactionsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    reactions: result.reactions.map((r) => buildApiReaction(r)).filter(Boolean),\n  };\n}\n\nexport function clearRecentReactions() {\n  return invokeRequest(new GramJs.messages.ClearRecentReactions());\n}\n\nexport async function fetchDefaultTagReactions({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetDefaultTagReactions({\n    hash: BigInt(hash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.ReactionsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    reactions: result.reactions.map((r) => buildApiReaction(r)).filter(Boolean),\n  };\n}\n\nexport async function fetchSavedReactionTags({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetSavedReactionTags({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.SavedReactionTagsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    tags: result.tags.map(buildApiSavedReactionTag).filter(Boolean),\n  };\n}\n\nexport function updateSavedReactionTag({\n  reaction,\n  title,\n}: {\n  reaction: ApiReaction;\n  title?: string;\n}) {\n  return invokeRequest(new GramJs.messages.UpdateSavedReactionTag({\n    reaction: buildInputReaction(reaction),\n    title,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChat, ApiMessagePublicForward, ApiPeer, ApiPostStatistics, ApiStoryPublicForward, StatisticsGraph,\n} from '../../types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport {\n  buildChannelMonetizationStatistics,\n  buildChannelStatistics,\n  buildGraph,\n  buildGroupStatistics,\n  buildMessagePublicForwards,\n  buildPostsStatistics,\n  buildStoryPublicForwards,\n} from '../apiBuilders/statistics';\nimport { buildInputEntity, buildInputPeer } from '../gramjsBuilders';\nimport { checkErrorType, wrapError } from '../helpers/misc';\nimport { invokeRequest } from './client';\nimport { getPassword } from './twoFaSettings';\n\nexport async function fetchChannelStatistics({\n  chat, dcId,\n}: { chat: ApiChat; dcId?: number }) {\n  const result = await invokeRequest(new GramJs.stats.GetBroadcastStats({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n  }), {\n    dcId,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    stats: buildChannelStatistics(result),\n    users: [],\n  };\n}\n\nexport async function fetchChannelMonetizationStatistics({\n  peer, dcId,\n}: {\n  peer: ApiPeer;\n  dcId?: number;\n}) {\n  const result = await invokeRequest(new GramJs.stats.GetBroadcastRevenueStats({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n  }), {\n    dcId,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildChannelMonetizationStatistics(result);\n}\n\nexport async function fetchGroupStatistics({\n  chat, dcId,\n}: { chat: ApiChat; dcId?: number }) {\n  const result = await invokeRequest(new GramJs.stats.GetMegagroupStats({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n  }), {\n    dcId,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    stats: buildGroupStatistics(result),\n  };\n}\n\nexport async function fetchMessageStatistics({\n  chat,\n  messageId,\n  dcId,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  dcId?: number;\n}): Promise<ApiPostStatistics | undefined> {\n  const result = await invokeRequest(new GramJs.stats.GetMessageStats({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    msgId: messageId,\n  }), {\n    dcId,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildPostsStatistics(result);\n}\n\nexport async function fetchMessagePublicForwards({\n  chat,\n  messageId,\n  dcId,\n  offset,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  dcId?: number;\n  offset?: string;\n}): Promise<{\n    forwards?: ApiMessagePublicForward[];\n    count?: number;\n    nextOffset?: string;\n  } | undefined> {\n  const result = await invokeRequest(new GramJs.stats.GetMessagePublicForwards({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    msgId: messageId,\n    offset,\n    limit: STATISTICS_PUBLIC_FORWARDS_LIMIT,\n  }), {\n    dcId,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    forwards: buildMessagePublicForwards(result),\n    count: result.count,\n    nextOffset: result.nextOffset,\n  };\n}\n\nexport async function fetchStatisticsAsyncGraph({\n  token,\n  x,\n  isPercentage,\n  dcId,\n}: {\n  token: string;\n  x?: number;\n  isPercentage?: boolean;\n  dcId?: number;\n}): Promise<StatisticsGraph | undefined> {\n  const result = await invokeRequest(new GramJs.stats.LoadAsyncGraph({\n    token,\n    ...(x && { x: BigInt(x) }),\n  }), {\n    dcId,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildGraph(result as GramJs.StatsGraph, isPercentage);\n}\n\nexport async function fetchStoryStatistics({\n  chat,\n  storyId,\n  dcId,\n}: {\n  chat: ApiChat;\n  storyId: number;\n  dcId?: number;\n}): Promise<ApiPostStatistics | undefined> {\n  const result = await invokeRequest(new GramJs.stats.GetStoryStats({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: storyId,\n  }), {\n    dcId,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildPostsStatistics(result);\n}\n\nexport async function fetchStoryPublicForwards({\n  chat,\n  storyId,\n  dcId,\n  offset,\n}: {\n  chat: ApiChat;\n  storyId: number;\n  dcId?: number;\n  offset?: string;\n}): Promise<{\n    publicForwards: (ApiMessagePublicForward | ApiStoryPublicForward)[] | undefined;\n    count?: number;\n    nextOffset?: string;\n  } | undefined> {\n  const result = await invokeRequest(new GramJs.stats.GetStoryPublicForwards({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: storyId,\n    offset,\n    limit: STATISTICS_PUBLIC_FORWARDS_LIMIT,\n  }), {\n    dcId,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    publicForwards: buildStoryPublicForwards(result),\n    count: result.count,\n    nextOffset: result.nextOffset,\n  };\n}\n\nexport async function fetchMonetizationRevenueWithdrawalUrl({\n  peer, currentPassword,\n}: {\n  peer: ApiPeer;\n  currentPassword: string;\n}) {\n  try {\n    const password = await getPassword(currentPassword);\n\n    if (!password) {\n      return undefined;\n    }\n\n    if ('error' in password) {\n      return password;\n    }\n\n    const result = await invokeRequest(new GramJs.stats.GetBroadcastRevenueWithdrawalUrl({\n      peer: buildInputPeer(peer.id, peer.accessHash),\n      password,\n    }), {\n      shouldThrow: true,\n    });\n\n    if (!result) {\n      return undefined;\n    }\n\n    return { url: result.url };\n  } catch (err: unknown) {\n    if (!checkErrorType(err)) return undefined;\n    return wrapError(err);\n  }\n\n  return undefined;\n}\n","import type bigInt from 'big-integer';\nimport BigInt from 'big-integer';\nimport { AuthKey } from '../../../lib/gramjs/crypto/AuthKey';\nimport { Logger } from '../../../lib/gramjs/extensions';\nimport {\n  convertToLittle, getByteArray, modExp, readBigIntFromBuffer, sha1, sha256,\n} from '../../../lib/gramjs/Helpers';\nimport MTProtoState from '../../../lib/gramjs/network/MTProtoState';\n\ntype DhConfig = {\n  p: number[];\n  g: number;\n  random: number[];\n};\n\nlet currentPhoneCallState: PhoneCallState | undefined;\n\nclass PhoneCallState {\n  private state?: MTProtoState;\n\n  private seq = 0;\n\n  private gA?: bigInt.BigInteger;\n\n  private gB: any;\n\n  private p?: bigInt.BigInteger;\n\n  private random?: bigInt.BigInteger;\n\n  private waitForState: Promise<void>;\n\n  private resolveState?: VoidFunction;\n\n  constructor(\n    private isOutgoing: boolean,\n  ) {\n    this.waitForState = new Promise<void>((resolve) => {\n      this.resolveState = resolve;\n    });\n  }\n\n  async requestCall({ p, g, random }: DhConfig) {\n    const pBN = readBigIntFromBuffer(Buffer.from(p), false);\n    const randomBN = readBigIntFromBuffer(Buffer.from(random), false);\n\n    const gA = modExp(BigInt(g), randomBN, pBN);\n\n    this.gA = gA;\n    this.p = pBN;\n    this.random = randomBN;\n\n    const gAHash: Buffer = await sha256(getByteArray(gA));\n    return Array.from(gAHash);\n  }\n\n  acceptCall({ p, g, random }: DhConfig) {\n    const pLast = readBigIntFromBuffer(p, false);\n    const randomLast = readBigIntFromBuffer(random, false);\n\n    const gB = modExp(BigInt(g), randomLast, pLast);\n    this.gB = gB;\n    this.p = pLast;\n    this.random = randomLast;\n\n    return Array.from(getByteArray(gB));\n  }\n\n  async confirmCall(gAOrB: number[], emojiData: Uint16Array, emojiOffsets: number[]) {\n    if (!this.random || !this.p) {\n      throw new Error('Values not set');\n    }\n\n    if (this.isOutgoing) {\n      this.gB = readBigIntFromBuffer(Buffer.from(gAOrB), false);\n    } else {\n      this.gA = readBigIntFromBuffer(Buffer.from(gAOrB), false);\n    }\n    const authKey = modExp(\n      !this.isOutgoing ? this.gA : this.gB,\n      this.random,\n      this.p,\n    );\n    const fingerprint: Buffer = await sha1(getByteArray(authKey));\n    const keyFingerprint = readBigIntFromBuffer(fingerprint.slice(-8).reverse(), false);\n\n    const emojis = await generateEmojiFingerprint(\n      getByteArray(authKey),\n      getByteArray(this.gA!),\n      emojiData,\n      emojiOffsets,\n    );\n\n    const key = new AuthKey();\n    await key.setKey(getByteArray(authKey));\n    this.state = new MTProtoState(key, new Logger(), true, this.isOutgoing);\n    this.resolveState!();\n\n    return { gA: Array.from(getByteArray(this.gA!)), keyFingerprint: keyFingerprint.toString(), emojis };\n  }\n\n  async encode(data: string) {\n    if (!this.state) return undefined;\n\n    const seqArray = new Uint32Array(1);\n    seqArray[0] = this.seq++;\n    const encodedData = await this.state.encryptMessageData(\n      Buffer.concat([convertToLittle(seqArray), Buffer.from(data)]),\n    );\n    return Array.from(encodedData);\n  }\n\n  async decode(data: number[]): Promise<any> {\n    if (!this.state) {\n      return this.waitForState.then(() => {\n        return this.decode(data);\n      });\n    }\n\n    const message = await this.state.decryptMessageData(Buffer.from(data));\n\n    return JSON.parse(message.toString());\n  }\n}\n\n// https://github.com/TelegramV/App/blob/ead52320975362139cabad18cf8346f98c349a22/src/js/MTProto/Calls/Internal.js#L72\nfunction computeEmojiIndex(bytes: Uint8Array) {\n  return ((BigInt(bytes[0]).and(0x7F)).shiftLeft(56))\n    .or((BigInt(bytes[1]).shiftLeft(48)))\n    .or((BigInt(bytes[2]).shiftLeft(40)))\n    .or((BigInt(bytes[3]).shiftLeft(32)))\n    .or((BigInt(bytes[4]).shiftLeft(24)))\n    .or((BigInt(bytes[5]).shiftLeft(16)))\n    .or((BigInt(bytes[6]).shiftLeft(8)))\n    .or((BigInt(bytes[7])));\n}\n\nasync function generateEmojiFingerprint(\n  authKey: Uint8Array, gA: Uint8Array, emojiData: Uint16Array, emojiOffsets: number[],\n) {\n  const hash = await sha256(Buffer.concat([new Uint8Array(authKey), new Uint8Array(gA)]));\n  const result = [];\n  const emojiCount = emojiOffsets.length - 1;\n  const kPartSize = 8;\n  for (let partOffset = 0; partOffset !== hash.byteLength; partOffset += kPartSize) {\n    const value = computeEmojiIndex(hash.subarray(partOffset, partOffset + kPartSize));\n    const index = value.modPow(1, emojiCount).toJSNumber();\n    const offset = emojiOffsets[index];\n    const size = emojiOffsets[index + 1] - offset;\n    result.push(String.fromCharCode(...emojiData.subarray(offset, offset + size)));\n  }\n  return result.join('');\n}\n\nexport function createPhoneCallState(params: ConstructorParameters<typeof PhoneCallState>) {\n  currentPhoneCallState = new PhoneCallState(...params);\n}\n\nexport function destroyPhoneCallState() {\n  currentPhoneCallState = undefined;\n}\n\ntype FunctionPropertyOf<T> = {\n  [P in keyof T]: T[P] extends Function\n    ? P\n    : never\n}[keyof T];\n\ntype ParamsOf<T extends FunctionPropertyOf<PhoneCallState>> = Parameters<PhoneCallState[T]>;\ntype ReturnTypeOf<T extends FunctionPropertyOf<PhoneCallState>> = ReturnType<PhoneCallState[T]>;\n\nexport function encodePhoneCallData(params: ParamsOf<'encode'>): ReturnTypeOf<'encode'> {\n  return currentPhoneCallState!.encode(...params);\n}\n\nexport async function decodePhoneCallData(params: ParamsOf<'decode'>) {\n  if (!currentPhoneCallState) {\n    return undefined;\n  }\n  const result = await currentPhoneCallState.decode(...params);\n  return result;\n}\n\nexport function confirmPhoneCall(params: ParamsOf<'confirmCall'>): ReturnTypeOf<'confirmCall'> {\n  return currentPhoneCallState!.confirmCall(...params);\n}\n\nexport function acceptPhoneCall(params: ParamsOf<'acceptCall'>): ReturnTypeOf<'acceptCall'> {\n  return currentPhoneCallState!.acceptCall(...params);\n}\n\nexport function requestPhoneCall(params: ParamsOf<'requestCall'>): ReturnTypeOf<'requestCall'> {\n  return currentPhoneCallState!.requestCall(...params);\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiError,\n  ApiInputPrivacyRules,\n  ApiPeer,\n  ApiPeerStories,\n  ApiReaction,\n  ApiStealthMode,\n  ApiTypeStory,\n} from '../../types';\n\nimport { MESSAGE_ID_REQUIRED_ERROR, STORY_LIST_LIMIT } from '../../../config';\nimport { buildCollectionByCallback } from '../../../util/iteratees';\nimport { buildApiReportResult } from '../apiBuilders/messages';\nimport { getApiChatIdFromMtpPeer } from '../apiBuilders/peers';\nimport {\n  buildApiPeerStories,\n  buildApiStealthMode,\n  buildApiStory,\n  buildApiStoryView,\n  buildApiStoryViews,\n} from '../apiBuilders/stories';\nimport {\n  buildInputPeer,\n  buildInputPrivacyRules,\n  buildInputReaction,\n} from '../gramjsBuilders';\nimport { addStoryToLocalDb } from '../helpers/localDb';\nimport { deserializeBytes } from '../helpers/misc';\nimport { invokeRequest } from './client';\n\nexport async function fetchAllStories({\n  stateHash,\n  isFirstRequest = false,\n  isHidden = false,\n}: {\n  isFirstRequest?: boolean;\n  stateHash?: string;\n  isHidden?: boolean;\n}): Promise<\n  undefined\n  | { state: string; stealthMode: ApiStealthMode }\n  | {\n    peerStories: Record<string, ApiPeerStories>;\n    hasMore?: true;\n    state: string;\n    stealthMode: ApiStealthMode;\n  }> {\n  const params: ConstructorParameters<typeof GramJs.stories.GetAllStories>[0] = isFirstRequest\n    ? (isHidden ? { hidden: true } : {})\n    : { state: stateHash, next: true, ...(isHidden && { hidden: true }) };\n  const result = await invokeRequest(new GramJs.stories.GetAllStories(params));\n\n  if (!result) {\n    return undefined;\n  }\n\n  if (result instanceof GramJs.stories.AllStoriesNotModified) {\n    return {\n      state: result.state,\n      stealthMode: buildApiStealthMode(result.stealthMode),\n    };\n  }\n\n  const allUserStories = result.peerStories.reduce<Record<string, ApiPeerStories>>((acc, peerStories) => {\n    const peerId = getApiChatIdFromMtpPeer(peerStories.peer);\n    const stories = buildApiPeerStories(peerStories);\n    const { profileIds, orderedIds, lastUpdatedAt } = Object.values(stories).reduce<\n    {\n      profileIds: number[];\n      orderedIds: number[];\n      lastUpdatedAt?: number;\n    }\n    >((dataAcc, story) => {\n      if ('isInProfile' in story && story.isInProfile) {\n        dataAcc.profileIds.push(story.id);\n      }\n      if (!('isDeleted' in story)) {\n        dataAcc.orderedIds.push(story.id);\n        dataAcc.lastUpdatedAt = Math.max(story.date, dataAcc.lastUpdatedAt || 0);\n      }\n\n      return dataAcc;\n    }, {\n      profileIds: [],\n      orderedIds: [],\n      lastUpdatedAt: undefined,\n    });\n\n    if (orderedIds.length === 0) {\n      return acc;\n    }\n\n    acc[peerId] = {\n      byId: stories,\n      orderedIds,\n      profileIds,\n      lastUpdatedAt,\n      lastReadId: peerStories.maxReadId,\n    };\n\n    return acc;\n  }, {});\n\n  // Add after building stories to avoid overwriting repair info\n  result.peerStories.forEach((peerStories) => (\n    peerStories.stories.forEach((story) => addStoryToLocalDb(story, getApiChatIdFromMtpPeer(peerStories.peer)))\n  ));\n\n  return {\n    peerStories: allUserStories,\n    hasMore: result.hasMore,\n    state: result.state,\n    stealthMode: buildApiStealthMode(result.stealthMode),\n  };\n}\n\nexport async function fetchPeerStories({\n  peer,\n}: {\n  peer: ApiPeer;\n}) {\n  const result = await invokeRequest(new GramJs.stories.GetPeerStories({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  const stories = buildCollectionByCallback(result.stories.stories, (story) => (\n    [story.id, buildApiStory(peer.id, story)]\n  ));\n\n  // Add after building stories to avoid overwriting repair info\n  result.stories.stories.forEach((story) => addStoryToLocalDb(story, peer.id));\n\n  return {\n    stories,\n    lastReadStoryId: result.stories.maxReadId,\n  };\n}\n\nexport function fetchPeerProfileStories({\n  peer, offsetId,\n}: {\n  peer: ApiPeer;\n  offsetId?: number;\n}) {\n  return fetchCommonStoriesRequest({\n    method: new GramJs.stories.GetPinnedStories({\n      peer: buildInputPeer(peer.id, peer.accessHash),\n      offsetId,\n      limit: STORY_LIST_LIMIT,\n    }),\n    peerId: peer.id,\n  });\n}\n\nexport function fetchStoriesArchive({\n  peer,\n  offsetId,\n}: {\n  peer: ApiPeer;\n  offsetId?: number;\n}) {\n  return fetchCommonStoriesRequest({\n    method: new GramJs.stories.GetStoriesArchive({\n      peer: peer && buildInputPeer(peer.id, peer.accessHash),\n      offsetId,\n      limit: STORY_LIST_LIMIT,\n    }),\n    peerId: peer.id,\n  });\n}\n\nexport async function fetchPeerStoriesByIds({ peer, ids }: { peer: ApiPeer; ids: number[] }) {\n  const result = await invokeRequest(new GramJs.stories.GetStoriesByID({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: ids,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  const stories = ids.reduce<Record<string, ApiTypeStory>>((acc, id) => {\n    const story = result.stories.find(({ id: currentId }) => currentId === id);\n    if (story) {\n      acc[id] = buildApiStory(peer.id, story);\n    } else {\n      acc[id] = {\n        id,\n        peerId: peer.id,\n        isDeleted: true,\n      };\n    }\n\n    return acc;\n  }, {});\n\n  // Add after building stories to avoid overwriting repair info\n  result.stories.forEach((story) => addStoryToLocalDb(story, peer.id));\n\n  return {\n    pinnedIds: result.pinnedToTop,\n    stories,\n  };\n}\n\nexport function viewStory({ peer, storyId }: { peer: ApiPeer; storyId: number }) {\n  return invokeRequest(new GramJs.stories.IncrementStoryViews({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: [storyId],\n  }));\n}\n\nexport function markStoryRead({ peer, storyId }: { peer: ApiPeer; storyId: number }) {\n  return invokeRequest(new GramJs.stories.ReadStories({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    maxId: storyId,\n  }));\n}\n\nexport function deleteStory({ peer, storyId }: { peer: ApiPeer; storyId: number }) {\n  return invokeRequest(new GramJs.stories.DeleteStories({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: [storyId],\n  }));\n}\n\nexport function toggleStoryInProfile({\n  peer, storyId, isInProfile,\n}: {\n  peer: ApiPeer; storyId: number; isInProfile?: boolean;\n}) {\n  return invokeRequest(new GramJs.stories.TogglePinned({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: [storyId],\n    pinned: isInProfile,\n  }));\n}\n\nexport function toggleStoryPinnedToTop({\n  peer, storyIds,\n}: {\n  peer: ApiPeer; storyIds: number[];\n}) {\n  return invokeRequest(new GramJs.stories.TogglePinnedToTop({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: storyIds,\n  }));\n}\n\nexport async function fetchStoryViewList({\n  peer,\n  storyId,\n  areJustContacts,\n  query,\n  areReactionsFirst,\n  limit = STORY_LIST_LIMIT,\n  offset = '',\n}: {\n  peer: ApiPeer;\n  storyId: number;\n  areJustContacts?: true;\n  areReactionsFirst?: true;\n  query?: string;\n  limit?: number;\n  offset?: string;\n}) {\n  const result = await invokeRequest(new GramJs.stories.GetStoryViewsList({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: storyId,\n    justContacts: areJustContacts,\n    q: query,\n    reactionsFirst: areReactionsFirst,\n    limit,\n    offset,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  const views = result.views.map(buildApiStoryView).filter(Boolean);\n\n  return {\n    views,\n    nextOffset: result.nextOffset,\n    reactionsCount: result.reactionsCount,\n    viewsCount: result.count,\n  };\n}\n\nexport async function fetchStoriesViews({\n  peer,\n  storyIds,\n}: {\n  peer: ApiPeer;\n  storyIds: number[];\n}) {\n  const result = await invokeRequest(new GramJs.stories.GetStoriesViews({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: storyIds,\n  }));\n\n  if (!result?.views[0]) {\n    return undefined;\n  }\n\n  const views = buildApiStoryViews(result.views[0]);\n\n  return {\n    views,\n  };\n}\n\nexport async function fetchStoryLink({ peer, storyId }: { peer: ApiPeer ; storyId: number }) {\n  const result = await invokeRequest(new GramJs.stories.ExportStoryLink({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: storyId,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return result.link;\n}\n\nexport async function reportStory({\n  peer,\n  storyId,\n  description,\n  option,\n}: {\n  peer: ApiPeer; storyId: number; description: string; option: string;\n}) {\n  try {\n    const result = await invokeRequest(new GramJs.stories.Report({\n      peer: buildInputPeer(peer.id, peer.accessHash),\n      id: [storyId],\n      option: deserializeBytes(option),\n      message: description,\n    }), { shouldThrow: true });\n\n    if (!result) return undefined;\n\n    return { result: buildApiReportResult(result), error: undefined };\n  } catch (err: any) {\n    const errorMessage = (err as ApiError).message;\n\n    if (errorMessage === MESSAGE_ID_REQUIRED_ERROR) {\n      return {\n        result: undefined,\n        error: errorMessage,\n      };\n    }\n\n    throw err;\n  }\n}\n\nexport function editStoryPrivacy({\n  peer,\n  id,\n  privacy,\n}: {\n  peer: ApiPeer;\n  id: number;\n  privacy: ApiInputPrivacyRules;\n}) {\n  return invokeRequest(new GramJs.stories.EditStory({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id,\n    privacyRules: buildInputPrivacyRules(privacy),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function toggleStoriesHidden({\n  peer,\n  isHidden,\n}: {\n  peer: ApiPeer;\n  isHidden: boolean;\n}) {\n  return invokeRequest(new GramJs.stories.TogglePeerStoriesHidden({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    hidden: isHidden,\n  }));\n}\n\nexport function fetchStoriesMaxIds({\n  peers,\n}: {\n  peers: ApiPeer[];\n}) {\n  return invokeRequest(new GramJs.stories.GetPeerMaxIDs({\n    id: peers.map((peer) => buildInputPeer(peer.id, peer.accessHash)),\n  }), { shouldIgnoreErrors: true });\n}\n\nasync function fetchCommonStoriesRequest({ method, peerId }: {\n  method: GramJs.stories.GetPinnedStories | GramJs.stories.GetStoriesArchive;\n  peerId: string;\n}) {\n  const result = await invokeRequest(method);\n\n  if (!result) {\n    return undefined;\n  }\n\n  const stories = buildCollectionByCallback(result.stories, (story) => (\n    [story.id, buildApiStory(peerId, story)]\n  ));\n\n  // Add after building stories to avoid overwriting repair info\n  result.stories.forEach((story) => addStoryToLocalDb(story, peerId));\n\n  return {\n    stories,\n    pinnedIds: result.pinnedToTop,\n  };\n}\n\nexport function sendStoryReaction({\n  peer, storyId, reaction, shouldAddToRecent,\n}: {\n  peer: ApiPeer;\n  storyId: number;\n  reaction?: ApiReaction;\n  shouldAddToRecent?: boolean;\n}) {\n  return invokeRequest(new GramJs.stories.SendReaction({\n    reaction: reaction ? buildInputReaction(reaction) : new GramJs.ReactionEmpty(),\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    storyId,\n    ...(shouldAddToRecent && { addToRecent: true }),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function activateStealthMode({\n  isForPast,\n  isForFuture,\n}: {\n  isForPast?: true;\n  isForFuture?: true;\n}) {\n  return invokeRequest(new GramJs.stories.ActivateStealthMode({\n    past: isForPast,\n    future: isForFuture,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChat,\n  ApiInputStorePaymentPurpose,\n  ApiPeer,\n  ApiRequestInputInvoice,\n  ApiRequestInputSavedStarGift,\n  ApiStarGiftRegular,\n  ApiThemeParameters,\n} from '../../types';\n\nimport { DEBUG } from '../../../config';\nimport {\n  buildApiSavedStarGift,\n  buildApiStarGift,\n  buildApiStarGiftAttribute,\n} from '../apiBuilders/gifts';\nimport {\n  buildApiBoost,\n  buildApiBoostsStatus,\n  buildApiCheckedGiftCode,\n  buildApiGiveawayInfo,\n  buildApiMyBoost,\n  buildApiPaymentForm,\n  buildApiPremiumGiftCodeOption,\n  buildApiPremiumPromo,\n  buildApiReceipt,\n  buildApiStarsAmount,\n  buildApiStarsGiftOptions,\n  buildApiStarsGiveawayOptions,\n  buildApiStarsSubscription,\n  buildApiStarsTransaction,\n  buildApiStarTopupOption,\n  buildShippingOptions,\n} from '../apiBuilders/payments';\nimport { buildApiPeerId } from '../apiBuilders/peers';\nimport {\n  buildInputInvoice,\n  buildInputPeer,\n  buildInputSavedStarGift,\n  buildInputStorePaymentPurpose,\n  buildInputThemeParams,\n  buildShippingInfo,\n} from '../gramjsBuilders';\nimport {\n  checkErrorType,\n  deserializeBytes,\n  serializeBytes,\n  wrapError,\n} from '../helpers/misc';\nimport localDb from '../localDb';\nimport { sendApiUpdate } from '../updates/apiUpdateEmitter';\nimport { handleGramJsUpdate, invokeRequest } from './client';\nimport { getPassword, getTemporaryPaymentPassword } from './twoFaSettings';\n\nexport async function validateRequestedInfo({\n  inputInvoice,\n  requestInfo,\n  shouldSave,\n}: {\n  inputInvoice: ApiRequestInputInvoice;\n  requestInfo: GramJs.TypePaymentRequestedInfo;\n  shouldSave?: boolean;\n}): Promise<{\n    id: string;\n    shippingOptions: any;\n  } | undefined> {\n  const result = await invokeRequest(new GramJs.payments.ValidateRequestedInfo({\n    invoice: buildInputInvoice(inputInvoice),\n    save: shouldSave || undefined,\n    info: buildShippingInfo(requestInfo),\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return undefined;\n  }\n\n  return {\n    id,\n    shippingOptions: buildShippingOptions(shippingOptions),\n  };\n}\n\nexport async function sendPaymentForm({\n  inputInvoice,\n  formId,\n  requestedInfoId,\n  shippingOptionId,\n  credentials,\n  savedCredentialId,\n  temporaryPassword,\n  tipAmount,\n}: {\n  inputInvoice: ApiRequestInputInvoice;\n  formId: string;\n  credentials: any;\n  requestedInfoId?: string;\n  shippingOptionId?: string;\n  savedCredentialId?: string;\n  temporaryPassword?: string;\n  tipAmount?: number;\n}) {\n  const inputCredentials = temporaryPassword && savedCredentialId\n    ? new GramJs.InputPaymentCredentialsSaved({\n      id: savedCredentialId,\n      tmpPassword: deserializeBytes(temporaryPassword),\n    })\n    : new GramJs.InputPaymentCredentials({\n      save: credentials.save,\n      data: new GramJs.DataJSON({ data: JSON.stringify(credentials.data) }),\n    });\n  const result = await invokeRequest(new GramJs.payments.SendPaymentForm({\n    formId: BigInt(formId),\n    invoice: buildInputInvoice(inputInvoice),\n    requestedInfoId,\n    shippingOptionId,\n    credentials: inputCredentials,\n    ...(tipAmount && { tipAmount: BigInt(tipAmount) }),\n  }));\n\n  if (!result) return false;\n\n  if (result instanceof GramJs.payments.PaymentVerificationNeeded) {\n    sendApiUpdate({\n      '@type': 'updatePaymentVerificationNeeded',\n      url: result.url,\n    });\n\n    return undefined;\n  } else {\n    handleGramJsUpdate(result.updates);\n  }\n\n  return Boolean(result);\n}\n\nexport async function sendStarPaymentForm({\n  formId,\n  inputInvoice,\n}: {\n  formId: string;\n  inputInvoice: ApiRequestInputInvoice;\n}) {\n  const result = await invokeRequest(new GramJs.payments.SendStarsForm({\n    formId: BigInt(formId),\n    invoice: buildInputInvoice(inputInvoice),\n  }));\n\n  if (!result) return undefined;\n\n  if (result instanceof GramJs.payments.PaymentVerificationNeeded) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn('Unexpected PaymentVerificationNeeded in sendStarsForm');\n    }\n\n    return undefined;\n  }\n\n  handleGramJsUpdate(result.updates);\n\n  if (inputInvoice.type === 'chatInviteSubscription') {\n    const updates = 'updates' in result.updates ? result.updates.updates : undefined;\n\n    const mtpChannelId = updates?.find((update): update is GramJs.UpdateChannel => (\n      update instanceof GramJs.UpdateChannel\n    ))?.channelId;\n\n    if (!mtpChannelId) {\n      return undefined;\n    }\n\n    return {\n      channelId: buildApiPeerId(mtpChannelId, 'channel'),\n    };\n  }\n\n  return {\n    completed: true,\n  };\n}\n\nexport async function getPaymentForm(inputInvoice: ApiRequestInputInvoice, theme?: ApiThemeParameters) {\n  try {\n    const result = await invokeRequest(new GramJs.payments.GetPaymentForm({\n      invoice: buildInputInvoice(inputInvoice),\n      themeParams: theme ? buildInputThemeParams(theme) : undefined,\n    }), {\n      shouldThrow: true,\n    });\n\n    if (!result) {\n      return undefined;\n    }\n\n    return buildApiPaymentForm(result);\n  } catch (err) {\n    if (err instanceof Error) {\n      // Can be removed if separate error handling is added to payment UI\n      sendApiUpdate({\n        '@type': 'error',\n        error: {\n          message: err.message,\n          hasErrorKey: true,\n        },\n      });\n      return {\n        error: err.message,\n      };\n    }\n    return undefined;\n  }\n}\n\nexport async function getReceipt(chat: ApiChat, msgId: number) {\n  const result = await invokeRequest(new GramJs.payments.GetPaymentReceipt({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    receipt: buildApiReceipt(result),\n  };\n}\n\nexport async function fetchPremiumPromo() {\n  const result = await invokeRequest(new GramJs.help.GetPremiumPromo());\n  if (!result) return undefined;\n\n  result.videos.forEach((video) => {\n    if (video instanceof GramJs.Document) {\n      localDb.documents[video.id.toString()] = video;\n    }\n  });\n\n  return {\n    promo: buildApiPremiumPromo(result),\n  };\n}\n\nexport async function fetchTemporaryPaymentPassword(password: string) {\n  const result = await getTemporaryPaymentPassword(password);\n\n  if (!result) {\n    return undefined;\n  }\n\n  if ('error' in result) {\n    return result;\n  }\n\n  return {\n    value: serializeBytes(result.tmpPassword),\n    validUntil: result.validUntil,\n  };\n}\n\nexport async function fetchMyBoosts() {\n  const result = await invokeRequest(new GramJs.premium.GetMyBoosts());\n\n  if (!result) return undefined;\n\n  const boosts = result.myBoosts.map(buildApiMyBoost);\n\n  return {\n    boosts,\n  };\n}\n\nexport async function applyBoost({\n  chat,\n  slots,\n} : {\n  chat: ApiChat;\n  slots: number[];\n}) {\n  const result = await invokeRequest(new GramJs.premium.ApplyBoost({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    slots,\n  }));\n\n  if (!result) return undefined;\n\n  const boosts = result.myBoosts.map(buildApiMyBoost);\n\n  return {\n    boosts,\n  };\n}\n\nexport async function fetchBoostStatus({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  const result = await invokeRequest(new GramJs.premium.GetBoostsStatus({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildApiBoostsStatus(result);\n}\n\nexport async function fetchBoostList({\n  chat,\n  isGifts,\n  offset = '',\n  limit,\n}: {\n  chat: ApiChat;\n  isGifts?: boolean;\n  offset?: string;\n  limit?: number;\n}) {\n  const result = await invokeRequest(new GramJs.premium.GetBoostsList({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    gifts: isGifts || undefined,\n    offset,\n    limit,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  const boostList = result.boosts.map(buildApiBoost);\n\n  return {\n    count: result.count,\n    boostList,\n    nextOffset: result.nextOffset,\n  };\n}\n\nexport async function fetchGiveawayInfo({\n  peer,\n  messageId,\n}: {\n  peer: ApiPeer;\n  messageId: number;\n}) {\n  const result = await invokeRequest(new GramJs.payments.GetGiveawayInfo({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    msgId: messageId,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildApiGiveawayInfo(result);\n}\n\nexport async function checkGiftCode({\n  slug,\n}: {\n  slug: string;\n}) {\n  const result = await invokeRequest(new GramJs.payments.CheckGiftCode({\n    slug,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    code: buildApiCheckedGiftCode(result),\n  };\n}\n\nexport function applyGiftCode({\n  slug,\n}: {\n  slug: string;\n}) {\n  return invokeRequest(new GramJs.payments.ApplyGiftCode({\n    slug,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function getPremiumGiftCodeOptions({\n  chat,\n}: {\n  chat?: ApiChat;\n}) {\n  const result = await invokeRequest(new GramJs.payments.GetPremiumGiftCodeOptions({\n    boostPeer: chat && buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return result.map(buildApiPremiumGiftCodeOption);\n}\n\nexport async function getStarsGiftOptions({\n  chat,\n}: {\n  chat?: ApiChat;\n}) {\n  const result = await invokeRequest(new GramJs.payments.GetStarsGiftOptions({\n    userId: chat && buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return result.map(buildApiStarsGiftOptions);\n}\n\nexport async function fetchStarsGiveawayOptions() {\n  const result = await invokeRequest(new GramJs.payments.GetStarsGiveawayOptions());\n\n  if (!result) {\n    return undefined;\n  }\n\n  return result.map(buildApiStarsGiveawayOptions);\n}\n\nexport async function fetchStarGifts() {\n  const result = await invokeRequest(new GramJs.payments.GetStarGifts({}));\n\n  if (!result || result instanceof GramJs.payments.StarGiftsNotModified) {\n    return undefined;\n  }\n\n  // Right now, only regular star gifts can be bought, but API are not specific\n  return result.gifts.map(buildApiStarGift).filter((gift): gift is ApiStarGiftRegular => gift.type === 'starGift');\n}\n\nexport async function fetchSavedStarGifts({\n  peer,\n  offset = '',\n  limit,\n}: {\n  peer: ApiPeer;\n  offset?: string;\n  limit?: number;\n}) {\n  const result = await invokeRequest(new GramJs.payments.GetSavedStarGifts({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    offset,\n    limit,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  const gifts = result.gifts.map((g) => buildApiSavedStarGift(g, peer.id));\n\n  return {\n    gifts,\n    nextOffset: result.nextOffset,\n  };\n}\n\nexport function saveStarGift({\n  inputGift,\n  shouldUnsave,\n}: {\n  inputGift: ApiRequestInputSavedStarGift;\n  shouldUnsave?: boolean;\n}) {\n  return invokeRequest(new GramJs.payments.SaveStarGift({\n    stargift: buildInputSavedStarGift(inputGift),\n    unsave: shouldUnsave || undefined,\n  }));\n}\n\nexport function convertStarGift({\n  inputSavedGift,\n}: {\n  inputSavedGift: ApiRequestInputSavedStarGift;\n}) {\n  return invokeRequest(new GramJs.payments.ConvertStarGift({\n    stargift: buildInputSavedStarGift(inputSavedGift),\n  }));\n}\n\nexport function launchPrepaidGiveaway({\n  chat,\n  giveawayId,\n  paymentPurpose,\n}: {\n  chat: ApiChat;\n  giveawayId: string;\n  paymentPurpose: ApiInputStorePaymentPurpose;\n}) {\n  return invokeRequest(new GramJs.payments.LaunchPrepaidGiveaway({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    giveawayId: BigInt(giveawayId),\n    purpose: buildInputStorePaymentPurpose(paymentPurpose),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function fetchStarsStatus() {\n  const result = await invokeRequest(new GramJs.payments.GetStarsStatus({\n    peer: new GramJs.InputPeerSelf(),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    nextHistoryOffset: result.nextOffset,\n    history: result.history?.map(buildApiStarsTransaction),\n    nextSubscriptionOffset: result.subscriptionsNextOffset,\n    subscriptions: result.subscriptions?.map(buildApiStarsSubscription),\n    balance: buildApiStarsAmount(result.balance),\n  };\n}\n\nexport async function fetchStarsTransactions({\n  peer,\n  offset,\n  isInbound,\n  isOutbound,\n}: {\n  peer?: ApiPeer;\n  offset?: string;\n  isInbound?: true;\n  isOutbound?: true;\n}) {\n  const inputPeer = peer ? buildInputPeer(peer.id, peer.accessHash) : new GramJs.InputPeerSelf();\n  const result = await invokeRequest(new GramJs.payments.GetStarsTransactions({\n    peer: inputPeer,\n    offset,\n    inbound: isInbound,\n    outbound: isOutbound,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    nextOffset: result.nextOffset,\n    history: result.history?.map(buildApiStarsTransaction),\n    balance: buildApiStarsAmount(result.balance),\n  };\n}\n\nexport async function fetchStarsTransactionById({\n  id, peer,\n}: {\n  id: string;\n  peer?: ApiPeer;\n}) {\n  const inputPeer = peer ? buildInputPeer(peer.id, peer.accessHash) : new GramJs.InputPeerSelf();\n  const result = await invokeRequest(new GramJs.payments.GetStarsTransactionsByID({\n    peer: inputPeer,\n    id: [new GramJs.InputStarsTransaction({\n      id,\n    })],\n  }));\n\n  if (!result?.history?.[0]) {\n    return undefined;\n  }\n\n  return {\n    transaction: buildApiStarsTransaction(result?.history[0]),\n  };\n}\n\nexport async function fetchStarsSubscriptions({\n  offset, peer,\n}: {\n  offset?: string;\n  peer?: ApiPeer;\n}) {\n  const inputPeer = peer ? buildInputPeer(peer.id, peer.accessHash) : new GramJs.InputPeerSelf();\n  const result = await invokeRequest(new GramJs.payments.GetStarsSubscriptions({\n    peer: inputPeer,\n    offset,\n  }));\n\n  if (!result?.subscriptions) {\n    return undefined;\n  }\n\n  return {\n    nextOffset: result.subscriptionsNextOffset,\n    subscriptions: result.subscriptions.map(buildApiStarsSubscription),\n    balance: buildApiStarsAmount(result.balance),\n  };\n}\n\nexport async function changeStarsSubscription({\n  peer, subscriptionId, isCancelled,\n}: {\n  peer?: ApiPeer;\n  subscriptionId: string;\n  isCancelled: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.payments.ChangeStarsSubscription({\n    peer: peer ? buildInputPeer(peer.id, peer.accessHash) : new GramJs.InputPeerSelf(),\n    subscriptionId,\n    canceled: isCancelled,\n  }));\n\n  return result;\n}\n\nexport async function fulfillStarsSubscription({\n  peer, subscriptionId,\n}: {\n  peer?: ApiPeer;\n  subscriptionId: string;\n}) {\n  const result = await invokeRequest(new GramJs.payments.FulfillStarsSubscription({\n    peer: peer ? buildInputPeer(peer.id, peer.accessHash) : new GramJs.InputPeerSelf(),\n    subscriptionId,\n  }));\n\n  return result;\n}\n\nexport async function fetchStarsTopupOptions() {\n  const result = await invokeRequest(new GramJs.payments.GetStarsTopupOptions());\n\n  if (!result) {\n    return undefined;\n  }\n\n  return result.map(buildApiStarTopupOption);\n}\n\nexport async function fetchUniqueStarGift({ slug }: {\n  slug: string;\n}) {\n  const result = await invokeRequest(new GramJs.payments.GetUniqueStarGift({ slug }));\n\n  if (!result) return undefined;\n\n  const gift = buildApiStarGift(result.gift);\n  if (gift.type !== 'starGiftUnique') return undefined;\n  return gift;\n}\n\nexport async function fetchStarGiftUpgradePreview({\n  giftId,\n}: {\n  giftId: string;\n}) {\n  const result = await invokeRequest(new GramJs.payments.GetStarGiftUpgradePreview({\n    giftId: BigInt(giftId),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return result.sampleAttributes.map(buildApiStarGiftAttribute).filter(Boolean);\n}\n\nexport function upgradeGift({\n  inputSavedGift,\n  shouldKeepOriginalDetails,\n}: {\n  inputSavedGift: ApiRequestInputSavedStarGift;\n  shouldKeepOriginalDetails?: true;\n}) {\n  return invokeRequest(new GramJs.payments.UpgradeStarGift({\n    stargift: buildInputSavedStarGift(inputSavedGift),\n    keepOriginalDetails: shouldKeepOriginalDetails,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function fetchStarGiftWithdrawalUrl({\n  inputGift,\n  password,\n}: {\n  inputGift: ApiRequestInputSavedStarGift;\n  password: string;\n}) {\n  try {\n    const passwordCheck = await getPassword(password);\n\n    if (!passwordCheck) {\n      return undefined;\n    }\n\n    if ('error' in passwordCheck) {\n      return passwordCheck;\n    }\n\n    const result = await invokeRequest(new GramJs.payments.GetStarGiftWithdrawalUrl({\n      stargift: buildInputSavedStarGift(inputGift),\n      password: passwordCheck,\n    }), {\n      shouldThrow: true,\n    });\n\n    if (!result) {\n      return undefined;\n    }\n\n    return { url: result.url };\n  } catch (err: unknown) {\n    if (!checkErrorType(err)) return undefined;\n\n    return wrapError(err);\n  }\n\n  return undefined;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport { buildApiCollectibleInfo } from '../apiBuilders/misc';\nimport { invokeRequest } from './client';\n\ntype InputCollectible = {\n  phone: string;\n} | {\n  username: string;\n};\n\nexport async function fetchCollectionInfo(collectible: InputCollectible) {\n  const inputCollectible = 'username' in collectible\n    ? new GramJs.InputCollectibleUsername({ username: collectible.username })\n    : new GramJs.InputCollectiblePhone({ phone: collectible.phone });\n\n  const result = await invokeRequest(new GramJs.fragment.GetCollectibleInfo({\n    collectible: inputCollectible,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildApiCollectibleInfo(result);\n}\n","import type {\n  ApiInitialArgs,\n  ApiOnProgress,\n  OnApiUpdate,\n} from '../../types';\nimport type { LocalDb } from '../localDb';\nimport type { MethodArgs, MethodResponse, Methods } from './types';\n\nimport { updateFullLocalDb } from '../localDb';\nimport { init as initUpdateEmitter } from '../updates/apiUpdateEmitter';\nimport { init as initClient } from './client';\nimport * as methods from './index';\n\nexport function initApi(_onUpdate: OnApiUpdate, initialArgs: ApiInitialArgs, initialLocalDb?: LocalDb) {\n  initUpdateEmitter(_onUpdate);\n\n  if (initialLocalDb) updateFullLocalDb(initialLocalDb);\n\n  initClient(initialArgs);\n}\n\nexport function callApi<T extends keyof Methods>(fnName: T, ...args: MethodArgs<T>): MethodResponse<T> {\n  // @ts-ignore\n  return methods[fnName](...args) as MethodResponse<T>;\n}\n\nexport function cancelApiProgress(progressCallback: ApiOnProgress) {\n  progressCallback.isCanceled = true;\n}\n","/* eslint-disable no-console */\n\nimport type { DebugLevel } from '../../../util/debugConsole';\nimport type { ApiOnProgress, ApiUpdate } from '../../types';\nimport type { OriginMessageEvent, WorkerPayload } from './types';\n\nimport { DEBUG } from '../../../config';\nimport { DEBUG_LEVELS } from '../../../util/debugConsole';\nimport { throttleWithTickEnd } from '../../../util/schedulers';\nimport { log } from '../helpers/misc';\nimport { callApi, cancelApiProgress, initApi } from '../methods/init';\n\ndeclare const self: WorkerGlobalScope;\n\nconst ORIGINAL_FUNCTIONS = DEBUG_LEVELS.reduce((acc, level) => {\n  acc[level] = console[level];\n  return acc;\n}, {} as Record<DebugLevel, (...args: any[]) => void>);\n\nfunction enableDebugLog() {\n  DEBUG_LEVELS.forEach((level) => {\n    console[level] = (...args: any[]) => {\n      postMessage({\n        type: 'debugLog',\n        level,\n        args: JSON.parse(JSON.stringify(args, (key, value) => (typeof value === 'bigint'\n          ? value.toString()\n          : value))),\n      });\n    };\n  });\n}\n\nfunction disableDebugLog() {\n  DEBUG_LEVELS.forEach((level) => {\n    console[level] = ORIGINAL_FUNCTIONS[level];\n  });\n}\n\nhandleErrors();\n\nlet pendingPayloads: WorkerPayload[] = [];\nlet pendingTransferables: Transferable[] = [];\nlet pendingUpdates: ApiUpdate[] = [];\n\nconst callbackState = new Map<string, ApiOnProgress>();\n\nif (DEBUG) {\n  console.log('>>> FINISH LOAD WORKER');\n}\n\nonmessage = ({ data }: OriginMessageEvent) => {\n  data.payloads.forEach(async (payload) => {\n    switch (payload.type) {\n      case 'initApi': {\n        const { messageId, args } = payload;\n        await initApi(onUpdate, args[0], args[1]);\n        if (messageId) {\n          sendToOrigin({\n            type: 'methodResponse',\n            messageId,\n            response: true,\n          });\n        }\n        break;\n      }\n      case 'callMethod': {\n        const {\n          messageId, name, args, withCallback,\n        } = payload;\n        try {\n          if (messageId && withCallback) {\n            const callback = (...callbackArgs: any[]) => {\n              const lastArg = callbackArgs[callbackArgs.length - 1];\n\n              sendToOrigin({\n                type: 'methodCallback',\n                messageId,\n                callbackArgs,\n              }, lastArg instanceof ArrayBuffer ? lastArg : undefined);\n            };\n\n            callbackState.set(messageId, callback);\n\n            args.push(callback as never);\n          }\n\n          const response = await callApi(name, ...args);\n\n          if (DEBUG && typeof response === 'object' && 'CONSTRUCTOR_ID' in response) {\n            log('UNEXPECTED RESPONSE', `${name}: ${response.className}`);\n          }\n\n          const { arrayBuffer } = (typeof response === 'object' && 'arrayBuffer' in response && response) || {};\n\n          if (messageId) {\n            sendToOrigin({\n              type: 'methodResponse',\n              messageId,\n              response,\n            }, arrayBuffer);\n          }\n        } catch (error: any) {\n          if (DEBUG) {\n            console.error(error);\n          }\n\n          if (messageId) {\n            sendToOrigin({\n              type: 'methodResponse',\n              messageId,\n              error: { message: error.message },\n            });\n          }\n        }\n\n        if (messageId) {\n          callbackState.delete(messageId);\n        }\n\n        break;\n      }\n      case 'cancelProgress': {\n        const callback = callbackState.get(payload.messageId);\n        if (callback) {\n          cancelApiProgress(callback);\n        }\n\n        break;\n      }\n      case 'ping': {\n        sendToOrigin({\n          type: 'methodResponse',\n          messageId: payload.messageId!,\n        });\n\n        break;\n      }\n      case 'toggleDebugMode': {\n        if (payload.isEnabled) {\n          enableDebugLog();\n        } else {\n          disableDebugLog();\n        }\n      }\n    }\n  });\n};\n\nfunction handleErrors() {\n  self.onerror = (e) => {\n    console.error(e);\n    sendToOrigin({ type: 'unhandledError', error: { message: e.error.message || 'Uncaught exception in worker' } });\n  };\n\n  self.addEventListener('unhandledrejection', (e) => {\n    console.error(e);\n    sendToOrigin({ type: 'unhandledError', error: { message: e.reason.message || 'Uncaught rejection in worker' } });\n  });\n}\n\nconst sendToOriginOnTickEnd = throttleWithTickEnd(() => {\n  if (pendingUpdates.length) {\n    pendingPayloads.unshift({\n      type: 'updates',\n      updates: pendingUpdates,\n    });\n  }\n\n  const data = { payloads: pendingPayloads };\n  const transferables = pendingTransferables;\n\n  pendingUpdates = [];\n  pendingPayloads = [];\n  pendingTransferables = [];\n\n  if (transferables.length) {\n    postMessage(data, transferables);\n  } else {\n    postMessage(data);\n  }\n});\n\nfunction sendToOrigin(payload: WorkerPayload, transferable?: Transferable) {\n  pendingPayloads.push(payload);\n\n  if (transferable) {\n    pendingTransferables.push(transferable);\n  }\n\n  sendToOriginOnTickEnd();\n}\n\nfunction onUpdate(update: ApiUpdate) {\n  if (DEBUG && update['@type'] !== 'updateUserStatus' && update['@type'] !== 'updateServerTimeOffset') {\n    log('UPDATE', update['@type'], update);\n  }\n\n  pendingUpdates.push(update);\n  sendToOriginOnTickEnd();\n}\n","import BigInt from 'big-integer';\n\nimport { createHash, randomBytes } from './crypto/crypto';\n\nexport function readBigIntFromBuffer(buffer: Buffer | number[], little = true, signed = false): BigInt.BigInteger {\n    let randBuffer = Buffer.from(buffer);\n    const bytesNumber = randBuffer.length;\n    if (little) {\n        randBuffer = randBuffer.reverse();\n    }\n    let bigInt = BigInt(randBuffer.toString('hex'), 16);\n    if (signed && Math.floor(bigInt.toString(2).length / 8) >= bytesNumber) {\n        bigInt = bigInt.subtract(BigInt(2)\n            .pow(BigInt(bytesNumber * 8)));\n    }\n    return bigInt;\n}\n\nexport function toSignedLittleBuffer(big: BigInt.BigInteger, number = 8) {\n    const bigNumber = BigInt(big);\n    const byteArray: number[] = [];\n    for (let i = 0; i < number; i++) {\n        byteArray[i] = bigNumber.shiftRight(8 * i)\n            .and(255)\n            .toJSNumber();\n    }\n\n    return Buffer.from(byteArray);\n}\n\nexport function readBufferFromBigInt(bigInt: BigInt.BigInteger, bytesNumber: number, little = true, signed = false) {\n    const bitLength = bigInt.bitLength().toJSNumber();\n\n    const bytes = Math.ceil(bitLength / 8);\n    if (bytesNumber < bytes) {\n        throw new Error('OverflowError: int too big to convert');\n    }\n    if (!signed && bigInt.lesser(BigInt(0))) {\n        throw new Error('Cannot convert to unsigned');\n    }\n    let below = false;\n    if (bigInt.lesser(BigInt(0))) {\n        below = true;\n        bigInt = bigInt.abs();\n    }\n\n    const hex = bigInt.toString(16).padStart(bytesNumber * 2, '0');\n    let buffer = Buffer.from(hex, 'hex');\n\n    if (signed && below) {\n        buffer[buffer.length - 1] = 256 - buffer[buffer.length - 1];\n        for (let i = 0; i < buffer.length - 1; i++) {\n            buffer[i] = 255 - buffer[i];\n        }\n    }\n    if (little) {\n        buffer = buffer.reverse();\n    }\n\n    return buffer;\n}\n\nexport function generateRandomLong(signed = true) {\n    return readBigIntFromBuffer(generateRandomBytes(8), true, signed);\n}\n\nexport function mod(n: number, m: number) {\n    return ((n % m) + m) % m;\n}\n\nexport function bigIntMod(n: BigInt.BigInteger, m: BigInt.BigInteger) {\n    return ((n.remainder(m)).add(m)).remainder(m);\n}\n\nexport function generateRandomBytes(count: number) {\n    return Buffer.from(randomBytes(count));\n}\n\nexport async function generateKeyDataFromNonce(\n    serverNonceBigInt: BigInt.BigInteger, newNonceBigInt: BigInt.BigInteger,\n) {\n    const serverNonce = toSignedLittleBuffer(serverNonceBigInt, 16);\n    const newNonce = toSignedLittleBuffer(newNonceBigInt, 32);\n    const [hash1, hash2, hash3] = await Promise.all([\n        sha1(Buffer.concat([newNonce, serverNonce])),\n        sha1(Buffer.concat([serverNonce, newNonce])),\n        sha1(Buffer.concat([newNonce, newNonce])),\n    ]);\n    const keyBuffer = Buffer.concat([hash1, hash2.slice(0, 12)]);\n    const ivBuffer = Buffer.concat([hash2.slice(12, 20), hash3, newNonce.slice(0, 4)]);\n    return {\n        key: keyBuffer,\n        iv: ivBuffer,\n    };\n}\n\nexport function convertToLittle(buf: Uint32Array) {\n    const correct = Buffer.alloc(buf.length * 4);\n\n    for (let i = 0; i < buf.length; i++) {\n        correct.writeUInt32BE(buf[i], i * 4);\n    }\n    return correct;\n}\n\nexport function sha1(data: Buffer): Promise<Buffer> {\n    const shaSum = createHash('sha1');\n    shaSum.update(data);\n    return shaSum.digest();\n}\n\nexport function sha256(data: Buffer): Promise<Buffer> {\n    const shaSum = createHash('sha256');\n    shaSum.update(data);\n    return shaSum.digest();\n}\n\nexport function modExp(\n    a: bigInt.BigInteger,\n    b: bigInt.BigInteger,\n    n: bigInt.BigInteger,\n) {\n    a = a.remainder(n);\n    let result = BigInt.one;\n    let x = a;\n    while (b.greater(BigInt.zero)) {\n        const leastSignificantBit = b.remainder(BigInt(2));\n        b = b.divide(BigInt(2));\n        if (leastSignificantBit.eq(BigInt.one)) {\n            result = result.multiply(x);\n            result = result.remainder(n);\n        }\n        x = x.multiply(x);\n        x = x.remainder(n);\n    }\n    return result;\n}\n\nexport function getByteArray(integer: BigInt.BigInteger, signed = false) {\n    const bits = integer.toString(2).length;\n    const byteLength = Math.floor((bits + 8 - 1) / 8);\n    return readBufferFromBigInt(BigInt(integer), byteLength, false, signed);\n}\n\nexport function getRandomInt(min: number, max: number) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function sleep(ms: number) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, ms);\n    });\n}\n\nexport function bufferXor(a: Buffer, b: Buffer) {\n    const res = [];\n    for (let i = 0; i < a.length; i++) {\n        res.push(a[i] ^ b[i]);\n    }\n    return Buffer.from(res);\n}\n\n// Taken from https://stackoverflow.com/questions/18638900/javascript-crc32/18639999#18639999\nexport const CRC32_TABLE = (() => {\n    let c;\n    const crcTable = [];\n    for (let n = 0; n < 256; n++) {\n        c = n;\n        for (let k = 0; k < 8; k++) {\n            c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n        }\n        crcTable[n] = c;\n    }\n    return crcTable;\n})();\n\nexport function crc32(buf: Buffer | string) {\n    if (!Buffer.isBuffer(buf)) {\n        buf = Buffer.from(buf);\n    }\n    let crc = -1;\n\n    for (let index = 0; index < buf.length; index++) {\n        const byte = buf[index];\n        crc = CRC32_TABLE[(crc ^ byte) & 0xff] ^ (crc >>> 8);\n    }\n    return (crc ^ (-1)) >>> 0;\n}\n","/**\n * Uint32Array -> ArrayBuffer (low-endian os)\n */\nexport function i2abLow(buf: Uint32Array): ArrayBuffer {\n    const uint8 = new Uint8Array(buf.length * 4);\n    let i = 0;\n\n    for (let j = 0; j < buf.length; j++) {\n        const int = buf[j];\n\n        uint8[i++] = int >>> 24;\n        uint8[i++] = (int >> 16) & 0xFF;\n        uint8[i++] = (int >> 8) & 0xFF;\n        uint8[i++] = int & 0xFF;\n    }\n\n    return uint8.buffer;\n}\n\n/**\n * Uint32Array -> ArrayBuffer (big-endian os)\n */\nexport function i2abBig(buf: Uint32Array): ArrayBuffer {\n    return buf.buffer;\n}\n\n/**\n * ArrayBuffer -> Uint32Array (low-endian os)\n */\nexport function ab2iLow(ab: ArrayBuffer | SharedArrayBuffer | Uint8Array): Uint32Array {\n    const uint8 = new Uint8Array(ab);\n    const buf = new Uint32Array(uint8.length / 4);\n\n    for (let i = 0; i < uint8.length; i += 4) {\n        buf[i / 4] = (\n            uint8[i] << 24\n            ^ uint8[i + 1] << 16\n            ^ uint8[i + 2] << 8\n            ^ uint8[i + 3]\n        );\n    }\n\n    return buf;\n}\n\n/**\n * ArrayBuffer -> Uint32Array (big-endian os)\n */\nexport function ab2iBig(ab: ArrayBuffer | SharedArrayBuffer | Uint8Array): Uint32Array {\n    return new Uint32Array(ab);\n}\n\nexport const isBigEndian = new Uint8Array(new Uint32Array([0x01020304]))[0] === 0x01;\nexport const i2ab = isBigEndian ? i2abBig : i2abLow;\nexport const ab2i = isBigEndian ? ab2iBig : ab2iLow;\n","import AES from '@cryptography/aes';\n\nimport { ab2i, i2ab } from './converters';\nimport { getWords } from './words';\n\nclass Counter {\n    _counter: Buffer;\n\n    constructor(initialValue: Buffer) {\n        this._counter = Buffer.from(initialValue);\n    }\n\n    increment() {\n        for (let i = 15; i >= 0; i--) {\n            if (this._counter[i] === 255) {\n                this._counter[i] = 0;\n            } else {\n                this._counter[i]++;\n                break;\n            }\n        }\n    }\n}\n\nclass CTR {\n    private _counter: Counter;\n\n    private _remainingCounter?: Buffer;\n\n    private _remainingCounterIndex: number;\n\n    private _aes: AES;\n\n    constructor(key: Buffer, counter: Counter | Buffer) {\n        if (!(counter instanceof Counter)) {\n            counter = new Counter(counter);\n        }\n\n        this._counter = counter;\n\n        this._remainingCounter = undefined;\n        this._remainingCounterIndex = 16;\n\n        this._aes = new AES(getWords(key));\n    }\n\n    update(plainText: Buffer) {\n        return this.encrypt(plainText);\n    }\n\n    encrypt(plainText: Buffer) {\n        const encrypted = Buffer.from(plainText);\n\n        for (let i = 0; i < encrypted.length; i++) {\n            if (this._remainingCounterIndex === 16) {\n                this._remainingCounter = Buffer.from(i2ab(this._aes.encrypt(ab2i(this._counter._counter))));\n                this._remainingCounterIndex = 0;\n                this._counter.increment();\n            }\n            if (this._remainingCounter) {\n                encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n            }\n        }\n\n        return encrypted;\n    }\n}\n\nexport type CtrImpl = CTR;\n\n// endregion\nexport function createDecipheriv(algorithm: string, key: Buffer, iv: Buffer) {\n    if (algorithm.includes('ECB')) {\n        throw new Error('Not supported');\n    } else {\n        return new CTR(key, iv);\n    }\n}\n\nexport function createCipheriv(algorithm: string, key: Buffer, iv: Buffer) {\n    if (algorithm.includes('ECB')) {\n        throw new Error('Not supported');\n    } else {\n        return new CTR(key, iv);\n    }\n}\n\nexport function randomBytes(count: number) {\n    const bytes = new Uint8Array(count);\n    crypto.getRandomValues(bytes);\n    return bytes;\n}\n\nclass Hash {\n    private data = new Uint8Array(0);\n\n    constructor(private algorithm: 'sha1' | 'sha256') {}\n\n    update(data: ArrayLike<number>) {\n        // We shouldn't be needing new Uint8Array but it doesn't\n        // work without it\n        this.data = new Uint8Array(data);\n    }\n\n    async digest() {\n        if (this.algorithm === 'sha1') {\n            // eslint-disable-next-line no-restricted-globals\n            return Buffer.from(await self.crypto.subtle.digest('SHA-1', this.data));\n        } else {\n            // eslint-disable-next-line no-restricted-globals\n            return Buffer.from(await self.crypto.subtle.digest('SHA-256', this.data));\n        }\n    }\n}\n\nexport async function pbkdf2(password: Buffer, salt: Buffer, iterations: number) {\n    const passwordKey = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveBits']);\n    return Buffer.from(await crypto.subtle.deriveBits({\n        name: 'PBKDF2',\n        hash: 'SHA-512',\n        salt,\n        iterations,\n    }, passwordKey, 512));\n}\n\nexport function createHash(algorithm: 'sha1' | 'sha256') {\n    return new Hash(algorithm);\n}\n","/*\n * Imported from https://github.com/spalt08/cryptography/blob/master/packages/aes/src/utils/words.ts\n */\n\nexport function s2i(str: string, pos: number) {\n    return (\n        str.charCodeAt(pos) << 24\n        ^ str.charCodeAt(pos + 1) << 16\n        ^ str.charCodeAt(pos + 2) << 8\n        ^ str.charCodeAt(pos + 3)\n    );\n}\n\n/**\n * Helper function for transforming string key to Uint32Array\n */\nexport function getWords(key: string | Uint8Array | Uint32Array) {\n    if (key instanceof Uint32Array) {\n        return key;\n    }\n\n    if (typeof key === 'string') {\n        if (key.length % 4 !== 0) for (let i = key.length % 4; i <= 4; i++) key += '\\0x00';\n\n        const buf = new Uint32Array(key.length / 4);\n        for (let i = 0; i < key.length; i += 4) buf[i / 4] = s2i(key, i);\n\n        return buf;\n    }\n\n    if (key instanceof Uint8Array) {\n        const buf = new Uint32Array(key.length / 4);\n\n        for (let i = 0; i < key.length; i += 4) {\n            buf[i / 4] = (\n                key[i] << 24\n                ^ key[i + 1] << 16\n                ^ key[i + 2] << 8\n                ^ key[i + 3]\n            );\n        }\n\n        return buf;\n    }\n\n    throw new Error('Unable to create 32-bit words');\n}\n\nexport function xor(left: Uint32Array, right: Uint32Array, to = left) {\n    for (let i = 0; i < left.length; i++) to[i] = left[i] ^ right[i];\n}\n","import { crc32 } from '../Helpers';\n\nexport interface GenerationEntryConfig {\n    name: string;\n    constructorId: number;\n    argsConfig: Record<string, GenerationArgConfig>;\n    subclassOfId: number;\n    result: string;\n    isFunction?: boolean;\n    namespace: string | undefined;\n}\n\nexport interface GenerationArgConfig {\n    isVector: boolean;\n    isFlag: boolean;\n    skipConstructorId: boolean;\n    flagGroup: number;\n    flagIndex: number;\n    flagIndicator: boolean;\n    type: string;\n    useVectorId: boolean | undefined;\n}\n\nconst snakeToCamelCase = (name: string) => {\n    const result = name.replace(/(?:^|_)([a-z])/g, (_, g) => g.toUpperCase());\n    return result.replace(/_/g, '');\n};\nconst variableSnakeToCamelCase = (str: string) => str.replace(\n    /([-_][a-z])/g,\n    (group) => group.toUpperCase()\n        .replace('-', '')\n        .replace('_', ''),\n);\n\nconst CORE_TYPES = new Set([\n    0xbc799737, // boolFalse#bc799737 = Bool;\n    0x997275b5, // boolTrue#997275b5 = Bool;\n    0x3fedd339, // true#3fedd339 = True;\n    0xc4b9f9bb, // error#c4b9f9bb code:int text:string = Error;\n    0x56730bcc, // null#56730bcc = Null;\n]);\nconst AUTH_KEY_TYPES = new Set([\n    0x05162463, // resPQ,\n    0x83c95aec, // p_q_inner_data\n    0xa9f55f95, // p_q_inner_data_dc\n    0x3c6a84d4, // p_q_inner_data_temp\n    0x56fddf88, // p_q_inner_data_temp_dc\n    0xd0e8075c, // server_DH_params_ok\n    0xb5890dba, // server_DH_inner_data\n    0x6643b654, // client_DH_inner_data\n    0xd712e4be, // req_DH_params\n    0xf5045f1f, // set_client_DH_params\n    0x3072cfa1, // gzip_packed\n]);\n\nconst findAll = (regex: RegExp, str: string, matches: string[][] = []) => {\n    if (!regex.flags.includes('g')) {\n        regex = new RegExp(regex.source, 'g');\n    }\n\n    const res = regex.exec(str);\n\n    if (res) {\n        matches.push(res.slice(1));\n        findAll(regex, str, matches);\n    }\n\n    return matches;\n};\n\nconst fromLine = (line: string, isFunction?: boolean) => {\n    const match = line.match(/([\\w.]+)(?:#([0-9a-fA-F]+))?(?:\\s{?\\w+:[\\w\\d<>#.?!]+}?)*\\s=\\s([\\w\\d<>#.?]+);$/);\n    if (!match) {\n        // Probably \"vector#1cb5c415 {t:Type} # [ t ] = Vector t;\"\n        throw new Error(`Cannot parse TLObject ${line}`);\n    }\n\n    const argsMatch = findAll(/({)?(\\w+):([\\w\\d<>#.?!]+)}?/, line);\n    const currentConfig: GenerationEntryConfig = {\n        name: match[1],\n        constructorId: parseInt(match[2], 16),\n        argsConfig: {},\n        subclassOfId: crc32(match[3]),\n        result: match[3],\n        isFunction,\n        namespace: undefined,\n    };\n    if (!currentConfig.constructorId) {\n        const hexId = '';\n        let args;\n\n        if (Object.values(currentConfig.argsConfig).length) {\n            args = ` ${Object.keys(currentConfig.argsConfig)\n                .map((arg) => arg.toString())\n                .join(' ')}`;\n        } else {\n            args = '';\n        }\n\n        const representation = `${currentConfig.name}${hexId}${args} = ${currentConfig.result}`\n            .replace(/(:|\\?)bytes /g, '$1string ')\n            .replace(/</g, ' ')\n            .replace(/>|{|}/g, '')\n            .replace(/ \\w+:flags\\d*\\.\\d+\\?true/g, '');\n\n        if (currentConfig.name === 'inputMediaInvoice') {\n            // eslint-disable-next-line no-empty\n            if (currentConfig.name === 'inputMediaInvoice') {\n            }\n        }\n\n        currentConfig.constructorId = crc32(Buffer.from(representation, 'utf8'));\n    }\n    for (const [brace, name, argType] of argsMatch) {\n        if (brace === undefined) {\n            currentConfig.argsConfig[variableSnakeToCamelCase(name)] = buildArgConfig(name, argType);\n        }\n    }\n    if (currentConfig.name.includes('.')) {\n        [currentConfig.namespace, currentConfig.name] = currentConfig.name.split(/\\.(.+)/);\n    }\n    currentConfig.name = snakeToCamelCase(currentConfig.name);\n    /*\n    for (const arg in currentConfig.argsConfig){\n      if (currentConfig.argsConfig.hasOwnProperty(arg)){\n        if (currentConfig.argsConfig[arg].flagIndicator){\n          delete  currentConfig.argsConfig[arg]\n        }\n      }\n    } */\n    return currentConfig;\n};\n\nfunction buildArgConfig(name: string, argType: string) {\n    name = name === 'self' ? 'is_self' : name;\n    // Default values\n    const currentConfig: GenerationArgConfig = {\n        isVector: false,\n        isFlag: false,\n        skipConstructorId: false,\n        flagGroup: 0,\n        flagIndex: -1,\n        flagIndicator: true,\n        type: '',\n        useVectorId: undefined,\n    };\n\n    // The type can be an indicator that other arguments will be flags\n    if (argType !== '#') {\n        currentConfig.flagIndicator = false;\n        // Strip the exclamation mark always to have only the name\n        currentConfig.type = argType.replace(/^!+/, '');\n\n        // The type may be a flag (flags[N].IDX?REAL_TYPE)\n        // Note that 'flags' is NOT the flags name; this\n        // is determined by a previous argument\n        // However, we assume that the argument will always be called 'flags[N]'\n        const flagMatch = currentConfig.type.match(/flags(\\d*)\\.(\\d+)\\?([\\w<>.]+)/);\n\n        if (flagMatch) {\n            currentConfig.isFlag = true;\n            currentConfig.flagGroup = Number(flagMatch[1] || 1);\n            currentConfig.flagIndex = Number(flagMatch[2]);\n            // Update the type to match the exact type, not the \"flagged\" one\n            [, , , currentConfig.type] = flagMatch;\n        }\n\n        // Then check if the type is a Vector<REAL_TYPE>\n        const vectorMatch = currentConfig.type.match(/[Vv]ector<([\\w\\d.]+)>/);\n\n        if (vectorMatch) {\n            currentConfig.isVector = true;\n\n            // If the type's first letter is not uppercase, then\n            // it is a constructor and we use (read/write) its ID.\n            currentConfig.useVectorId = currentConfig.type.charAt(0) === 'V';\n\n            // Update the type to match the one inside the vector\n            [, currentConfig.type] = vectorMatch;\n        }\n\n        // See use_vector_id. An example of such case is ipPort in\n        // help.configSpecial\n        if (/^[a-z]$/.test(currentConfig.type.split('.')\n            .pop()!\n            .charAt(0))\n        ) {\n            currentConfig.skipConstructorId = true;\n        }\n\n        // The name may contain \"date\" in it, if this is the case and\n        // the type is \"int\", we can safely assume that this should be\n        // treated as a \"date\" object. Note that this is not a valid\n        // Telegram object, but it's easier to work with\n        // if (\n        //     this.type === 'int' &&\n        //     (/(\\b|_)([dr]ate|until|since)(\\b|_)/.test(name) ||\n        //         ['expires', 'expires_at', 'was_online'].includes(name))\n        // ) {\n        //     this.type = 'date';\n        // }\n    }\n    return currentConfig;\n}\n\nexport function* parseTl(content: string, methods: any[] = [], ignoreIds = CORE_TYPES) {\n    (methods || []).reduce((o, m) => ({\n        ...o,\n        [m.name]: m,\n    }), {});\n    const objAll: GenerationEntryConfig[] = [];\n    const objByName: Record<string, GenerationEntryConfig> = {};\n    const objByType: Record<string, GenerationEntryConfig[]> = {};\n\n    const file = content;\n\n    let isFunction = false;\n\n    for (let line of file.split('\\n')) {\n        const commentIndex = line.indexOf('//');\n\n        if (commentIndex !== -1) {\n            line = line.slice(0, commentIndex);\n        }\n\n        line = line.trim();\n\n        if (!line) {\n            continue;\n        }\n\n        const match = line.match(/---(\\w+)---/);\n\n        if (match) {\n            const [, followingTypes] = match;\n            isFunction = followingTypes === 'functions';\n            continue;\n        }\n\n        try {\n            const result = fromLine(line, isFunction);\n\n            if (ignoreIds.has(result.constructorId)) {\n                continue;\n            }\n\n            objAll.push(result);\n\n            if (!result.isFunction) {\n                if (!objByType[result.result]) {\n                    objByType[result.result] = [];\n                }\n\n                objByName[result.name] = result;\n                objByType[result.result].push(result);\n            }\n        } catch (e: any) {\n            if (!e.toString()\n                .includes('vector#1cb5c415')) {\n                throw e;\n            }\n        }\n    }\n\n    // Once all objects have been parsed, replace the\n    // string type from the arguments with references\n    for (const obj of objAll) {\n        // console.log(obj)\n        if (AUTH_KEY_TYPES.has(obj.constructorId)) {\n            for (const arg in obj.argsConfig) {\n                if (obj.argsConfig[arg].type === 'string') {\n                    obj.argsConfig[arg].type = 'bytes';\n                }\n            }\n        }\n    }\n\n    for (const obj of objAll) {\n        yield obj;\n    }\n}\n\nexport function serializeBytes(data: Buffer | string | any) {\n    if (!(data instanceof Buffer)) {\n        if (typeof data === 'string') {\n            data = Buffer.from(data);\n        } else {\n            throw Error(`Bytes or str expected, not ${data.constructor.name}`);\n        }\n    }\n    const r = [];\n    let padding;\n    if (data.length < 254) {\n        padding = (data.length + 1) % 4;\n        if (padding !== 0) {\n            padding = 4 - padding;\n        }\n        r.push(Buffer.from([data.length]));\n        r.push(data);\n    } else {\n        padding = data.length % 4;\n        if (padding !== 0) {\n            padding = 4 - padding;\n        }\n        r.push(Buffer.from([254, data.length % 256, (data.length >> 8) % 256, (data.length >> 16) % 256]));\n        r.push(data);\n    }\n    r.push(Buffer.alloc(padding)\n        .fill(0));\n\n    return Buffer.concat(r);\n}\n\nexport function serializeDate(dt: Date | number) {\n    if (!dt) {\n        return Buffer.alloc(4)\n            .fill(0);\n    }\n    if (dt instanceof Date) {\n        dt = Math.floor((Date.now() - dt.getTime()) / 1000);\n    }\n    if (typeof dt === 'number') {\n        const t = Buffer.alloc(4);\n        t.writeInt32LE(dt, 0);\n        return t;\n    }\n    throw Error(`Cannot interpret \"${dt}\" as a date`);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [7784,8287,2786,580], () => (__webpack_require__(38570)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + {\"580\":\"a127a10ebeaf6e15ce62\",\"2786\":\"8822cfc420377e0acc77\",\"7784\":\"4e167a928464165e6412\",\"8287\":\"9cf863b4d9b47c10d271\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t8570: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunktelegram_t\"] = self[\"webpackChunktelegram_t\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","APP_CODE_NAME","IS_TEST","process","IS_PACKAGED_ELECTRON","DEBUG","ELECTRON_HOST_URL","MEDIA_CACHE_DISABLED","MEDIA_CACHE_NAME","MEDIA_CACHE_NAME_AVATARS","MEDIA_CACHE_MAX_BYTES","DOWNLOAD_WORKERS","UPLOAD_WORKERS","GLOBAL_SEARCH_CONTACTS_LIMIT","window","innerHeight","MEMBERS_LOAD_SLICE","PINNED_MESSAGES_LIMIT","BLOCKED_LIST_LIMIT","GROUP_CALL_PARTICIPANTS_LIMIT","STORY_LIST_LIMIT","API_GENERAL_ID_LIMIT","STATISTICS_PUBLIC_FORWARDS_LIMIT","TOP_REACTIONS_LIMIT","RECENT_REACTIONS_LIMIT","REACTION_LIST_LIMIT","REACTION_UNREAD_SLICE","MENTION_UNREAD_SLICE","TOPICS_SLICE","SPONSORED_MESSAGE_CACHE_MS","STARS_CURRENCY_CODE","MAX_INT_32","API_UPDATE_THROTTLE","Math","round","API_THROTTLE_RESET_UPDATES","Set","RECENT_STICKERS_LIMIT","RECENT_STATUS_LIMIT","DEFAULT_STATUS_ICON_ID","VIDEO_WEBM_TYPE","GIF_MIME_TYPE","LOTTIE_STICKER_MIME_TYPE","VIDEO_STICKER_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","MESSAGE_ID_REQUIRED_ERROR","ACCEPTABLE_USERNAME_ERRORS","WEB_APP_PLATFORM","LANG_PACK","SERVICE_NOTIFICATIONS_USER_ID","CHANNEL_ID_LENGTH","DEFAULT_GIF_SEARCH_BOT_USERNAME","ALL_FOLDER_ID","ARCHIVED_FOLDER_ID","DELETED_COMMENTS_CHANNEL_ID","GENERAL_TOPIC_ID","STORY_EXPIRE_PERIOD","STORY_VIEWERS_EXPIRE_PERIOD","MAX_UNIQUE_REACTIONS","DEFAULT_LIMITS","uploadMaxFileparts","stickersFaved","savedGifs","dialogFiltersChats","dialogFilters","dialogFolderPinned","captionLength","channels","channelsPublic","aboutLength","chatlistInvites","chatlistJoined","recommendedChannels","savedDialogsPinned","DEBUG_LEVELS","throttle","fn","ms","shouldRunFirst","interval","isPending","args","_args","self","setInterval","clearInterval","undefined","throttleWithTickEnd","schedulerFn","waiting","throttleWith","onTickEnd","reduce","acc","level","console","pause","Promise","resolve","setTimeout","onTickEndCallbacks","callback","push","then","currentCallbacks","forEach","cb","RPCError","Error","constructor","message","request","code","super","replace","toString","_fmtRequest","_defineProperty","this","errorMessage","className","InvalidDCError","BadRequestError","FloodError","ServerError","TimedOutError","UserMigrateError","newDc","Number","capture","PhoneMigrateError","FloodWaitError","seconds","FloodPremiumWaitError","MsgWaitError","FloodTestPhoneWaitError","NetworkMigrateError","EmailUnconfirmedError","codeLength","PasswordFreshError","rpcErrorRe","Map","TypeNotFoundError","invalidConstructorId","remaining","length","alert","InvalidBufferError","payload","readInt32LE","SecurityError","BadMessageError","ErrorMessages","AsyncQueue","_queue","resolvePush","resolveGet","canGet","canPush","value","pop","returned","MessageContainer","messages","CONSTRUCTOR_ID","classType","fromReader","reader","totalLength","readInt","x","msgId","readLong","seqNo","before","tellPosition","obj","tgReadObject","setPosition","tlMessage","TLMessage","coreObjects","RPCResult","GZIPPacked","tlobjects","tl","Object","values","Api","sub","BinaryReader","data","stream","_last","offset","readByte","read","signed","res","readUInt32LE","readLargeInt","readFloat","readFloatLE","readDouble","readDoubleLE","bits","buffer","floor","readBigIntFromBuffer","result","slice","getBuffer","tgReadBytes","firstByte","padding","tgReadString","tgReadBool","tgReadDate","Date","constructorId","clazz","temp","i","get","seek","pos","error","tgReadVector","count","position","BinaryWriter","_buffers","write","getValue","Buffer","concat","closeError","_AbortSignal","AbortSignal","timeout","ctrl","AbortController","abort","signal","HttpStream","disconnectedCallback","isClosed","readExactly","number","readData","alloc","thisTime","canRead","shift","reject","resolveRead","rejectRead","getURL","ip","port","isTestServer","isPremium","connect","url","fetch","method","body","from","mode","handleDisconnect","async","response","status","arrayBuffer","catch","err","close","_level","Logger","colors","start","warn","info","debug","end","messageFormat","setLevel","canSend","LEVEL_MAP","has","_log","format","toISOString","toUpperCase","color","log","USE_INVOKE_AFTER_WITH","MessagePacker","state","logger","_state","_pendingStates","_ready","setReady","clear","append","atStart","after","unshift","promise","finally","filter","s","prepend","states","reverse","extend","getBeacon","SIZE_OVERHEAD","MAXIMUM_SIZE","afterId","writeDataAsMessage","name","wait","Boolean","batch","size","MAXIMUM_LENGTH","abortSignal","aborted","b","writeUInt32LE","writeInt32LE","containerId","mutex","Mutex","PromisedWebSockets","client","closed","toReturn","readAll","getWebSocketLink","website","WebSocket","hasResolved","onopen","receive","clearTimeout","onerror","onclose","event","reason","wasClean","min","addEventListener","send","onmessage","runExclusive","ArrayBuffer","Response","Connection","dcId","loggers","_ip","_port","_dcId","_isTestServer","_isPremium","_connected","_sendTask","_recvTask","_codec","_obfuscation","_sendArray","_recvArray","shouldLongPoll","socket","disconnectCallback","bind","isConnected","disconnect","_connect","PacketCodecClass","_initConn","_sendLoop","_recvLoop","fromCallback","recv","_send","e","_recv","tag","encodedPacket","encodePacket","readPacket","ObfuscatedConnection","ObfuscatedIO","header","PacketCodec","connection","_conn","HttpConnection","params","href","AbridgedPacketCodec","props","obfuscateTag","writeUInt8","readBufferFromBigInt","BigInt","CTR","key","iv","isBuffer","cipher","createCipheriv","decipher","createDecipheriv","encrypt","update","decrypt","initHeader","random","_encrypt","encryptor","_decrypt","decryptor","packetCodec","keywords","generateRandomBytes","equals","ok","toJSON","randomReversed","encryptKey","encryptIv","decryptKey","decryptIv","n","UpdateConnectionState","UpdateServerTimeOffset","timeOffset","IGENEW","ige","AesIge","decryptIge","cipherText","convertToLittle","encryptIge","plainText","MTProtoState","authKey","isCall","isOutgoing","_isCall","_isOutgoing","salt","id","_sequence","_lastMsgId","msgIds","reset","generateRandomLong","updateMessageId","_getNewMsgId","_calcKey","msgKey","sha256a","sha256b","all","sha256","contentRelated","_getSeqNo","gzipIfSmaller","InvokeAfterMsg","query","getBytes","m","toSignedLittleBuffer","encryptMessageData","waitForKey","getKey","keyId","lengthStart","Array","fill","mod","IGE","decryptMessageData","neq","ourKey","eq","remoteMsgId","includes","remoteSequence","containerLen","diff","startsWith","now","msgLocalTime","getMsgIdTimeLocal","nanoseconds","newMsgId","shiftLeft","or","greaterOrEquals","add","shiftRight","toJSNumber","updateTimeOffset","correctMsgId","bad","old","correct","MTProtoPlainSender","_connection","AuthKey","hash","_key","_hash","auxHash","setKey","sha1","sleep","calcNewNonceHash","newNonce","nonce","shaData","other","PendingState","_pending","set","getAndDelete","delete","SERVER_KEYS","fingerprint","bigInt","keyInfo","Factorizator","gcd","a","remainder","factorize","pq","p","q","divide","y","minus","c","k","g","r","ys","lesser","modExp","condition","multiply","abs","greater","Deferred","resolved","RequestState","finished","resetPromise","isReady","MTProtoSender","opts","logWithIndexCallback","DEFAULT_OPTIONS","_fallbackConnection","_shouldForceHttpTransport","shouldForceHttpTransport","_shouldAllowHttpTransport","shouldAllowHttpTransport","_senderIndex","senderIndex","_retries","retries","_retriesToFallback","retriesToFallback","_delay","delay","_retryMainConnectionDelay","retryMainConnectionDelay","_authKeyCallback","authKeyCallback","_updateCallback","updateCallback","_autoReconnectCallback","autoReconnectCallback","_isMainSender","isMainSender","_isExported","isExported","_onConnectionBreak","onConnectionBreak","_isFallback","_getShouldDebugExportedSenders","getShouldDebugExportedSenders","userDisconnected","_userConnected","isReconnecting","_disconnected","_sendLoopHandle","_longPollLoopHandle","_recvLoopHandle","_sendQueue","_sendQueueLongPoll","_pendingState","_pendingAck","_lastAcks","_handlers","_handleRPCResult","_handleContainer","_handleGzipPacked","Pong","_handlePong","BadServerSalt","_handleBadServerSalt","BadMsgNotification","_handleBadNotification","MsgDetailedInfo","_handleDetailedInfo","MsgNewDetailedInfo","_handleNewDetailedInfo","NewSessionCreated","_handleNewSessionCreated","MsgsAck","_handleAck","FutureSalts","_handleFutureSalts","MsgsStateReq","_handleStateForgotten","MsgResendReq","MsgsAllInfo","_handleMsgAll","getConnection","force","fallbackConnection","isConnecting","attempt","logWithIndex","connected","disconnected","tryReconnectToMain","_isReconnectingToMain","_disconnect","destroy","isLongPoll","addStateToQueue","sendBeacon","encryptedData","postMessage","type","_authenticated","plain","MtProtoPlainSender","sender","bytes","resPQ","ReqPqMulti","ResPQ","pBuffer","getByteArray","qBuffer","pqInnerData","PQInnerData","serverNonce","targetFingerprint","targetKey","serverPublicKeyFingerprints","dataWithPadding","dataPadReversed","tempKey","shaDigestKeyWithData","dataWithHash","aesEncrypted","tempKeyXor","bufferXor","keyAesEncrypted","keyAesEncryptedInt","encryptedDataBuffer","serverDhParams","ReqDHParams","publicKeyFingerprint","ServerDHParamsOk","ServerDHParamsFail","sh","nnh","newNonceHash","generateKeyDataFromNonce","encryptedAnswer","plainTextAnswer","serverDhInner","ServerDHInnerData","sha1Answer","dhPrime","ga","gA","serverTime","gb","gab","lesserOrEquals","toCheckAgainst","pow","clientDhInner","ClientDHInnerData","retryId","gB","clientDdhInnerHashed","clientDhEncrypted","dhGen","SetClientDHParams","nonceTypes","DhGenOk","DhGenRetry","DhGenFail","nonceNumber","indexOf","doAuthentication","_longPollLoop","isSendingLongPoll","reconnect","checkLongPoll","appendAcks","ack","HttpWait","maxDelay","waitAfter","maxWait","isArray","map","_handleBadAuthKey","_processMessage","shouldSkipForMain","broken","handler","_handleUpdate","_popStates","toPop","pendingState","reqMsgId","rpcError","msgRegex","Cls","match","parseInt","errorCode","RPCMessageToError","readResult","upload","File","innerMessage","SUBCLASS_OF_ID","pong","newTimeOffset","badSalt","badMsgId","newServerSalt","badMsg","JSON","stringify","answerMsgId","serverSalt","MsgsStateInfo","String","fromCharCode","repeat","_reconnect","currentConnection","currentFallbackConnection","newConnection","newFallbackConnection","Infinity","autoReconnect","connectTimeout","JPEG_HEADER","JPEG_FOOTER","getInputPeer","entity","allowSelf","checkHash","User","InputPeerSelf","accessHash","InputPeerUser","userId","Chat","ChatEmpty","ChatForbidden","InputPeerChat","chatId","Channel","TypeError","InputPeerChannel","channelId","ChannelForbidden","InputUser","InputChannel","UserEmpty","target","_raiseCastFail","InputPeerEmpty","strippedPhotoToJpg","stripped","getDC","downloadDC","ipAddress","Session","MemorySession","_serverAddress","_takeoutId","_entities","_updateStates","serverAddress","setDC","getAuthKey","setAuthKey","load","save","CallbackSession","sessionData","_sessionData","_callback","_authKeys","mainDcId","keys","hashes","isTest","dcIdStr","skipOnUpdate","_onUpdate","getSessionData","SIZE_FOR_HASH","checkPrimeAndGood","primeBytes","numBytesForHash","bigNumForHash","isGoodModExpFirst","modexp","prime","subtract","bitLength","xor","computeHash","algo","password","hash1","salt1","hash2","salt2","hash3","iterations","pbkdf2","pbkdf2sha512","computeDigest","computeCheck","currentAlgo","PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow","srpB","srp_B","srpId","pwHash","B","isGoodLarge","pForHash","gForHash","bForHash","gX","kgX","bigIntMod","aForHash","u","A","generateAndCheckRandom","ux","aUx","S","K","pSha","gSha","salt1Sha","salt2Sha","M1","InputCheckPasswordSRP","serverTimeOffset","getServerTimeOffset","getServerTime","DEFAULT_INITIAL_METHOD","signInUserWithPreferredMethod","apiCredentials","authParams","initialMethod","signInUser","signInUserWithQrCode","checkAuthorization","shouldThrow","invoke","updates","GetState","phoneNumber","phoneCodeHash","phoneCode","isCodeViaApp","sendCodeResult","sendCode","forceSMS","onError","termsOfService","isRegistrationRequired","auth","SignIn","AuthorizationSignUpRequired","user","signInWithPassword","firstName","lastName","firstAndLastNames","SignUp","help","AcceptTermsOfService","isScanningComplete","inputPromise","ExportLoginToken","apiId","apiHash","exceptIds","LoginToken","token","expires","race","qrCode","updatePromise","addEventHandler","UpdateLoginToken","build","result2","LoginTokenSuccess","authorization","Authorization","LoginTokenMigrateTo","_switchDC","migratedResult","ImportLoginToken","sendResult","SendCode","settings","CodeSettings","SentCode","SentCodeTypeSms","SentCodeTypeApp","resendResult","ResendCode","noReset","passwordSrpResult","account","GetPassword","hint","passwordSrpCheck","computePasswordSrpCheck","CheckPassword","Foreman","maxWorkers","requestWorker","isPriority","activeWorkers","priorityDeferreds","deferreds","releaseWorker","queueLength","LocalUpdatePremiumFloodWait","isUpload","MIN_CHUNK_SIZE","ONE_MB","NEW_CONNECTION_QUEUE_THRESHOLD","FileView","maxBufferSize","init","FileSystemFileHandle","prototype","createSyncAccessHandle","directory","navigator","storage","getDirectory","downloadsFolder","getDirectoryHandle","create","largeFile","getFileHandle","largeFileAccessHandle","at","getData","getFile","MAX_CONCURRENT_CONNECTIONS","MAX_CONCURRENT_CONNECTIONS_PREMIUM","foremans","downloadFile2","inputLocation","fileParams","shouldDebugExportedSenders","partSizeKb","fileSize","progressCallback","fileId","logWithId","rangeSize","getDownloadPartSize","partSize","partsCount","ceil","noParallel","shouldUseMultipleConnections","fileView","promises","hasEnded","progress","isPremiumFloodWaitSent","limit","isPrecise","getFreeForemanIndex","logWithSenderIndex","isDone","offsetMemo","getSender","isDone2","GetFile","location","precise","session","releaseExportedSender","FileCdnRedirect","isCanceled","forceNewConnection","availableConnections","foremanIndex","minQueueLength","foreman","WEBDOCUMENT_REQUEST_PART_SIZE","sizeTypes","TelegramClient","isFinite","defaultDcId","_useIPV6","useIPV6","_shouldDebugExportedSenders","baseLogger","floodSleepLimit","_eventBuilders","_requestRetries","requestRetries","_connectionRetries","connectionRetries","_connectionRetriesToFallback","connectionRetriesToFallback","_retryDelay","retryDelay","_timeout","_autoReconnect","_initWith","InvokeWithLayer","layer","InitConnection","deviceModel","os","systemVersion","appVersion","langCode","langPack","systemLangCode","proxy","_initSession","_sender","_loopStarted","_updateLoop","GetConfig","_connectedDeferred","_isSwitchingDc","mediaSender","_borrowExportedSender","DC","useWSS","isTestServerRequested","setPingCallback","pingCallback","setForceHttpTransport","forceHttpTransport","setAllowHttpTransport","allowHttpTransport","setShouldDebugExportedSenders","lastPongAt","_destroyed","ping","PingDelayDisconnect","pingId","getRandomInt","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","disconnectDelay","pingAt","lastInterval","attempts","wakeUpWarningTimeout","_lastRequest","_exportedSenderPromises","flat","_exportedSenderReleaseTimeouts","timeouts","releaseTimeout","_exportedSenderRefCounter","_waitingForAuthKey","_cleanupExportedSender","index","_cleanupExportedSenders","_connectSender","firstConnectResolver","hasAuthKey","dc","locks","ExportAuthorization","req","ImportAuthorization","shouldReconnect","existingSender","_createExportedSender","downloadFile","SENDER_RETRIES","downloadMedia","entityOrMedia","media","Message","StoryItem","MessageService","action","photo","MessageMediaWebPage","webpage","WebPage","document","MessageMediaPhoto","Photo","_downloadPhoto","MessageMediaDocument","Document","_downloadDocument","WebDocument","WebDocumentNoProxy","_downloadWebDocument","downloadProfilePhoto","isBig","UserProfilePhoto","ChatPhoto","loc","InputPeerPhotoFileLocation","peer","photoId","big","downloadStickerSetThumb","stickerSet","thumbs","thumbDocumentId","thumbVersion","GetCustomEmojiDocuments","documentId","docs","doc","DocumentEmpty","InputDocumentFileLocation","fileReference","thumbSize","InputStickerSetThumb","stickerset","InputStickerSetID","thumbDcId","pickFileSize","sizes","sizeType","max","current","w","find","_downloadCachedPhotoSize","PhotoStrippedSize","videoSizes","PhotoSizeEmpty","VideoSizeEmojiMarkup","VideoSizeStickerMarkup","PhotoCachedSize","PhotoSizeProgressive","InputPhotoFileLocation","videoThumbs","mimeType","workers","arrayBuff","buff","downloaded","GetWebFile","InputWebFileLocation","_config","webfileDcId","downloadStaticMap","long","lat","h","zoom","scale","accuracyRadius","InputWebFileGeoPointLocation","geoPoint","InputGeoPoint","shouldRetryOnTimeout","invokeBeacon","setIsPremium","getMe","users","GetUsers","InputUserSelf","loadConfig","shouldThrowIfUnauthorized","me","botAuthToken","ImportBotAuthorization","signInBot","webAuthToken","ImportWebTokenAuthorization","webAuthTokenFailed","signInUserWithWebToken","title","authFlow","uploadFile","file","onProgress","isLarge","getUploadPartSize","partCount","activeCounts","currentForemanIndex","blobSlice","jMemo","blobSliceMemo","partBytes","SaveBigFilePart","filePart","fileTotalParts","SaveFilePart","InputFileBig","parts","InputFile","md5Checksum","updateTwoFaSettings","isCheckPassword","currentPassword","newPassword","email","emailCodeCallback","onEmailCodeError","pwd","newAlgo","PasswordKdfAlgoUnknown","hasPassword","InputCheckPasswordEmpty","UpdatePasswordSettings","newSettings","PasswordInputSettings","newPasswordHash","newSecureSettings","ConfirmPasswordEmail","getTmpPassword","ttl","inputPassword","GetTmpPassword","period","getCurrentPassword","Updates","UpdatesCombined","entities","chats","_processUpdate","UpdateShort","_dispatchUpdate","builder","isResolved","times","sequentialUpdates","additionalDcsDisabled","MINUTE","HOUR","DAY","isPeerUser","hasOwnProperty","isPeerChat","buildApiPeerId","padStart","getApiChatIdFromMtpPeer","buildApiPeerColor","peerColor","backgroundEmojiId","buildApiEmojiStatus","mtpEmojiStatus","GramJs","EmojiStatus","EmojiStatusCollectible","until","LOG_BACKGROUND","LOG_PREFIX_COLOR","LOG_SUFFIX","INVOKE","BEACON","RESPONSE","CONNECTING","CONNECTED","UPDATE","ERROR_KEYS","PHONE_NUMBER_INVALID","PHONE_CODE_INVALID","PASSWORD_HASH_INVALID","PHONE_PASSWORD_FLOOD","PHONE_NUMBER_BANNED","EMAIL_UNCONFIRMED","EMAIL_HASH_EXPIRED","NEW_SALT_INVALID","SRP_PASSWORD_CHANGED","CODE_INVALID","PASSWORD_MISSING","resolveMessageApiChatId","mtpMessage","peerId","isChatFolder","DialogFilter","DialogFilterChatlist","serializeBytes","deserializeBytes","suffix","checkErrorType","wrapError","messageKey","errors","variables","time","formatWait","options","pluralValue","minutes","roundDown","getMinutes","hours","getHours","days","getDays","bytesToDataUri","shouldOmitPrefix","btoa","omitVirtualClassFields","instance","flags","rest","IS_MULTITAB_SUPPORTED","channel","BroadcastChannel","batchedUpdates","throttledLocalDbUpdate","convertToVirtualClass","Uint8Array","VirtualClass","split","field","valueOmited","createLocalDbInitial","initial","convertedValue","acc2","key2","typedValue","Proxy","prop","Reflect","localDb","broadcastLocalDbUpdateFull","onUpdate","sendApiUpdate","pendingUpdates","flushUpdatesThrottled","flushUpdatesOnTickEnd","currentThrottleId","queueUpdate","sendImmediateApiUpdate","globalThis","getLocalDb","throttleId","currentUpdates","ApiMessageEntityTypes","MAIN_THREAD_ID","MESSAGE_DELETED","ApiMediaFormat","EMOJI_EXCEPTIONS","DETECT_UP_TO","MAX_LENGTH","countIfEmojiOnly","line","iterator","matchAll","EMOJI_REGEX","currentIndex","getEmojiOnlyCountForMessage","content","groupedId","text","some","CustomEmoji","lines","regex","replacement","fixNonStandardEmoji","textWithoutNewlines","join","totalCount","parseEmojiOnlyString","buildCollectionByKey","collection","byKey","member","buildCollectionByCallback","pick","object","pickTruthy","omit","stringKeys","omitUndefined","stringKey","compact","array","chunkSize","interpolateArray","fitCount","peak","newData","springFactor","leftFiller","rightFiller","idx","val","getEntityTypeById","chatOrUserId","buildPeer","PeerUser","buildMtpPeerId","PeerChannel","PeerChat","buildInputPeer","buildInputPeerFromLocalDb","buildInputEntity","buildInputStickerSet","buildInputDocument","documents","InputDocument","buildInputMediaDocument","inputDocument","InputMediaDocument","buildInputPollFromExisting","poll","shouldClose","InputMediaPoll","Poll","publicVoters","summary","isPublic","question","buildInputTextWithEntities","answers","option","PollAnswer","quiz","multipleChoice","closeDate","closePeriod","correctAnswers","results","o","isCorrect","solution","solutionEntities","buildMtpMessageEntity","generateRandomBigInt","generateRandomTimestampedBigInt","timestampBuffer","generateRandomInt","buildMessageFromUpdate","fromId","Bold","MessageEntityBold","Italic","MessageEntityItalic","Underline","MessageEntityUnderline","Strike","MessageEntityStrike","Code","MessageEntityCode","Pre","MessageEntityPre","language","Blockquote","MessageEntityBlockquote","collapsed","canCollapse","TextUrl","MessageEntityTextUrl","Url","MessageEntityUrl","Hashtag","MessageEntityHashtag","MentionName","InputMessageEntityMentionName","Spoiler","MessageEntitySpoiler","MessageEntityCustomEmoji","MessageEntityUnknown","buildInputPhoto","localPhoto","photos","InputPhoto","buildInputContact","phone","InputPhoneContact","clientId","buildChatBannedRights","bannedRights","untilDate","ChatBannedRights","buildChatAdminRights","adminRights","ChatAdminRights","buildShippingInfo","shippingAddress","PaymentRequestedInfo","PostAddress","buildInputPrivacyKey","privacyKey","InputPrivacyKeyPhoneNumber","InputPrivacyKeyAddedByPhone","InputPrivacyKeyStatusTimestamp","InputPrivacyKeyProfilePhoto","InputPrivacyKeyForwards","InputPrivacyKeyChatInvite","InputPrivacyKeyPhoneCall","InputPrivacyKeyPhoneP2P","InputPrivacyKeyVoiceMessages","InputPrivacyKeyAbout","InputPrivacyKeyBirthday","InputPrivacyKeyStarGiftsAutoSave","buildInputReportReason","InputReportReasonSpam","InputReportReasonViolence","InputReportReasonChildAbuse","InputReportReasonPornography","InputReportReasonCopyright","InputReportReasonFake","InputReportReasonGeoIrrelevant","InputReportReasonIllegalDrugs","InputReportReasonPersonalDetails","InputReportReasonOther","buildInputThemeParams","DataJSON","buildInputGroupCall","groupCall","InputGroupCall","buildInputPhoneCall","InputPhoneCall","buildInputStorePaymentPurpose","purpose","InputStorePaymentStarsTopup","stars","currency","amount","InputStorePaymentStarsGift","InputStorePaymentPremiumGiftCode","boostPeer","boostChannel","randomId","InputStorePaymentStarsGiveaway","chat","additionalPeers","additionalChannels","countriesIso2","countries","prizeDescription","onlyNewSubscribers","isOnlyForNewSubscribers","winnersAreVisible","areWinnersVisible","InputStorePaymentPremiumGiveaway","buildInputInvoice","invoice","InputInvoiceMessage","messageId","InputInvoiceSlug","slug","shouldHideName","giftId","shouldUpgrade","InputInvoiceStarGift","hideName","includeUpgrade","InputInvoiceStars","InputInvoiceChatInviteSubscription","InputInvoiceStarGiftUpgrade","stargift","buildInputSavedStarGift","inputSavedGift","keepOriginalDetails","shouldKeepOriginalDetails","optionData","PremiumGiftCodeOption","months","InputInvoicePremiumGiftCode","buildInputReaction","reaction","ReactionEmoji","emoticon","ReactionCustomEmoji","ReactionPaid","ReactionEmpty","buildInputEmojiStatus","emojiStatusId","EmojiStatusEmpty","formatted","TextWithEntities","buildInputBotApp","app","InputBotAppID","buildInputReplyTo","replyInfo","InputReplyToStory","storyId","replyToMsgId","replyToTopId","replyToPeerId","quoteText","InputReplyToMessage","topMsgId","quoteEntities","buildInputPrivacyRules","rules","privacyRules","allowedUsers","InputPrivacyValueAllowUsers","allowedChats","InputPrivacyValueAllowChatParticipants","blockedUsers","InputPrivacyValueDisallowUsers","blockedChats","InputPrivacyValueDisallowChatParticipants","shouldAllowPremium","InputPrivacyValueAllowPremium","botsPrivacy","InputPrivacyValueAllowBots","InputPrivacyValueDisallowBots","isUnspecified","visibility","InputPrivacyValueAllowAll","InputPrivacyValueAllowContacts","InputPrivacyValueDisallowContacts","InputPrivacyValueDisallowAll","inputGift","InputSavedStarGiftUser","InputSavedStarGiftChat","savedId","addMessageToLocalDb","addMediaToLocalDb","replyTo","MessageReplyHeader","replyMedia","addPhotoToLocalDb","addMessageRepairInfo","SponsoredMessage","context","addDocumentToLocalDb","MessageMediaGame","game","MessageMediaInvoice","addWebDocumentToLocalDb","extendedMedia","MessageExtendedMedia","MessageMediaPaidMedia","addStoryToLocalDb","story","addStoryRepairInfo","altDocuments","altDocument","repairableMedia","localRepairInfo","addUserToLocalDb","storedUser","webDocument","webDocuments","buildApiGroupCallParticipant","participant","about","date","versioned","canSelfUnmute","justJoined","left","muted","mutedByYou","source","volume","volumeByAdmin","videoJoined","video","presentation","raiseHandRating","isSelf","isMin","isLeft","isMuted","isMutedByMe","hasJustJoined","isVolumeByAdmin","isVersioned","isVideoJoined","isUser","buildApiGroupCallParticipantVideo","participantVideo","audioSource","endpoint","paused","sourceGroups","isPaused","buildApiGroupCallParticipantVideoSourceGroup","participantVideoSourceGroup","semantics","sources","buildApiGroupCall","GroupCallDiscarded","connectionState","participantsCount","version","participants","streamDcId","scheduleDate","canChangeJoinMuted","joinMuted","canStartVideo","scheduleStartSubscribed","isLoaded","buildPhoneCall","call","phoneCall","PhoneCallAccepted","PhoneCallWaiting","PhoneCall","PhoneCallRequested","adminId","participantId","protocol","isVideo","buildApiCallProtocol","p2pAllowed","gAOrB","keyFingerprint","connections","startDate","isP2pAllowed","buildApiCallConnection","PhoneCallDiscarded","duration","buildApiCallDiscardReason","needRating","needDebug","receiveDate","gAHash","discardReason","PhoneCallDiscardReasonMissed","PhoneCallDiscardReasonBusy","PhoneCallDiscardReasonHangup","PhoneConnectionWebrtc","username","turn","stun","ipv6","isTurn","isStun","libraryVersions","minLayer","maxLayer","udpP2p","udpReflector","isUdpP2p","isUdpReflector","buildCallProtocol","PhoneCallProtocol","TEMPLATE","LOOKUP","buildSvgPath","path","len","num","DEFAULT_THUMB_SIZE","buildApiThumbnailFromStripped","thumb","realSizes","PhotoSize","dataUri","width","height","buildApiThumbnailFromPath","photoSize","sizeAttribute","buildApiPhoto","isSpoiler","buildApiPhotoSize","mediaType","thumbnail","buildApiVideoSize","buildApiPhotoPreviewSizes","videoSize","VideoSize","videoStartTs","buildApiUsernames","mtpPeer","usernames","isActive","isEditable","active","editable","buildPrivacyRules","allowUserIds","allowChatIds","blockUserIds","blockChatIds","localChats","rule","PrivacyValueAllowAll","PrivacyValueAllowContacts","PrivacyValueAllowCloseFriends","PrivacyValueDisallowContacts","PrivacyValueDisallowAll","PrivacyValueAllowUsers","PrivacyValueDisallowUsers","PrivacyValueAllowChatParticipants","dialogId","PrivacyValueDisallowChatParticipants","PrivacyValueAllowPremium","PrivacyValueAllowBots","PrivacyValueDisallowBots","buildApiFormattedText","textWithEntities","buildApiMessageEntity","MessageEntityMentionName","buildAvatarPhotoId","buildApiBotVerification","botVerification","botId","iconId","icon","description","Blob","fileBits","fileName","assign","numberToHexColor","buildStickerFromDocument","isNoPremium","stickerAttribute","attributes","attr","DocumentAttributeSticker","customEmojiAttribute","DocumentAttributeCustomEmoji","isLottie","isCustomEmoji","shouldUseTextColor","textColor","imageSizeAttribute","DocumentAttributeImageSize","videoSizeAttribute","DocumentAttributeVideo","stickerOrEmojiAttribute","stickerSetInfo","inputSet","InputStickerSetShortName","shortName","isMissing","emoji","alt","isFree","free","cachedThumb","isWebmSupported","pathThumb","PhotoPathSize","buildApiThumbnailFromCached","previewPhotoSizes","hasEffect","buildStickerSet","archived","installedDate","emojis","hasStaticThumb","hasAnimatedThumb","hasVideoThumb","thumbCustomEmojiId","hasThumbnail","isArchived","isEmoji","buildStickerSetCovered","coveredStickerSet","StickerSetNoCovered","stickers","processStickerResult","StickerSetCovered","cover","StickerSetMultiCovered","covers","StickerSetFullCovered","packs","processStickerPackResult","sticker","buildApiStarGift","starGift","StarGiftUnique","ownerId","ownerName","availabilityIssued","availabilityTotal","ownerAddress","buildApiStarGiftAttribute","issuedCount","limited","availabilityRemains","convertStars","firstSaleDate","lastSaleDate","soldOut","birthday","upgradeStars","isLimited","starsToConvert","isSoldOut","isBirthday","attribute","StarGiftAttributeModel","rarityPercent","rarityPermille","StarGiftAttributePattern","StarGiftAttributeBackdrop","centerColor","edgeColor","patternColor","StarGiftAttributeOriginalDetails","recipientId","senderId","MAX_EMPTY_WAVEFORM_POINTS","buildMessageContent","repairContext","buildMessageMediaContent","hasUnsupportedMedia","MessageMediaUnsupported","pollId","contact","isRound","buildMessageTextContent","ttlSeconds","isExpiredVoice","voice","isExpiredVoiceMessage","isExpiredRoundVideo","isExpiredRoundVideoMessage","audioAttribute","DocumentAttributeAudio","waveform","buildVoice","buildVideo","nopremium","buildSticker","spoiler","buildPhoto","altVideos","d","buildVideoFromDocument","buildAltVideos","audio","thumbnailSizes","getFilenameFromDocument","buildAudio","buildApiDocument","buildDocumentFromMedia","MessageMediaContact","buildContact","MessageMediaPoll","buildPollIdFromMedia","webPage","buildWebPage","test","totalAmount","receiptMsgId","preview","MessageExtendedMediaPreview","buildApiMessageExtendedMediaPreview","buildApiWebDocument","receiptMessageId","buildMediaInvoice","buildInvoiceFromMedia","MessageMediaGeo","point","buildGeoPoint","geo","buildGeo","MessageMediaVenue","provider","address","venueId","venueType","buildVenue","MessageMediaGeoLive","heading","buildGeoLive","buildLocationFromMedia","apiPhoto","apiDocument","buildGame","buildGameFromMedia","storyData","MessageMediaStory","viaMention","isMention","buildMessageStoryData","giveaway","MessageMediaGiveaway","quantity","channelIds","buildGiveaway","buildGiweawayFromMedia","giveawayResults","MessageMediaGiveawayResults","launchMsgId","unclaimedCount","winners","winnersCount","additionalPeersCount","refunded","winnerIds","winner","launchMessageId","isRefunded","buildGiveawayResults","buildGiweawayResultsFromMedia","paidMedia","starsAmount","isBought","buildBoughtMediaContent","buildPaidMedia","videoAttr","gifAttr","DocumentAttributeAnimated","hasVideoPreview","supportsStreaming","roundMessage","nosound","arr","generateWaveform","isGif","noSound","photoPath","innerMediaType","mediaSize","imageAttribute","videoAttribute","timestamp","buildPollFromMedia","buildPoll","GeoPointEmpty","pollResults","rawAnswers","answer","buildPollResults","rawResults","totalVoters","recentVoters","chosen","voters","isChosen","votersCount","recentVoterIds","gift","audioAttributes","performer","buildAudioFromDocument","attributeStory","WebPageAttributeStory","attributeGift","WebPageAttributeUniqueStarGift","attributeStickers","WebPageAttributeStickerSet","isWithTextColor","forceSmallMedia","forceLargeMedia","defaultBase","filenameAttribute","DocumentAttributeFilename","extension","videoDuration","sizeAttr","dimensions","boughtMedia","buildMessageReactions","reactions","recentReactions","canSeeList","reactionsAsTags","topReactors","areTags","buildReactionCount","sort","reactionCountComparator","buildMessagePeerReaction","buildApiMessageReactor","chosenOrder","reactionCount","apiReaction","buildApiReaction","reactor","my","top","anonymous","isMe","isTop","isAnonymous","userReaction","unread","addedDate","isUnread","isOwn","withPaid","buildApiSavedReactionTag","buildApiAvailableReaction","availableReaction","selectAnimation","staticIcon","appearAnimation","inactive","aroundAnimation","centerIcon","effectAnimation","activateAnimation","premium","isInactive","buildApiAvailableEffect","availableEffect","premiumRequired","staticIconId","effectStickerId","effectAnimationId","LOCAL_MESSAGES_LIMIT","LOCAL_MEDIA_UPLOADING_TEMP_ID","INPUT_WAVEFORM_LENGTH","MIN_SCHEDULED_PERIOD","currentUserId","localMessageCounter","getNextLocalMessageId","lastMessageId","buildApiMessage","buildApiMessageWithChatId","isChatWithSelf","forwardInfo","fwdFrom","buildApiMessageForwardInfo","isSavedOutgoing","out","post","targetPeerId","isChannelPost","MessageActionEmpty","giftCryptoInfo","translationValues","score","topicEmojiIconId","isTopicAction","isGiveaway","isUnclaimed","transactionId","targetChatId","targetUserIds","MessageActionChatCreate","MessageActionChatEditTitle","MessageActionChatEditPhoto","MessageActionChatDeletePhoto","MessageActionChatAddUser","MessageActionChatDeleteUser","MessageActionChatJoinedByLink","MessageActionChannelCreate","MessageActionChatMigrateTo","MessageActionChannelMigrateFrom","MessageActionPinMessage","MessageActionHistoryClear","MessageActionPhoneCall","withDuration","mins","MessageActionInviteToGroupCall","MessageActionContactSignUp","MessageActionPaymentSent","MessageActionGroupCall","MessageActionBotAllowed","domain","fromRequest","MessageActionCustomAction","MessageActionChatJoinedByRequest","MessageActionGameScore","MessageActionWebViewDataSent","MessageActionGiftPremium","cryptoCurrency","cryptoAmount","MessageActionTopicCreate","MessageActionTopicEdit","hidden","iconEmojiId","MessageActionSuggestProfilePhoto","MessageActionGiveawayLaunch","MessageActionGiftCode","viaGiveaway","unclaimed","MessageActionGiveawayResults","MessageActionPrizeStars","MessageActionBoostApply","boosts","MessageActionPaymentRefunded","MessageActionRequestedPeer","peers","MessageActionGiftStars","MessageActionStarGift","StarGift","nameHidden","saved","converted","canUpgrade","upgraded","upgradeMsgId","isNameHidden","isSaved","isConverted","isUpgraded","alreadyPaidUpgradeStars","buildApiMessageActionStarGift","MessageActionStarGiftUnique","upgrade","canExportAt","transferStars","transferred","isTransferred","isUpgrade","buildApiMessageActionStarGiftUnique","buildAction","isScheduled","isInvoiceMedia","isEdited","editDate","editHide","inlineButtons","keyboardButtons","keyboardPlaceholder","isKeyboardSingleUse","isKeyboardSelective","shouldSkipBuyButton","replyMarkup","ReplyKeyboardMarkup","ReplyInlineMarkup","markup","rows","buttons","button","KeyboardButton","KeyboardButtonUrl","KeyboardButtonCallback","requiresPassword","KeyboardButtonRequestPoll","isQuiz","KeyboardButtonRequestPhone","KeyboardButtonBuy","KeyboardButtonGame","KeyboardButtonSwitchInline","isSamePeer","samePeer","KeyboardButtonUserProfile","KeyboardButtonSimpleWebView","KeyboardButtonWebView","KeyboardButtonUrlAuth","buttonId","KeyboardButtonCopy","copyText","every","row","placeholder","singleUse","selective","buildReplyButtons","mediaUnread","isMediaUnread","postAuthor","isInAlbum","shouldHideKeyboardButtons","ReplyKeyboardHide","isHideKeyboardSelective","isProtected","noforwards","isForwardingAllowed","emojiOnlyCount","hasComments","replies","comments","senderBoosts","fromBoostsApplied","factCheck","factcheck","buildApiFactCheck","isVideoProcessingPending","videoProcessingPending","areReactionsPossible","reactionsArePossible","isInvertedMedia","invertMedia","savedPeerId","viewsCount","views","forwardsCount","forwards","isFromScheduled","fromScheduled","isSilent","silent","isPinned","pinned","buildApiReplyInfo","hasUnreadMention","mentioned","isMentioned","viaBotId","postAuthorTitle","viaBusinessBotId","effectId","effect","reportDeliveryUntilDate","buildMessageDraft","draft","DraftMessageEmpty","savedFromPeerId","savedFromPeer","savedDate","isImported","imported","channelPost","channelPostId","isLinkedChannelPost","savedFromMsgId","savedOut","fromChatId","fromMessageId","hiddenUserName","fromName","replyHeader","MessageReplyStoryHeader","replyFrom","forumTopic","quote","isForumTopic","isQuote","shouldFetch","needCheck","countryCode","country","buildUploadingMedia","attachment","filename","blobUrl","previewBlobUrl","shouldSendAsFile","shouldSendAsSpoiler","quick","inputWaveform","buildApiThreadInfoFromMessage","buildApiThreadInfo","messageReplies","maxId","readMaxId","recentRepliers","apiChannelId","baseThreadInfo","messagesCount","lastReadMessageId","recentReplierIds","isCommentsInfo","originChannelId","originMessageId","threadId","buildApiQuickReply","reply","shortcutId","shortcut","topMessage","topMessageId","buildApiReportResult","ReportResultReported","ReportResultAddComment","isOptional","optional","buildApiStory","StoryItemDeleted","isDeleted","StoryItemSkipped","expireDate","closeFriends","isForCloseFriends","edited","caption","privacy","public","contacts","selectedContacts","mediaAreas","sentReaction","isInProfile","isForContacts","isForSelectedContacts","noForwards","buildApiStoryViews","isOut","buildApiMediaArea","buildApiStoryForwardInfo","hasViewers","reactionsCount","recentViewerIds","recentViewers","viewerId","buildApiStoryView","view","blockedMyStoriesFrom","blocked","StoryView","areStoriesBlocked","isUserBlocked","StoryViewPublicForward","StoryViewPublicRepost","buildApiStealthMode","stealthMode","activeUntil","activeUntilDate","cooldownUntil","cooldownUntilDate","area","coordinates","rotation","radius","buildApiMediaAreaCoordinates","MediaAreaVenue","MediaAreaGeoPoint","MediaAreaSuggestedReaction","dark","flipped","isDark","isFlipped","MediaAreaChannelPost","MediaAreaUrl","MediaAreaWeather","temperatureC","MediaAreaStarGift","forwardHeader","modified","fromPeerId","isModified","buildApiAttachBot","bot","shouldRequestWriteAccess","requestWriteAccess","isForAttachMenu","showInAttachMenu","isForSideMenu","showInSideMenu","attachMenuPeerTypes","peerTypes","buildApiAttachMenuPeerType","icons","buildApiAttachMenuIcon","isDisclaimerNeeded","sideMenuDisclaimerNeeded","peerType","AttachMenuPeerTypeBotPM","AttachMenuPeerTypePM","AttachMenuPeerTypeChat","AttachMenuPeerTypeBroadcast","AttachMenuPeerTypeSameBotPM","buildApiBotInfo","botInfo","descriptionPhoto","descriptionDocument","commands","menuButton","privacyPolicyUrl","hasPreviewMedias","appSettings","gif","commandsArray","command","buildApiBotCommand","buildApiBotMenuButton","hasPreviewMedia","buildBotAppSettings","placeholderPath","backgroundColor","backgroundDarkColor","headerColor","headerDarkColor","BotMenuButton","buildApiBusinessLocation","buildApiBusinessWorkHours","workHours","timezoneId","weeklyOpen","startMinute","endMinute","buildApiBusinessIntro","intro","buildApiUserFullInfo","mtpUserFull","fullUser","commonChatsCount","pinnedMsgId","profilePhoto","voiceMessagesForbidden","premiumGifts","hasScheduled","fallbackPhoto","personalPhoto","translationsDisabled","storiesPinnedAvailable","contactRequirePremium","businessWorkHours","businessLocation","businessIntro","personalChannelId","personalChannelMessage","sponsoredEnabled","stargiftsCount","botCanManageEmojiStatus","bio","pinnedMessageId","isBlocked","noVoiceMessages","hasPinnedStories","isTranslationDisabled","botUrl","buildApiPremiumGiftOption","isContactRequirePremium","buildApiBirthday","personalChannelMessageId","areAdsEnabled","starGiftCount","isBotCanManageEmojiStatus","hasScheduledMessages","buildApiUser","mtpUser","fake","scam","support","closeFriend","storiesUnavailable","storiesMaxId","botActiveUsers","botVerificationIcon","botInlinePlaceholder","botAttachMenu","botCanEdit","hasVideoAvatar","hasVideo","avatarPhotoId","userType","deleted","emojiStatus","fakeType","verified","isVerified","isCloseFriend","isSupport","mutualContact","isContact","hasMainMiniApp","botHasMainApp","canEditBot","canBeInvitedToGroup","botNochats","noStatus","areStoriesHidden","storiesHidden","maxStoryId","hasStories","botPlaceholder","isAttachBot","botVerificationIconId","buildApiUserStatus","mtpStatus","UserStatusEmpty","UserStatusOnline","UserStatusOffline","wasOnline","UserStatusRecently","isReadDateRestrictedByMe","byMe","UserStatusLastWeek","buildApiUserStatuses","mtpUsers","userStatusesById","buildApiChatFieldsFromPeerEntity","peerEntity","areSignaturesShown","signatures","hasPrivateLink","hasLink","isScam","isFake","isJoinToSend","joinToSend","isJoinRequest","joinRequest","isForum","forum","boostLevel","areProfilesShown","signatureProfiles","subscriptionUntil","subscriptionUntilDate","isCallActive","callActive","isCallNotEmpty","callNotEmpty","creationDate","membersCount","buildApiChatPermissions","isCreator","creator","buildApiChatRestrictions","buildApiChatMigrationInfo","buildApiChatFromDialog","dialog","folderId","unreadMark","unreadCount","unreadMentionsCount","unreadReactionsCount","notifySettings","muteUntil","readOutboxMaxId","readInboxMaxId","viewForumAsMessages","getApiChatTypeFromPeerEntity","getApiChatTitleFromMtpPeer","lastReadOutboxMessageId","lastReadInboxMessageId","hasUnreadMark","DraftMessage","draftDate","isForumAsMessages","currentUserBannedRights","defaultBannedRights","isForbidden","isRestricted","restrictions","restrictionReason","restricted","restrictionReasons","targetReason","platform","buildApiChatRestrictionReason","isNotJoined","migratedTo","InputChannelEmpty","buildApiChatFromPreview","getUserName","megagroup","getPeerKey","buildChatMember","ChannelParticipantBanned","ChannelParticipantLeft","inviterId","joinedDate","kickedByUserId","kickedBy","promotedByUserId","promotedBy","customTitle","rank","isViaRequest","viaRequest","ChannelParticipantAdmin","ChatParticipantAdmin","isAdmin","ChannelParticipantCreator","ChatParticipantCreator","isOwner","buildChatMembers","ChatParticipants","ChannelParticipants","buildChatTypingStatus","SendMessageCancelAction","SendMessageTypingAction","SendMessageRecordVideoAction","SendMessageUploadVideoAction","SendMessageRecordAudioAction","SendMessageUploadAudioAction","SendMessageUploadPhotoAction","SendMessageUploadDocumentAction","SendMessageGeoLocationAction","SendMessageChooseContactAction","SendMessageGamePlayAction","SendMessageRecordRoundAction","SendMessageUploadRoundAction","SendMessageChooseStickerAction","SpeakingInGroupCallAction","SendMessageEmojiInteractionSeen","SendMessageEmojiInteraction","UpdateUserTyping","buildApiChatFolder","excludedChatIds","includedChatIds","includePeers","pinnedChatIds","pinnedPeers","hasMyInvites","isChatList","noTitleAnimations","titleNoanimate","broadcasts","excludePeers","buildApiChatFolderFromSuggested","buildApiChatBotCommands","botInfos","botCommands","mtpCommand","buildApiExportedInvite","invite","revoked","link","permanent","usage","usageLimit","requested","requestNeeded","isRevoked","isPermanent","isRequestNeeded","buildApiChatSettings","autoarchived","reportSpam","addContact","blockContact","isAutoArchived","canReportSpam","canAddContact","canBlockContact","buildApiChatReactions","chatReactions","ChatReactionsAll","areCustomAllowed","allowCustom","ChatReactionsSome","allowed","buildApiSendAsPeerId","sendAs","buildApiTopic","ForumTopicDeleted","short","iconColor","isHidden","buildApiChatlistExportedInvite","ExportedChatlistInvite","peerIds","buildApiMissingInvitedUser","isRequiringPremiumToMessage","premiumRequiredForPm","isRequiringPremiumToInvite","premiumWouldAllowInvite","buildApiChatInviteInfo","broadcast","subscriptionFormId","subscriptionPricing","canRefulfillSubscription","isSuperGroup","isChannel","isBroadcast","buildApiStarsSubscriptionPricing","participantIds","pricing","TYPE_USER","TYPE_CHAT","TYPE_MESSAGE","processAndUpdateEntities","userById","chatById","threadInfos","polls","storedChat","isStoredMin","isChatMin","addChatToLocalDb","threadInfo","processMessageAndUpdateThreadInfo","SortedQueue","comparator","queue","item","binarySearch","splice","right","middle","comparison","buildApiWallpaper","wallpaper","WallPaperNoFile","pattern","blur","motion","secondBackgroundColor","thirdBackgroundColor","fourthBackgroundColor","intensity","buildApiSession","isCurrent","isOfficialApp","officialApp","isPasswordPending","passwordPending","areCallsEnabled","callRequestsDisabled","areSecretChatsEnabled","encryptedRequestsDisabled","isUnconfirmed","unconfirmed","buildApiWebSession","buildApiNotifyException","showPreviews","otherSound","hasSound","NotificationSoundNone","shouldShowPreviews","buildApiCountry","iso2","defaultName","prefixes","patterns","buildJson","json","JsonNull","JsonString","JsonBool","JsonNumber","JsonArray","el","buildApiUrlAuthResult","UrlAuthResultRequest","UrlAuthResultAccepted","UrlAuthResultDefault","oldBuildLangPack","mtpLangPack","strings","mtpString","LangPackString","LangPackStringPluralized","oldBuildLangPackString","buildLangStrings","keysToRemove","apiStrings","LangPackStringDeleted","zero","zeroValue","one","oneValue","two","twoValue","few","fewValue","many","manyValue","otherValue","buildApiLanguage","lang","nativeName","pluralCode","rtl","stringsCount","translatedCount","translationsUrl","beta","official","isRtl","isBeta","isOfficial","buildApiPeerColorSet","colorSet","PeerColorSet","buildApiTimezone","timezone","utcOffset","DECIMALS","buildApiPostInteractionCounter","interaction","PostInteractionCountersMessage","PostInteractionCountersStory","buildPostsStatistics","stats","viewsGraph","buildGraph","reactionsGraph","reactionsByEmotionGraph","buildMessagePublicForwards","buildApiMessagePublicForward","buildStoryPublicForwards","forward","PublicForwardMessage","isPercentage","isCurrency","currencyRate","parse","columns","hasSecondYAxis","y_scaled","types","y0","zoomToken","labelFormatter","xTickFormatter","tooltipFormatter","xTooltipFormatter","labels","hideCaption","subchart","show","isStacked","stacked","datasets","names","substring","calculateMinimapRange","defaultZoom","range","minIndex","maxIndex","minimapRange","begin","labelFromIndex","labelToIndex","buildStatisticsOverview","previous","change","percentage","toFixed","buildStatisticsPercentage","part","total","channelProfilePhoto","buildChannelMonetizationBalances","currentBalance","availableBalance","overallRevenue","withdrawalEnabled","isWithdrawalEnabled","buildShippingOptions","shippingOptions","prices","ac","cur","label","buildApiReceipt","receipt","payments","PaymentReceiptStars","buildApiInvoice","shipping","credentialsTitle","tipAmount","providerId","shippingPrices","shippingMethod","recurring","termsUrl","maxTipAmount","suggestedTipAmounts","emailRequested","emailToProvider","nameRequested","phoneRequested","phoneToProvider","shippingAddressRequested","flexible","subscriptionPeriod","mappedPrices","isRecurring","tip","isEmailRequested","isEmailSentToProvider","isNameRequested","isPhoneRequested","isPhoneSentToProvider","isShippingAddressRequested","isFlexible","buildApiPremiumPromo","promo","statusText","statusEntities","videos","videoSections","periodOptions","buildApiPremiumSubscriptionOption","canPurchaseUpgrade","buildApiBoost","boost","multiplier","isFromGiveaway","isGift","buildApiMyBoost","myBoost","slot","buildApiCheckedGiftCode","giftcode","giveawayMsgId","toId","usedDate","usedAt","giveawayMessageId","buildApiPremiumGiftCodeOption","buildApiStarsGiftOptions","extended","isExtended","buildApiStarsAmount","nanos","buildApiStarsGiveawayOptions","default","isDefault","yearlyBoosts","winnerList","perUserStars","buildApiStarsGiveawayWinnersOption","buildApiStarsTransactionPeer","StarsTransactionPeerAppStore","StarsTransactionPeerPlayMarket","StarsTransactionPeerPremiumBot","StarsTransactionPeerFragment","StarsTransactionPeerAds","StarsTransactionPeerAPI","StarsTransactionPeer","buildApiStarsTransaction","transaction","refund","failed","pending","giveawayPostId","starrefCommissionPermille","stargiftUpgrade","boughtExtendedMedia","starRefCommision","isRefund","hasFailed","isReaction","isGiftUpgrade","buildApiStarsSubscription","subscription","canRefulfill","canceled","chatInviteHash","missingBalance","botCanceled","invoiceSlug","isCancelled","hasMissingBalance","hasBotCancelled","buildApiStarTopupOption","unmuteTimers","unmuteQueue","scheduleUnmute","topicId","timer","afterNext","scheduleMutedChatUpdate","LocalUpdatePts","pts","ptsCount","LocalUpdateChannelPts","sentMessageIds","updater","_serverTimeOffset","UpdateNewMessage","UpdateNewScheduledMessage","UpdateNewChannelMessage","UpdateShortChatMessage","UpdateShortMessage","shouldForceReply","buildApiMessageFromShort","MessageEmpty","ReplyKeyboardForceReply","PhotoEmpty","ChatPhotoEmpty","buildChatPhotoForLocalDb","localDbChatId","isTopicReply","UpdateQuickReplyMessage","UpdateDeleteQuickReplyMessages","quickReplyId","messageIds","UpdateQuickReplies","quickReplies","UpdateNewQuickReply","quickReply","UpdateDeleteQuickReply","UpdateEditMessage","UpdateEditChannelMessage","UpdateMessageReactions","UpdateMessageExtendedMedia","previewMedia","UpdateDeleteMessages","ids","UpdateDeleteScheduledMessages","newIds","sentMessages","UpdateDeleteChannelMessages","UpdateServiceNotification","popup","notification","currentDate","localId","inboxDate","buildApiMessageFromNotification","UpdateMessageID","UpdateShortSentMessage","UpdateReadMessagesContents","messageUpdate","UpdateChannelReadMessagesContents","UpdateMessagePoll","apiPoll","pollUpdate","UpdateMessagePollVote","UpdateChannelMessageViews","UpdateChannelMessageForwards","UpdateReadHistoryInbox","stillUnreadCount","UpdateReadHistoryOutbox","UpdateReadChannelInbox","UpdateReadChannelOutbox","UpdateReadChannelDiscussionInbox","UpdateReadChannelDiscussionOutbox","UpdateDialogPinned","DialogPeer","UpdatePinnedDialogs","order","dp","UpdateSavedDialogPinned","UpdatePinnedSavedDialogs","UpdateFolderPeers","folderPeers","folderPeer","UpdateDialogFilter","folder","UpdateDialogFilterOrder","orderedIds","UpdateChatParticipants","replacedMembers","UpdateChatParticipantAdd","addedMember","UpdateChatParticipantDelete","deletedMemberId","UpdatePinnedMessages","UpdatePinnedChannelMessages","UpdateNotifySettings","NotifyPeer","NotifyForumTopic","buildApiNotifyExceptionTopic","scheduleMutedTopicUpdate","UpdateChatUserTyping","timestamps","t","typingStatus","UpdateChannelUserTyping","UpdateChannel","UpdateDialogUnreadMark","UpdateChatDefaultBannedRights","UpdateUserStatus","UpdateUser","UpdateUserEmojiStatus","UpdateUserName","apiUserId","updatedUser","UpdateUserPhone","UpdatePeerSettings","UpdatePeerBlocked","isBlockedFromStories","UpdatePrivacy","buildPrivacyKey","UpdateDraftMessage","UpdateContactsReset","UpdateFavedStickers","UpdateRecentStickers","UpdateRecentReactions","UpdateSavedReactionTags","UpdateMoveStickerSetToTop","masks","UpdateStickerSets","UpdateStickerSetsOrder","UpdateNewStickerSet","StickerSet","UpdateSavedGifs","UpdateGroupCall","UpdateGroupCallConnection","UpdateGroupCallParticipants","groupCallId","UpdatePendingJoinRequests","recentRequesterIds","recentRequesters","requestsPending","UpdatePhoneCall","UpdatePhoneCallSignalingData","callId","phoneCallId","UpdateWebViewResultSent","queryId","UpdateBotMenuButton","UpdateTranscribedAudio","transcriptionId","UpdateConfig","UpdateChannelPinnedTopic","UpdateChannelPinnedTopics","UpdateRecentEmojiStatuses","UpdateStory","apiStory","UpdateReadStories","lastReadId","UpdateSentStoryReaction","UpdateStoriesStealthMode","UpdateAttachMenuBots","UpdateNewAuthorization","device","UpdateChannelViewForumAsMessages","isEnabled","enabled","UpdateStarsBalance","balance","UpdatePaidReactionPrivacy","isPrivate","private","UpdateLangPackTooLong","UpdateLangPack","difference","COMMON_BOX_QUEUE_ID","CHANNEL_DIFFERENCE_LIMIT","UPDATE_WAIT_TIMEOUT","seqTimeout","isInited","PTS_TIMEOUTS","SEQ_QUEUE","seqStart","seq","PTS_QUEUE","applyState","commonBoxState","qts","processUpdate","isFromDifference","shouldOnlySave","scheduleGetDifference","_isFromDifference","popSeqQueue","saveSeqUpdate","UpdateChannelTooLong","getChannelDifference","getUpdateChannelId","ptsQueue","ptsComparator","popPtsQueue","savePtsUpdate","updateChannelState","currentState","channelPtsById","scheduleGetChannelDifference","applyUpdate","updateObject","localSeq","localPts","getPtsCount","getDifference","forceSync","isFetching","GetDifference","DifferenceTooLong","DifferenceEmpty","processDifference","DifferenceSlice","intermediateState","GetChannelDifference","ChannelMessagesFilterEmpty","ChannelDifferenceTooLong","ChannelDifferenceEmpty","final","loadRemoteState","processAffectedHistory","affected","channeId","remoteState","newMessages","channelTooLongIds","otherUpdates","updateChannelId","shouldApplyImmediately","authController","onWebAuthTokenFailed","onRequestPhoneNumber","buildAuthStateUpdate","onRequestCode","onRequestPassword","onRequestRegistration","onRequestQrCode","onAuthError","errorKey","authorizationState","provideAuthPhoneNumber","provideAuthCode","provideAuthPassword","provideAuthRegistration","registration","restartAuth","restartAuthWithQr","cacheApi","caches","isSupported","isCacheApiSupported","Type","cacheName","isHtmlAllowed","Request","cache","open","contentType","headers","Text","blob","shouldRecreate","resolvedType","Json","cacheData","put","remove","MEDIA_ENTITY_TYPES","JPEG_SIZE_TYPES","MP4_SIZES_TYPES","mediaFormat","fullSize","parsed","parseMediaUrl","entityType","entityId","mediaMatchType","parsedParams","URLSearchParams","accuracyRadiusStr","stickerSets","getMimeType","download","BlobUrl","Progressive","DownloadUrl","parseMedia","canCache","dataBlob","fallbackMimeType","subarray","byte","mediaMatch","ChatAbortController","getThreadSignal","controller","threads","abortThread","DEFAULT_USER_AGENT","DEFAULT_PLATFORM","GramJsLogger","gramJsUpdateEventBuilder","CHAT_ABORT_CONTROLLERS","ABORT_CONTROLLERS","LOG_OUT_TIMEOUT","noLogOut","noClearLocalDb","invokeRequest","LogOut","resetUpdatesManager","onSessionUpdate","handleGramJsUpdate","UpdatesTooLong","GetFullUser","handleTerminatedSession","nestedUpdate","currentUser","shouldIgnoreUpdates","shouldIgnoreErrors","abortControllerChatId","abortControllerThreadId","abortControllerGroup","shouldReturnTrue","isResponseUpdate","isSlowMode","SendMessage","SendMedia","SendMultiMedia","hasErrorKey","dispatchErrorUpdate","invokeRequestBeacon","downloadMediaWithClient","repairFileReference","abortChatRequests","abortRequestGroup","group","fetchCurrentUser","userFull","currentUserFullInfo","_currentUserId","onCurrentUserUpdate","repairableEntity","stories","GetStoriesByID","repairStoryMedia","GetMessages","InputMessageID","MessagesNotModified","apiMessage","repairMessageMedia","requestChannelDifference","reportPeer","ReportPeer","reportProfilePhoto","ReportProfilePhoto","changeSessionSettings","isConfirmed","ChangeAuthorizationSettings","confirmed","changeSessionTtl","SetAuthorizationTTL","authorizationTtlDays","resolveBusinessChatLink","ResolveBusinessChatLink","chatLink","toggleSponsoredMessages","ToggleSponsoredMessages","fetchChats","offsetDate","offsetPeer","offsetId","withPinned","lastLocalServiceMessageId","GetDialogs","excludePinned","resultPinned","GetPinnedDialogs","DialogsNotModified","peersByKey","preparePeers","draftsById","dialogs","orderedPinnedIds","lastMessageByChatId","Dialog","isListed","chatIds","totalChatCount","DialogsSlice","lastDialog","nextOffsetId","nextOffsetPeerId","nextOffsetDate","fetchSavedChats","GetSavedDialogs","GetPinnedSavedDialogs","SavedDialogsNotModified","hasPinned","buildApiChatFromSavedDialog","SavedDialogsSlice","fetchFullChat","GetFullChannel","fullChat","ChannelFull","onlineCount","exportedInvite","slowmodeSeconds","slowmodeNextSendDate","migratedFromChatId","migratedFromMaxId","canViewParticipants","canViewStats","linkedChatId","hiddenPrehistory","availableReactions","reactionsLimit","defaultSendAs","statsDc","chatPhoto","participantsHidden","emojiset","boostsApplied","boostsUnrestrict","canViewRevenue","canViewMonetization","paidReactionsAvailable","stargiftsAvailable","inviteLink","ChatInviteExported","members","fetchMembers","kickedMembers","bannedStatusesById","adminMembers","adminStatusesById","memberInfoRequest","fetchMember","memberInfo","joinInfo","inviter","mtpLinkedChat","linkedChat","statusesById","fullInfo","slowMode","nextSendDate","migratedFrom","maxMessageId","canViewMembers","canViewStatistics","isPreHistoryHidden","adminMembersById","enabledReactions","sendAsId","statisticsDcId","emojiSet","areParticipantsHidden","boostsToUnrestrict","isPaidReactionAvailable","areStarGiftsAvailable","getFullChannelInfo","GetFullChat","ChatFull","getFullChatInfo","fetchChatSettings","GetPeerSettings","searchChats","Search","accountPeerIds","myResults","globalPeerIds","accountResultIds","globalResultIds","fetchChat","GetSupport","requestChatUpdate","lastLocalMessage","noLastMessage","GetPeerDialogs","InputDialogPeer","lastRemoteMessage","lastMessage","chatUpdate","saveDraft","SaveDraft","updateChatMutedState","InputNotifyPeer","InputPeerNotifySettings","updateTopicMutedState","InputNotifyForumTopic","createChannel","CreateChannel","newChannel","missingUsers","invitedUsers","InviteToChannel","missingInvitees","joinChannel","JoinChannel","deleteChatUser","DeleteChatUser","deleteChat","DeleteChat","leaveChannel","LeaveChannel","deleteChannel","DeleteChannel","createGroupChat","CreateChat","newChat","editChatPhoto","inputEntity","inputPhoto","uploadedPhoto","InputChatUploadedPhoto","InputChatPhoto","InputChatPhotoEmpty","EditPhoto","EditChatPhoto","toggleChatPinned","shouldBePinned","ToggleDialogPin","toggleSavedDialogPinned","ToggleSavedDialogPin","toggleChatArchived","folders","EditPeerFolders","InputFolderPeer","fetchChatFolders","GetDialogFilters","filters","defaultFolderPosition","findIndex","DialogFilterDefault","byId","fetchRecommendedChatFolders","GetSuggestedDialogFilters","editChatFolder","folderUpdate","nonContacts","groups","bots","excludeArchived","excludeMuted","excludeRead","buildFilterFromApiFolder","deleteChatFolder","isActionSuccessful","recommendedChatFolders","sortChatFolders","UpdateDialogFiltersOrder","toggleDialogUnread","MarkDialogUnread","getChatByPhoneNumber","processResolvedPeer","ResolvePhone","getChatByUsername","referrer","ResolveUsername","referer","togglePreHistoryHidden","TogglePreHistoryHidden","updateChatDefaultBannedRights","EditChatDefaultBannedRights","updateChatMemberBannedRights","EditBanned","updateChatAdmin","EditAdmin","updateChatTitle","EditTitle","EditChatTitle","updateChatAbout","EditChatAbout","toggleSignatures","areSignaturesEnabled","areProfilesEnabled","ToggleSignatures","signaturesEnabled","profilesEnabled","memberFilter","ChannelParticipantsKicked","ChannelParticipantsAdmins","ChannelParticipantsRecent","GetParticipants","ChannelParticipantsNotModified","GetParticipant","fetchGroupsForDiscussion","GetGroupsForDiscussion","setDiscussionGroup","SetDiscussionGroup","migrateChat","MigrateChat","newChannelId","checkChatInvite","CheckChatInvite","ChatInvite","addChatMembers","addChatUsersResult","AddChatUser","deleteChatMember","viewMessages","sendMessages","sendMedia","sendStickers","sendGifs","sendGames","sendInline","embedLinks","sendPolls","changeInfo","inviteUsers","pinMessages","manageTopics","sendPhotos","sendVideos","sendRoundvideos","sendAudios","sendVoices","sendDocs","sendPlain","toggleJoinToSend","ToggleJoinToSend","toggleJoinRequest","ToggleJoinRequest","currentStore","store","importChatInvite","ImportChatInvite","setChatEnabledReactions","SetChatAvailableReactions","ChatReactionsNone","toggleIsProtected","ToggleNoForwards","toggleParticipantsHidden","ToggleParticipantsHidden","toggleForum","ToggleForum","createTopic","CreateForumTopic","fetchTopics","offsetTopicId","GetForumTopics","offsetTopic","orderByCreateDate","topics","shouldOrderByCreateDate","topic","ForumTopic","readInboxMessageIdByTopicId","fetchTopicById","GetForumTopicsByID","deleteTopic","DeleteTopicHistory","togglePinnedTopic","UpdatePinnedForumTopic","editTopic","EditForumTopic","checkChatlistInvite","chatlists","CheckChatlistInvite","ChatlistInvite","ChatlistInviteAlready","filterId","missingPeerIds","missingPeers","alreadyPeerIds","alreadyPeers","buildApiChatlistInvite","joinChatlistInvite","JoinChatlistInvite","fetchLeaveChatlistSuggestions","GetLeaveChatlistSuggestions","chatlist","InputChatlistDialogFilter","leaveChatlist","LeaveChatlist","createChalistInvite","ExportChatlistInvite","deleteChatlistInvite","DeleteExportedInvite","editChatlistInvite","EditExportedInvite","fetchChatlistInvites","GetExportedInvites","invites","togglePeerTranslations","TogglePeerTranslations","disabled","setViewForumAsMessages","ToggleViewForumAsMessages","fetchChannelRecommendations","GetChannelRecommendations","similarChannels","ChatsSlice","FAST_SEND_TIMEOUT","fetchMessages","isSavedDialog","pagination","RequestClass","GetHistory","GetSavedHistory","GetReplies","Messages","fetchMessage","mediaQueue","sendMessage","scheduledAt","noWebPage","shouldUpdateStickerSetOrder","wasDrafted","webPageMediaSize","webPageUrl","localMessage","localPoll","resultReplyInfo","inputInfo","buildNewPoll","buildLocalMessage","sendingState","groupIndex","groupedUploads","counter","singleMediaByIndex","localMessages","prevMediaQueue","uploadMedia","inputMedia","uploadedMedia","messageMedia","UploadMedia","InputMediaPhoto","fetchInputMedia","InputSingleMedia","clearDraft","multiMedia","handleMultipleLocalMessagesUpdate","sendGroupedMedia","messagePromise","pollParams","buildInputPoll","InputMediaStory","buildInputStory","InputMediaWebPage","InputMediaContact","vcard","noWebpage","updateStickersetsOrder","handleLocalMessageUpdate","editMessage","newContent","mediaUpdate","mtpEntities","EditMessage","messageErr","rescheduleMessage","patchedOnProgress","buildMessageKey","previousLocalId","getMessageKey","fetchAndUpload","fetchBlob","lastModified","blobToFile","fetchFile","shouldUploadThumb","inputFile","InputMediaUploadedPhoto","InputMediaUploadedDocument","forceFile","pinMessage","isUnpin","isOneSide","UpdatePinnedMessage","unpin","pmOneside","unpinAllMessages","UnpinAllMessages","deleteMessages","shouldDeleteForAll","DeleteMessages","revoke","deleteScheduledMessages","DeleteScheduledMessages","deleteHistory","DeleteHistory","just_clear","deleteSavedHistory","DeleteSavedHistory","reportMessages","Report","reportChannelSpam","ReportSpam","sendMessageAction","gramAction","buildSendMessageAction","SetTyping","markMessageListRead","fixedMaxId","ReadHistory","ReadDiscussion","markMessagesRead","ReadMessageContents","fetchMessageViews","shouldIncrement","chunks","chunkIds","GetMessagesViews","increment","viewsList","flatMap","viewsInfo","fetchFactChecks","GetFactCheck","fetchPaidReactionPrivacy","GetPaidReactionPrivacy","reportMessagesDelivery","ReportMessagesDelivery","fetchDiscussionMessage","GetDiscussionMessage","addOffset","topMessages","firstMessageId","searchMessagesInChat","savedTag","minDate","maxDate","InputMessagesFilterPhotoVideo","InputMessagesFilterDocument","InputMessagesFilterUrl","InputMessagesFilterMusic","InputMessagesFilterRoundVoice","InputMessagesFilterChatPhotos","InputMessagesFilterEmpty","inputPeer","savedReaction","MessagesSlice","ChannelMessages","searchMessagesGlobal","offsetRate","SearchGlobal","broadcastsOnly","groupsOnly","usersOnly","nextOffsetRate","nextRate","searchHashtagPosts","hashtag","SearchPosts","fetchWebPagePreview","GetWebPagePreview","sendPollVote","SendVote","closePoll","loadPollOptionResults","shouldResetVoters","GetPollVotes","votes","vote","nextOffset","fetchExtendedMedia","GetExtendedMedia","forwardMessages","fromChat","toChat","toThreadId","withMyScore","noAuthors","noCaptions","isCurrentUserPremium","randomIds","isAudio","asIncomingInChatWithSelf","shouldHideText","shouldDropCustomEmoji","strippedText","updatedContent","buildLocalForwardedMessage","ForwardMessages","fromPeer","toPeer","dropAuthor","dropMediaCaptions","findFirstMessageIdAfterDate","fetchScheduledHistory","GetScheduledHistory","sendScheduledMessages","SendScheduledMessages","fetchPinnedMessages","InputMessagesFilterPinned","fetchSeenBy","GetMessageReadParticipants","readDate","fetchSendAs","GetSendAs","saveDefaultSendAs","SaveDefaultSendAs","fetchSponsoredMessages","GetSponsoredMessages","SponsoredMessagesEmpty","recommended","sponsorInfo","additionalInfo","buttonText","canReport","expiresAt","isRecommended","buildApiSponsoredMessage","viewSponsoredMessage","ViewSponsoredMessage","clickSponsoredMessage","isMedia","isFullscreen","ClickSponsoredMessage","fullscreen","reportSponsoredMessage","ReportSponsoredMessage","SponsoredMessageReportResultReported","SponsoredMessageReportResultAdsHidden","buildApiSponsoredMessageReportResult","readAllMentions","ReadMentions","readAllReactions","ReadReactions","fetchUnreadMentions","GetUnreadMentions","fetchUnreadReactions","GetUnreadReactions","transcribeAudio","TranscribeAudio","translateText","isMessageTranslation","toLanguageCode","TranslateText","toLang","formattedText","translations","updateNewScheduledMessage","scheduledUpdate","scheduledMessageUpdate","newScheduledMessage","isSentBefore","newScheduledMessageId","updatedMessage","fetchOutboxReadDate","GetOutboxReadDate","fetchQuickReplies","GetQuickReplies","QuickRepliesNotModified","sendQuickReply","GetQuickReplyMessages","SendQuickReplyMessages","filteredUpdates","exportMessageLink","shouldIncludeThread","shouldIncludeGrouped","ExportMessageLink","thread","grouped","fetchFullUser","input","fetchCommonChats","GetCommonChats","fetchNearestCountry","dcInfo","GetNearestDc","fetchTopUsers","topPeers","GetTopPeers","correspondents","TopPeers","fetchContactList","GetContacts","ContactsNotModified","fetchUsers","importContact","ImportContacts","ImportedContacts","updateContact","shouldSharePhoneNumber","AddContact","addPhonePrivacyException","deleteContact","DeleteContacts","fetchProfilePhotos","GetUserPhotos","PhotosSlice","proposedNextOffsetId","userOrChat","updateEmojiStatus","UpdateEmojiStatus","saveCloseFriends","userIds","EditCloseFriends","fetchCustomEmojiSets","allStickers","GetEmojiStickers","AllStickersNotModified","sets","fetchStickerSets","GetAllStickers","fetchRecentStickers","GetRecentStickers","RecentStickersNotModified","fetchFavoriteStickers","GetFavedStickers","FavedStickersNotModified","fetchFeaturedStickers","GetFeaturedStickers","FeaturedStickersNotModified","fetchFeaturedEmojiStickers","GetFeaturedEmojiStickers","faveSticker","unfave","FaveSticker","removeRecentSticker","SaveRecentSticker","unsave","clearRecentStickers","ClearRecentStickers","fetchStickers","GetStickerSet","fetchCustomEmoji","fetchAnimatedEmojis","InputStickerSetAnimatedEmoji","fetchAnimatedEmojiEffects","InputStickerSetAnimatedEmojiAnimations","fetchGenericEmojiEffects","InputStickerSetEmojiGenericAnimations","fetchPremiumGifts","InputStickerSetPremiumGifts","fetchDefaultTopicIcons","InputStickerSetEmojiDefaultTopicIcons","fetchDefaultStatusEmojis","InputStickerSetEmojiDefaultStatuses","searchStickers","SearchStickerSets","FoundStickerSetsNotModified","fetchSavedGifs","GetSavedGifs","SavedGifsNotModified","gifs","processGifResult","saveGif","shouldUnsave","SaveGif","installStickerSet","stickerSetId","InstallStickerSet","uninstallStickerSet","UninstallStickerSet","inputGifBot","searchGifs","resolvedPeer","GetInlineBotResults","foundGif","BotInlineMediaResult","fetchStickersForEmoji","GetStickers","StickersNotModified","fetchEmojiKeywords","fromVersion","GetEmojiKeywordsDifference","emojiKeyword","keyword","emoticons","fetchRecentEmojiStatuses","GetRecentEmojiStatuses","EmojiStatusesNotModified","documentIds","statuses","emojiStatuses","checkChatUsername","CheckUsername","setChatUsername","UpdateUsername","deactivateAllUsernames","DeactivateAllUsernames","updatePrivateLink","ExportChatInvite","fetchExportedChatInvites","admin","exportedInvites","GetExportedChatInvites","editExportedChatInvite","EditExportedChatInvite","ExportedChatInvite","replaceInvite","oldInvite","newInvite","ExportedChatInviteReplaced","exportChatInvite","deleteExportedChatInvite","DeleteExportedChatInvite","deleteRevokedExportedChatInvites","DeleteRevokedExportedChatInvites","fetchChatInviteImporters","offsetUser","isRequested","GetChatInviteImporters","InputUserEmpty","importers","importer","viaChatlist","isFromChatList","buildChatInviteImporter","hideChatJoinRequest","isApproved","HideChatJoinRequest","approved","hideAllChatJoinRequests","HideAllChatJoinRequests","hideChatReportPane","HidePeerSettingsBar","buildEmojiSounds","appConfig","emojies_sounds","l","access_hash","getLimit","fallbackKey","BETA_LANG_CODES","updateProfile","UpdateProfile","checkUsername","updateUsername","updateProfilePhoto","isFallback","InputPhotoEmpty","UpdateProfilePhoto","fallback","uploadProfilePhoto","videoTs","UploadProfilePhoto","uploadContactProfilePhoto","isSuggest","UploadContactProfilePhoto","suggest","deleteProfilePhotos","photoIds","DeletePhotos","fetchWallpapers","GetWallPapers","WallPapersNotModified","filteredWallpapers","wallpapers","WallPaper","uploadWallpaper","UploadWallPaper","WallPaperSettings","fetchBlockedUsers","isOnlyStories","GetBlocked","myStoriesFrom","blockedIds","BlockedSlice","blockUser","Block","unblockUser","Unblock","fetchAuthorizations","GetAuthorizations","authorizations","ttlDays","terminateAuthorization","ResetAuthorization","terminateAllAuthorizations","ResetAuthorizations","fetchWebAuthorizations","GetWebAuthorizations","webAuthorizations","terminateWebAuthorization","ResetWebAuthorization","terminateAllWebAuthorizations","ResetWebAuthorizations","fetchNotificationExceptions","GetNotifyExceptions","compareSound","fetchNotificationSettings","isMutedContactSignUpNotification","privateContactNotificationsSettings","groupNotificationsSettings","broadcastNotificationsSettings","GetContactSignUpNotification","GetNotifySettings","InputNotifyUsers","InputNotifyChats","InputNotifyBroadcasts","privateSilent","privateMuteUntil","privateShowPreviews","groupSilent","groupMuteUntil","groupShowPreviews","broadcastSilent","broadcastMuteUntil","broadcastShowPreviews","hasContactJoinedNotifications","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","updateContactSignUpNotification","SetContactSignUpNotification","updateNotificationSettings","fetchLangPack","langpack","GetLangPack","fetchLangDifference","fetchLanguages","GetLanguages","fetchLanguage","GetLanguage","fetchLangStrings","GetStrings","oldFetchLangPack","sourceLangPacks","collections","fetchPrivacySettings","GetPrivacy","registerDevice","secret","RegisterDevice","tokenType","appSandbox","otherUids","unregisterDevice","UnregisterDevice","setPrivacySettings","SetPrivacy","updateIsOnline","isOnline","UpdateStatus","offline","fetchContentSettings","GetContentSettings","isSensitiveEnabled","sensitiveEnabled","canChangeSensitive","sensitiveCanChange","updateContentSettings","SetContentSettings","fetchAppConfig","GetAppConfig","AppConfigNotModified","config","resultHash","emojiSounds","seenByMaxChatMembers","chat_read_mark_size_threshold","seenByExpiresAt","chat_read_mark_expire_period","readDateExpiresAt","pm_read_date_expire_period","autologinDomains","autologin_domains","urlAuthDomains","url_auth_domains","maxUniqueReactions","reactions_uniq_max","premiumBotUsername","premium_bot_username","premiumInvoiceSlug","premium_invoice_slug","premiumPromoOrder","premium_promo_order","isPremiumPurchaseBlocked","premium_purchase_blocked","isGiveawayGiftsPurchaseAvailable","giveaway_gifts_purchase_available","defaultEmojiStatusesStickerSetId","default_emoji_statuses_stickerset_id","topicsPinnedLimit","topics_pinned_limit","maxUserReactionsDefault","reactions_user_max_default","maxUserReactionsPremium","reactions_user_max_premium","hiddenMembersMinCount","hidden_members_group_size_min","giveawayAddPeersMax","giveaway_add_peers_max","giveawayBoostsPerPremium","giveaway_boosts_per_premium","giveawayCountriesMax","giveaway_countries_max","boostsPerSentGift","boosts_per_sent_gift","canDisplayAutoarchiveSetting","autoarchive_setting_available","limits","stories_all_hidden","storyExpirePeriod","story_expire_period","storyViewersExpirePeriod","story_viewers_expire_period","storyChangelogUserId","stories_changelog_user_id","maxPinnedStoriesCount","stories_pinned_to_top_count_max","groupTranscribeLevelMin","group_transcribe_level_min","canLimitNewMessagesWithoutPremium","new_noncontact_peers_require_premium_without_ownpremium","bandwidthPremiumNotifyPeriod","upload_premium_speedup_notify_period","bandwidthPremiumUploadSpeedup","upload_premium_speedup_upload","bandwidthPremiumDownloadSpeedup","upload_premium_speedup_download","channelRestrictAdsLevelMin","channel_restrict_sponsored_level_min","paidReactionMaxAmount","stars_paid_reaction_amount_max","isChannelRevenueWithdrawalEnabled","channel_revenue_withdrawal_enabled","isStarsGiftEnabled","stars_gifts_enabled","starGiftMaxMessageLength","stargifts_message_length_max","starGiftMaxConvertPeriod","stargifts_convert_period_max","starRefStartPrefixes","starref_start_param_prefixes","buildAppConfig","fetchConfig","testMode","gifSearchUsername","chatSizeMax","autologinToken","reactionsDefault","messageLengthMax","editTimeLimit","forwardedCountMax","defaultReaction","maxGroupSize","maxMessageLength","maxForwardedCount","buildApiConfig","fetchPeerColors","GetPeerColors","wrapper","PeerColors","colorId","darkColors","buildApiPeerColors","fetchTimezones","GetTimezonesList","TimezonesListNotModified","timezones","fetchCountryList","countryList","GetCountriesList","CountriesList","nonHiddenCountries","phoneCodes","countryCodes","localeCompare","general","buildApiCountryList","fetchGlobalPrivacySettings","GetGlobalPrivacySettings","shouldArchiveAndMuteNewNonContact","archiveAndMuteNewNoncontactPeers","shouldHideReadMarks","hideReadMarks","shouldNewNonContactPeersRequirePremium","newNoncontactPeersRequirePremium","updateGlobalPrivacySettings","SetGlobalPrivacySettings","GlobalPrivacySettings","toggleUsername","ToggleUsername","reorderUsernames","ReorderUsernames","emailCodeController","getPasswordInfo","onRequestEmailCode","getTemporaryPaymentPassword","getPassword","checkPassword","clearPassword","updatePassword","updateRecoveryEmail","provideRecoveryEmailCode","answerCallbackButton","isGame","GetBotCallbackAnswer","fetchTopInlineBots","botsInline","fetchTopBotApps","botsApp","fetchInlineBot","fetchInlineBotResults","switchWebview","switchPm","isGallery","gallery","buildApiBotInlineMediaResult","webThumbnail","buildApiBotInlineResult","cacheTime","sendInlineBotResult","resultId","SendInlineBotResult","startBot","startParam","StartBot","requestWebView","theme","isFromBotMenu","RequestWebView","themeParams","fromBotMenu","WebViewResultUrl","isFullScreen","requestMainWebView","RequestMainWebView","requestSimpleWebView","isFromSwitchWebView","isFromSideMenu","RequestSimpleWebView","fromSwitchWebview","fromSideMenu","fetchBotApp","appName","GetBotApp","InputBotAppShortName","BotAppNotModified","botApp","baseApp","buildApiBotApp","buildApiMessagesBotApp","requestAppWebView","isWriteAllowed","RequestAppWebView","writeAllowed","prolongWebView","ProlongWebView","sendWebViewData","SendWebViewData","loadAttachBots","GetAttachMenuBots","AttachMenuBots","loadAttachBot","GetAttachMenuBot","AttachMenuBotsBot","toggleAttachBot","ToggleBotInAttachMenu","requestBotUrlAuth","RequestUrlAuth","authResult","acceptBotUrlAuth","AcceptUrlAuth","requestLinkUrlAuth","acceptLinkUrlAuth","fetchBotCanSendMessage","CanSendMessage","allowBotSendMessages","AllowSendMessage","invokeWebViewCustomMethod","customMethod","parameters","InvokeWebViewCustomMethod","fetchPreviewMedias","GetPreviewMedias","checkBotDownloadFileParams","CheckDownloadFileParams","toggleUserEmojiStatusPermission","ToggleUserEmojiStatusPermission","setBotInfo","SetBotInfo","fetchPopularAppBots","GetPopularAppBots","fetchBotsRecommendations","inputUser","GetBotRecommendations","similarBots","UsersSlice","getGroupCall","GetGroupCall","discardGroupCall","DiscardGroupCall","editGroupCallParticipant","presentationPaused","videoStopped","videoPaused","raiseHand","EditGroupCallParticipant","editGroupCallTitle","EditGroupCallTitle","exportGroupCallInvite","ExportGroupCallInvite","fetchGroupCallParticipants","GetGroupParticipants","leaveGroupCall","isPageUnload","LeaveGroupCall","joinGroupCall","inviteHash","JoinGroupCall","joinAs","createGroupCall","CreateGroupCall","joinGroupCallPresentation","JoinGroupCallPresentation","toggleGroupCallStartSubscription","subscribed","ToggleGroupCallStartSubscription","leaveGroupCallPresentation","LeaveGroupCallPresentation","getDhConfig","dhConfig","GetDhConfig","DhConfigNotModified","discardCall","isBusy","DiscardCall","requestCall","RequestCall","setCallRating","rating","comment","SetCallRating","receivedCall","ReceivedCall","acceptCall","AcceptCall","confirmCall","ConfirmCall","sendSignalingData","SendSignalingData","sendWatchingEmojiInteraction","sendEmojiInteraction","v","fetchAvailableReactions","GetAvailableReactions","AvailableReactionsNotModified","fetchAvailableEffects","GetAvailableEffects","AvailableEffectsNotModified","documentsMap","effects","sendReaction","shouldAddToRecent","SendReaction","addToRecent","sendPaidReaction","SendPaidReaction","fetchMessageReactions","GetMessagesReactions","fetchMessageReactionsList","GetMessageReactionsList","setDefaultReaction","SetDefaultReaction","fetchTopReactions","GetTopReactions","ReactionsNotModified","fetchRecentReactions","GetRecentReactions","clearRecentReactions","ClearRecentReactions","fetchDefaultTagReactions","GetDefaultTagReactions","fetchSavedReactionTags","GetSavedReactionTags","SavedReactionTagsNotModified","tags","updateSavedReactionTag","UpdateSavedReactionTag","fetchChannelStatistics","GetBroadcastStats","growthGraph","followersGraph","muteGraph","topHoursGraph","languagesGraph","viewsBySourceGraph","newFollowersBySourceGraph","interactionsGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","followers","viewsPerPost","sharesPerPost","enabledNotifications","reactionsPerPost","viewsPerStory","sharesPerStory","reactionsPerStory","recentPosts","recentPostsInteractions","fetchChannelMonetizationStatistics","GetBroadcastRevenueStats","revenueGraph","usdRate","balances","fetchGroupStatistics","GetMegagroupStats","membersGraph","messagesGraph","actionsGraph","viewers","posters","fetchMessageStatistics","GetMessageStats","fetchMessagePublicForwards","GetMessagePublicForwards","fetchStatisticsAsyncGraph","LoadAsyncGraph","fetchStoryStatistics","GetStoryStats","fetchStoryPublicForwards","GetStoryPublicForwards","publicForwards","fetchMonetizationRevenueWithdrawalUrl","GetBroadcastRevenueWithdrawalUrl","currentPhoneCallState","PhoneCallState","waitForState","resolveState","pBN","randomBN","pLast","randomLast","emojiData","emojiOffsets","emojiCount","partOffset","byteLength","and","modPow","generateEmojiFingerprint","encode","seqArray","Uint32Array","encodedData","decode","createPhoneCallState","destroyPhoneCallState","encodePhoneCallData","decodePhoneCallData","confirmPhoneCall","acceptPhoneCall","requestPhoneCall","fetchAllStories","stateHash","isFirstRequest","GetAllStories","AllStoriesNotModified","allUserStories","peerStories","buildApiPeerStories","profileIds","lastUpdatedAt","dataAcc","maxReadId","hasMore","fetchPeerStories","GetPeerStories","lastReadStoryId","fetchPeerProfileStories","fetchCommonStoriesRequest","GetPinnedStories","fetchStoriesArchive","GetStoriesArchive","fetchPeerStoriesByIds","currentId","pinnedIds","pinnedToTop","viewStory","IncrementStoryViews","markStoryRead","ReadStories","deleteStory","DeleteStories","toggleStoryInProfile","TogglePinned","toggleStoryPinnedToTop","storyIds","TogglePinnedToTop","fetchStoryViewList","areJustContacts","areReactionsFirst","GetStoryViewsList","justContacts","reactionsFirst","fetchStoriesViews","GetStoriesViews","fetchStoryLink","ExportStoryLink","reportStory","editStoryPrivacy","EditStory","toggleStoriesHidden","TogglePeerStoriesHidden","fetchStoriesMaxIds","GetPeerMaxIDs","sendStoryReaction","activateStealthMode","isForPast","isForFuture","ActivateStealthMode","past","future","validateRequestedInfo","inputInvoice","requestInfo","shouldSave","ValidateRequestedInfo","sendPaymentForm","formId","requestedInfoId","shippingOptionId","credentials","savedCredentialId","temporaryPassword","inputCredentials","InputPaymentCredentialsSaved","tmpPassword","InputPaymentCredentials","SendPaymentForm","PaymentVerificationNeeded","sendStarPaymentForm","SendStarsForm","mtpChannelId","completed","getPaymentForm","GetPaymentForm","form","PaymentFormStarGift","PaymentFormStars","canSaveCredentials","passwordMissing","isPasswordMissing","nativeProvider","nativeParams","savedInfo","savedCredentials","cleanedInfo","nativeData","needCardholderName","need_cardholder_name","needCountry","need_country","needZip","need_zip","publishableKey","publishable_key","publicToken","public_token","tokenizeUrl","tokenize_url","buildApiPaymentForm","getReceipt","GetPaymentReceipt","fetchPremiumPromo","GetPremiumPromo","fetchTemporaryPaymentPassword","validUntil","fetchMyBoosts","GetMyBoosts","myBoosts","applyBoost","slots","ApplyBoost","fetchBoostStatus","GetBoostsStatus","boostStatus","boostUrl","giftBoosts","currentLevelBoosts","nextLevelBoosts","premiumAudience","prepaidGiveaways","hasMyBoost","premiumSubscribers","buildPrepaidGiveaway","PrepaidGiveaway","buildApiBoostsStatus","fetchBoostList","isGifts","GetBoostsList","gifts","boostList","fetchGiveawayInfo","GetGiveawayInfo","GiveawayInfo","adminDisallowedChatId","disallowedCountry","joinedTooEarlyDate","participating","preparingResults","isParticipating","isPreparingResults","activatedCount","finishDate","giftCodeSlug","starsPrize","isWinner","buildApiGiveawayInfo","checkGiftCode","CheckGiftCode","applyGiftCode","ApplyGiftCode","getPremiumGiftCodeOptions","GetPremiumGiftCodeOptions","getStarsGiftOptions","GetStarsGiftOptions","fetchStarsGiveawayOptions","GetStarsGiveawayOptions","fetchStarGifts","GetStarGifts","StarGiftsNotModified","fetchSavedStarGifts","GetSavedStarGifts","userStarGift","unsaved","isUnsaved","buildApiSavedStarGift","saveStarGift","SaveStarGift","convertStarGift","ConvertStarGift","launchPrepaidGiveaway","giveawayId","paymentPurpose","LaunchPrepaidGiveaway","fetchStarsStatus","GetStarsStatus","nextHistoryOffset","history","nextSubscriptionOffset","subscriptionsNextOffset","subscriptions","fetchStarsTransactions","isInbound","isOutbound","GetStarsTransactions","inbound","outbound","fetchStarsTransactionById","GetStarsTransactionsByID","InputStarsTransaction","fetchStarsSubscriptions","GetStarsSubscriptions","changeStarsSubscription","subscriptionId","ChangeStarsSubscription","fulfillStarsSubscription","FulfillStarsSubscription","fetchStarsTopupOptions","GetStarsTopupOptions","fetchUniqueStarGift","GetUniqueStarGift","fetchStarGiftUpgradePreview","GetStarGiftUpgradePreview","sampleAttributes","upgradeGift","UpgradeStarGift","fetchStarGiftWithdrawalUrl","passwordCheck","GetStarGiftWithdrawalUrl","fetchCollectionInfo","collectible","inputCollectible","InputCollectibleUsername","InputCollectiblePhone","fragment","GetCollectibleInfo","purchaseDate","buildApiCollectibleInfo","initApi","initialArgs","initialLocalDb","initUpdateEmitter","userAgent","mockScenario","sessions","invokeReq","initUpdatesManager","initClient","ORIGINAL_FUNCTIONS","sendToOrigin","pendingPayloads","pendingTransferables","callbackState","payloads","withCallback","callbackArgs","lastArg","fnName","methods","callApi","sendToOriginOnTickEnd","transferables","transferable","little","randBuffer","bytesNumber","bigNumber","byteArray","below","hex","randomBytes","serverNonceBigInt","newNonceBigInt","buf","writeUInt32BE","shaSum","createHash","digest","leastSignificantBit","integer","CRC32_TABLE","crcTable","crc32","crc","isBigEndian","i2ab","uint8","j","int","ab2i","ab","Counter","initialValue","_counter","_remainingCounter","_remainingCounterIndex","_aes","AES","getWords","encrypted","algorithm","crypto","getRandomValues","Hash","subtle","passwordKey","importKey","deriveBits","str","charCodeAt","CORE_TYPES","AUTH_KEY_TYPES","findAll","matches","RegExp","exec","fromLine","isFunction","argsMatch","currentConfig","argsConfig","subclassOfId","namespace","hexId","arg","representation","brace","argType","buildArgConfig","_","isVector","isFlag","skipConstructorId","flagGroup","flagIndex","flagIndicator","useVectorId","flagMatch","vectorMatch","charAt","parseTl","ignoreIds","objAll","objByName","objByType","commentIndex","trim","followingTypes","serializeDate","dt","getTime","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","__webpack_exports__","O","priority","notFulfilled","fulfilled","getter","__esModule","definition","defineProperty","enumerable","f","chunkId","miniCssF","Function","Symbol","toStringTag","nmd","paths","children","scriptUrl","importScripts","currentScript","src","scripts","getElementsByTagName","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","moreModules","runtime"],"sourceRoot":""}